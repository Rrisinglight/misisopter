
F103_HW_SPI_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007250  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007534  08007534  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08007534  08007534  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007534  08007534  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800753c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000038  08007574  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08007574  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107dd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d83  00000000  00000000  00030881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1d  00000000  00000000  00034468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018385  00000000  00000000  00034f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001433c  00000000  00000000  0004d30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d3d  00000000  00000000  00061646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b28  00000000  00000000  000ea384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000edeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	08007348 	.word	0x08007348

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	08007348 	.word	0x08007348

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <OutSPI1Pin>:

extern uint8_t SPI1_OUT[8];

// SPI1Pin пин на выход, PA5
void OutSPI1Pin(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	603b      	str	r3, [r7, #0]
//	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <OutSPI1Pin+0x3c>)
 8000e6c:	f002 fab6 	bl	80033dc <HAL_GPIO_Init>
	  PA5_Clr;
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <OutSPI1Pin+0x3c>)
 8000e76:	f002 fc35 	bl	80036e4 <HAL_GPIO_WritePin>
}	//
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010800 	.word	0x40010800

08000e88 <RX5808_Init>:

void RX5808_Init(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
/*	SPI1_OUT[0] = 0x10;
	SPI1_OUT[1] = 0x01;
	SPI1_OUT[2] = 0x00;
	SPI1_OUT[3] = 0x00;
*/
	SPI1_OUT[0] = 0x10;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <RX5808_Init+0x24>)
 8000e8e:	2210      	movs	r2, #16
 8000e90:	701a      	strb	r2, [r3, #0]
	SPI1_OUT[1] = 0x0F;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <RX5808_Init+0x24>)
 8000e94:	220f      	movs	r2, #15
 8000e96:	705a      	strb	r2, [r3, #1]
	SPI1_OUT[2] = 0x29;
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <RX5808_Init+0x24>)
 8000e9a:	2229      	movs	r2, #41	; 0x29
 8000e9c:	709a      	strb	r2, [r3, #2]
	SPI1_OUT[3] = 0x00;
 8000e9e:	4b03      	ldr	r3, [pc, #12]	; (8000eac <RX5808_Init+0x24>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	70da      	strb	r2, [r3, #3]

//    SET(RX5808_PORTX, RX5808_SS);
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000000 	.word	0x20000000

08000eb0 <prog_freg>:

 void prog_freg (unsigned int Freguency)               // устанавливаем частоту в RX5808 из регистра freguencu
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	  unsigned int Delitel;
	  unsigned int DelitelH;
	  unsigned int DelitelL;

      Delitel=(Freguency -479)/2 ;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f2a3 13df 	subw	r3, r3, #479	; 0x1df
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
      DelitelH=Delitel>>5 ;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	095b      	lsrs	r3, r3, #5
 8000ec6:	613b      	str	r3, [r7, #16]
      DelitelL=Delitel &0x1F;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	60fb      	str	r3, [r7, #12]
      SPI_WriteByte(DelitelH *16 + DelitelL /8);
      SPI_WriteByte(DelitelH /16);
      SPI_WriteByte(0x00);
      SET(RX5808_PORTX, RX5808_SS);
*/
	SPI1_OUT[0] = (DelitelL *32 +17 );
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3311      	adds	r3, #17
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <prog_freg+0x60>)
 8000ede:	701a      	strb	r2, [r3, #0]
	SPI1_OUT[1] = (DelitelH *16 + DelitelL /8);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <prog_freg+0x60>)
 8000ef4:	705a      	strb	r2, [r3, #1]
	SPI1_OUT[2] = (DelitelH /16);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <prog_freg+0x60>)
 8000efe:	709a      	strb	r2, [r3, #2]
	SPI1_OUT[3] = 0x00;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <prog_freg+0x60>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	70da      	strb	r2, [r3, #3]
}
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000000 	.word	0x20000000

08000f14 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <MX_ADC1_Init+0x9c>)
 8000f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f40:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f54:	f001 f878 	bl	8002048 <HAL_ADC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f5e:	f000 fd66 	bl	8001a2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f62:	2311      	movs	r3, #17
 8000f64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f74:	f001 fbc4 	bl	8002700 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 fd56 	bl	8001a2e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f82:	2308      	movs	r3, #8
 8000f84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC1_Init+0x98>)
 8000f94:	f001 fbb4 	bl	8002700 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f9e:	f000 fd46 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000054 	.word	0x20000054
 8000fb0:	40012400 	.word	0x40012400

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d151      	bne.n	8001078 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <HAL_ADC_MspInit+0xd0>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001008:	2303      	movs	r3, #3
 800100a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	481d      	ldr	r0, [pc, #116]	; (8001088 <HAL_ADC_MspInit+0xd4>)
 8001014:	f002 f9e2 	bl	80033dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800101a:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 800101c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001036:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800103a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800104e:	f001 ff17 	bl	8002e80 <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001058:	f000 fce9 	bl	8001a2e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2012      	movs	r0, #18
 800106e:	f001 fed0 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001072:	2012      	movs	r0, #18
 8001074:	f001 fee9 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40012400 	.word	0x40012400
 8001084:	40021000 	.word	0x40021000
 8001088:	40010c00 	.word	0x40010c00
 800108c:	20000084 	.word	0x20000084
 8001090:	40020008 	.word	0x40020008

08001094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_DMA_Init+0x38>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <MX_DMA_Init+0x38>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_DMA_Init+0x38>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	200b      	movs	r0, #11
 80010b8:	f001 feab 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010bc:	200b      	movs	r0, #11
 80010be:	f001 fec4 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <MX_GPIO_Init+0x194>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a5e      	ldr	r2, [pc, #376]	; (8001264 <MX_GPIO_Init+0x194>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <MX_GPIO_Init+0x194>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <MX_GPIO_Init+0x194>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <MX_GPIO_Init+0x194>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b56      	ldr	r3, [pc, #344]	; (8001264 <MX_GPIO_Init+0x194>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <MX_GPIO_Init+0x194>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <MX_GPIO_Init+0x194>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b50      	ldr	r3, [pc, #320]	; (8001264 <MX_GPIO_Init+0x194>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	484d      	ldr	r0, [pc, #308]	; (8001268 <MX_GPIO_Init+0x198>)
 8001134:	f002 fad6 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_15, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f248 0101 	movw	r1, #32769	; 0x8001
 800113e:	484b      	ldr	r0, [pc, #300]	; (800126c <MX_GPIO_Init+0x19c>)
 8001140:	f002 fad0 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VTX1_PWR_Pin|SPI1_SS_Pin|VTX2_PWR_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800114a:	4848      	ldr	r0, [pc, #288]	; (800126c <MX_GPIO_Init+0x19c>)
 800114c:	f002 faca 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|I2C1_RST_Pin|I2C1_LED_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2134      	movs	r1, #52	; 0x34
 8001154:	4846      	ldr	r0, [pc, #280]	; (8001270 <MX_GPIO_Init+0x1a0>)
 8001156:	f002 fac5 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001160:	4843      	ldr	r0, [pc, #268]	; (8001270 <MX_GPIO_Init+0x1a0>)
 8001162:	f002 fabf 	bl	80036e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BlueLed_Pin;
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueLed_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	483a      	ldr	r0, [pc, #232]	; (8001268 <MX_GPIO_Init+0x198>)
 8001180:	f002 f92c 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8001184:	f248 0301 	movw	r3, #32769	; 0x8001
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	4833      	ldr	r0, [pc, #204]	; (800126c <MX_GPIO_Init+0x19c>)
 800119e:	f002 f91d 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VTX1_PWR_Pin|VTX2_PWR_Pin;
 80011a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011a8:	2311      	movs	r3, #17
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	482c      	ldr	r0, [pc, #176]	; (800126c <MX_GPIO_Init+0x19c>)
 80011bc:	f002 f90e 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c0:	2310      	movs	r3, #16
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_GPIO_Init+0x1a4>)
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4826      	ldr	r0, [pc, #152]	; (800126c <MX_GPIO_Init+0x19c>)
 80011d4:	f002 f902 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 80011d8:	2340      	movs	r3, #64	; 0x40
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	481f      	ldr	r0, [pc, #124]	; (800126c <MX_GPIO_Init+0x19c>)
 80011f0:	f002 f8f4 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <MX_GPIO_Init+0x1a0>)
 800120c:	f002 f8e6 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 8001210:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0x1a0>)
 800122a:	f002 f8d7 	bl	80033dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_RST_Pin|I2C1_LED_Pin;
 800122e:	2330      	movs	r3, #48	; 0x30
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800123a:	2301      	movs	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <MX_GPIO_Init+0x1a0>)
 8001246:	f002 f8c9 	bl	80033dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	200a      	movs	r0, #10
 8001250:	f001 fddf 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001254:	200a      	movs	r0, #10
 8001256:	f001 fdf8 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 800125a:	bf00      	nop
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	40011000 	.word	0x40011000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010c00 	.word	0x40010c00
 8001274:	10110000 	.word	0x10110000

08001278 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 140;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	228c      	movs	r2, #140	; 0x8c
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f002 fa69 	bl	800378c <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fbb5 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200000c8 	.word	0x200000c8
 80012cc:	40005400 	.word	0x40005400
 80012d0:	00061a80 	.word	0x00061a80

080012d4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C2_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C2_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C2_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C2_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C2_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C2_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C2_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C2_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C2_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C2_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C2_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C2_Init+0x50>)
 8001312:	f002 fa3b 	bl	800378c <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 fb87 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000011c 	.word	0x2000011c
 8001328:	40005800 	.word	0x40005800
 800132c:	00061a80 	.word	0x00061a80

08001330 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a42      	ldr	r2, [pc, #264]	; (8001454 <HAL_I2C_MspInit+0x124>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d143      	bne.n	80013d8 <HAL_I2C_MspInit+0xa8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_I2C_MspInit+0x128>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_I2C_MspInit+0x128>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <HAL_I2C_MspInit+0x128>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001368:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4837      	ldr	r0, [pc, #220]	; (800145c <HAL_I2C_MspInit+0x12c>)
 800137e:	f002 f82d 	bl	80033dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_I2C_MspInit+0x130>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001398:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_I2C_MspInit+0x130>)
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	201f      	movs	r0, #31
 80013bc:	f001 fd29 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013c0:	201f      	movs	r0, #31
 80013c2:	f001 fd42 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2020      	movs	r0, #32
 80013cc:	f001 fd21 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f001 fd3a 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013d6:	e039      	b.n	800144c <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_I2C_MspInit+0x134>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d134      	bne.n	800144c <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_I2C_MspInit+0x128>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <HAL_I2C_MspInit+0x12c>)
 8001410:	f001 ffe4 	bl	80033dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_I2C_MspInit+0x128>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_I2C_MspInit+0x128>)
 800141a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_I2C_MspInit+0x128>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2021      	movs	r0, #33	; 0x21
 8001432:	f001 fcee 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001436:	2021      	movs	r0, #33	; 0x21
 8001438:	f001 fd07 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2022      	movs	r0, #34	; 0x22
 8001442:	f001 fce6 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001446:	2022      	movs	r0, #34	; 0x22
 8001448:	f001 fcff 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40021000 	.word	0x40021000
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40010000 	.word	0x40010000
 8001464:	40005800 	.word	0x40005800

08001468 <InputTx2Pin>:
   PB6_Set;
} //

// ТХ2 pin INPUT PA2 -> USART2
void InputTx2Pin(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

   GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147a:	2304      	movs	r3, #4
 800147c:	603b      	str	r3, [r7, #0]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <InputTx2Pin+0x3c>)
 800148c:	f001 ffa6 	bl	80033dc <HAL_GPIO_Init>
   PA2_Set;
 8001490:	2201      	movs	r2, #1
 8001492:	2104      	movs	r1, #4
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <InputTx2Pin+0x3c>)
 8001496:	f002 f925 	bl	80036e4 <HAL_GPIO_WritePin>
} //
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40010800 	.word	0x40010800

080014a8 <Fill_Cmd_freq>:

  return cksum;
}

void Fill_Cmd_freq(uint16_t freq)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	81fb      	strh	r3, [r7, #14]
	for(i = 0; i < 16; i++){command_start_freq[i] = 0x00;}
 80014b6:	2300      	movs	r3, #0
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	e006      	b.n	80014ca <Fill_Cmd_freq+0x22>
 80014bc:	89fb      	ldrh	r3, [r7, #14]
 80014be:	4a16      	ldr	r2, [pc, #88]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014c0:	2100      	movs	r1, #0
 80014c2:	54d1      	strb	r1, [r2, r3]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	3301      	adds	r3, #1
 80014c8:	81fb      	strh	r3, [r7, #14]
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d9f5      	bls.n	80014bc <Fill_Cmd_freq+0x14>
	command_start_freq[0] = TRAMP_SYNC_START;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014d2:	220f      	movs	r2, #15
 80014d4:	701a      	strb	r2, [r3, #0]
	command_start_freq[1] = 0x46;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014d8:	2246      	movs	r2, #70	; 0x46
 80014da:	705a      	strb	r2, [r3, #1]
	command_start_freq[2] = freq%256;
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014e2:	709a      	strb	r2, [r3, #2]
	command_start_freq[3] = freq/256;
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014ee:	70da      	strb	r2, [r3, #3]
	command_start_freq[14] = command_start_freq[1] + command_start_freq[2] + command_start_freq[3];
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014f2:	785a      	ldrb	r2, [r3, #1]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	4413      	add	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <Fill_Cmd_freq+0x70>)
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	4413      	add	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <Fill_Cmd_freq+0x70>)
 8001506:	739a      	strb	r2, [r3, #14]
	command_start_freq[15] = TRAMP_SYNC_STOP;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <Fill_Cmd_freq+0x70>)
 800150a:	2200      	movs	r2, #0
 800150c:	73da      	strb	r2, [r3, #15]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	2000001c 	.word	0x2000001c
 800151c:	00000000 	.word	0x00000000

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 fd0a 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 fa2a 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f7ff fdd0 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001530:	f7ff fdb0 	bl	8001094 <MX_DMA_Init>
  MX_I2C1_Init();
 8001534:	f7ff fea0 	bl	8001278 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001538:	f7ff fecc 	bl	80012d4 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800153c:	f000 fc04 	bl	8001d48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001540:	f000 fa7a 	bl	8001a38 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001544:	f7ff fce6 	bl	8000f14 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001548:	f000 fbd4 	bl	8001cf4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);	// задержка для старта USB
 800154c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001550:	f000 fd56 	bl	8002000 <HAL_Delay>

  //  HAL_ADCEx_Calibration_Start(&hadc1);
  //  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 2);
    i = 0;
 8001554:	4b94      	ldr	r3, [pc, #592]	; (80017a8 <main+0x288>)
 8001556:	2200      	movs	r2, #0
 8001558:	801a      	strh	r2, [r3, #0]
    j = 0;
 800155a:	4b94      	ldr	r3, [pc, #592]	; (80017ac <main+0x28c>)
 800155c:	2200      	movs	r2, #0
 800155e:	801a      	strh	r2, [r3, #0]
    k = 0;
 8001560:	4b93      	ldr	r3, [pc, #588]	; (80017b0 <main+0x290>)
 8001562:	2200      	movs	r2, #0
 8001564:	801a      	strh	r2, [r3, #0]
    l = 0;
 8001566:	4b93      	ldr	r3, [pc, #588]	; (80017b4 <main+0x294>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]

//    Packs[0].RX_Freq = Start_Fix_freq;

  /* Формируем таблицы частот */
    for(l = 0; l < 40; l++)
 800156c:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <main+0x294>)
 800156e:	2200      	movs	r2, #0
 8001570:	801a      	strh	r2, [r3, #0]
 8001572:	e01d      	b.n	80015b0 <main+0x90>
    {
  	  Fix_freqs[l] = freqs[l];
 8001574:	4b8f      	ldr	r3, [pc, #572]	; (80017b4 <main+0x294>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4b8e      	ldr	r3, [pc, #568]	; (80017b4 <main+0x294>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b8d      	ldr	r3, [pc, #564]	; (80017b8 <main+0x298>)
 8001582:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001586:	4b8d      	ldr	r3, [pc, #564]	; (80017bc <main+0x29c>)
 8001588:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	  Fix_Norm_freqs[l] = Norm_freqs[l];
 800158c:	4b89      	ldr	r3, [pc, #548]	; (80017b4 <main+0x294>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4b88      	ldr	r3, [pc, #544]	; (80017b4 <main+0x294>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <main+0x2a0>)
 800159a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800159e:	4b89      	ldr	r3, [pc, #548]	; (80017c4 <main+0x2a4>)
 80015a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(l = 0; l < 40; l++)
 80015a4:	4b83      	ldr	r3, [pc, #524]	; (80017b4 <main+0x294>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <main+0x294>)
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <main+0x294>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2b27      	cmp	r3, #39	; 0x27
 80015b6:	d9dd      	bls.n	8001574 <main+0x54>
    }
    for(l = 0; l < 122; l++){Full_Freqs[l] = Full_Freqs_Lst[l];}
 80015b8:	4b7e      	ldr	r3, [pc, #504]	; (80017b4 <main+0x294>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	e011      	b.n	80015e4 <main+0xc4>
 80015c0:	4b7c      	ldr	r3, [pc, #496]	; (80017b4 <main+0x294>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <main+0x294>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <main+0x2a8>)
 80015ce:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <main+0x2ac>)
 80015d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <main+0x294>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <main+0x294>)
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <main+0x294>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	2b79      	cmp	r3, #121	; 0x79
 80015ea:	d9e9      	bls.n	80015c0 <main+0xa0>

    VTX1_PWR_ON;		// Включаем передатчик
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	4877      	ldr	r0, [pc, #476]	; (80017d0 <main+0x2b0>)
 80015f2:	f002 f877 	bl	80036e4 <HAL_GPIO_WritePin>
    HAL_Delay(500);	// задержка
 80015f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fa:	f000 fd01 	bl	8002000 <HAL_Delay>

    RX5808_Init();
 80015fe:	f7ff fc43 	bl	8000e88 <RX5808_Init>

    SPI1_SS_En;
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4872      	ldr	r0, [pc, #456]	; (80017d0 <main+0x2b0>)
 8001608:	f002 f86c 	bl	80036e4 <HAL_GPIO_WritePin>
    CLK1_CNT = 0;
 800160c:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <main+0x2b4>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
 8001612:	2301      	movs	r3, #1
 8001614:	2204      	movs	r2, #4
 8001616:	4970      	ldr	r1, [pc, #448]	; (80017d8 <main+0x2b8>)
 8001618:	4870      	ldr	r0, [pc, #448]	; (80017dc <main+0x2bc>)
 800161a:	f004 fccd 	bl	8005fb8 <HAL_SPI_Transmit>
    SPI1_SS_Dis;
 800161e:	2201      	movs	r2, #1
 8001620:	2140      	movs	r1, #64	; 0x40
 8001622:	486b      	ldr	r0, [pc, #428]	; (80017d0 <main+0x2b0>)
 8001624:	f002 f85e 	bl	80036e4 <HAL_GPIO_WritePin>

    HAL_UART_MspInit(&huart2);
 8001628:	486d      	ldr	r0, [pc, #436]	; (80017e0 <main+0x2c0>)
 800162a:	f000 fbb7 	bl	8001d9c <HAL_UART_MspInit>
  //	UART_Tx2Pin();
    HAL_Delay(1);	// задержка
 800162e:	2001      	movs	r0, #1
 8001630:	f000 fce6 	bl	8002000 <HAL_Delay>
    HAL_UART_Transmit(&huart2,command_word1,16,20);
 8001634:	2314      	movs	r3, #20
 8001636:	2210      	movs	r2, #16
 8001638:	496a      	ldr	r1, [pc, #424]	; (80017e4 <main+0x2c4>)
 800163a:	4869      	ldr	r0, [pc, #420]	; (80017e0 <main+0x2c0>)
 800163c:	f004 fff2 	bl	8006624 <HAL_UART_Transmit>
    HAL_Delay(1);	// задержка
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fcdd 	bl	8002000 <HAL_Delay>
    InputTx2Pin();
 8001646:	f7ff ff0f 	bl	8001468 <InputTx2Pin>
    HAL_Delay(1);	// задержка
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fcd8 	bl	8002000 <HAL_Delay>
    HAL_UART_Receive(&huart2, receiveBuffer, 16, 30);
 8001650:	231e      	movs	r3, #30
 8001652:	2210      	movs	r2, #16
 8001654:	4964      	ldr	r1, [pc, #400]	; (80017e8 <main+0x2c8>)
 8001656:	4862      	ldr	r0, [pc, #392]	; (80017e0 <main+0x2c0>)
 8001658:	f005 f867 	bl	800672a <HAL_UART_Receive>
    HAL_Delay(50);	// задержка
 800165c:	2032      	movs	r0, #50	; 0x32
 800165e:	f000 fccf 	bl	8002000 <HAL_Delay>

    VTX1_PWR_OFF;		// Выключаем передатчик

   #endif

    HAL_ADCEx_Calibration_Start(&hadc1);
 8001662:	4862      	ldr	r0, [pc, #392]	; (80017ec <main+0x2cc>)
 8001664:	f001 fa46 	bl	8002af4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcDMA_Data, 2);
 8001668:	2202      	movs	r2, #2
 800166a:	4961      	ldr	r1, [pc, #388]	; (80017f0 <main+0x2d0>)
 800166c:	485f      	ldr	r0, [pc, #380]	; (80017ec <main+0x2cc>)
 800166e:	f000 fe79 	bl	8002364 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	I2C1_LED_Xor;
	PC13_Xor;
 8001672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001676:	485f      	ldr	r0, [pc, #380]	; (80017f4 <main+0x2d4>)
 8001678:	f002 f84c 	bl	8003714 <HAL_GPIO_TogglePin>

	mcuVoltage = ADC_MAX * ADC_REFERENCE_VOLTAGE / adcDMA_Data[0];
 800167c:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <main+0x2d0>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe feb7 	bl	80003f4 <__aeabi_i2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	a145      	add	r1, pc, #276	; (adr r1, 80017a0 <main+0x280>)
 800168c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001690:	f7ff f844 	bl	800071c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f926 	bl	80008ec <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <main+0x2d8>)
 80016a4:	6013      	str	r3, [r2, #0]
    batteryVoltage = 2 * adcDMA_Data[1] * mcuVoltage / ADC_MAX;
 80016a6:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <main+0x2d0>)
 80016a8:	885b      	ldrh	r3, [r3, #2]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa27 	bl	8000b00 <__aeabi_i2f>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <main+0x2d8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4610      	mov	r0, r2
 80016bc:	f7ff fa74 	bl	8000ba8 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	494e      	ldr	r1, [pc, #312]	; (80017fc <main+0x2dc>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fb23 	bl	8000d10 <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <main+0x2e0>)
 80016d0:	601a      	str	r2, [r3, #0]

#ifdef Line_Scan
//	if(i < 500)
	if(i < 100)
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <main+0x288>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	2b63      	cmp	r3, #99	; 0x63
 80016d8:	d85d      	bhi.n	8001796 <main+0x276>
	{
//		prog_freg(5500+1*i);       // диапазон сканирования 5500 - 6000 МГц
		prog_freg(5500+5*i);       // диапазон сканирования 5500 - 6000 МГц
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <main+0x288>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 80016ea:	331c      	adds	r3, #28
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbdf 	bl	8000eb0 <prog_freg>
		Packs[i].RX_Freq = (5500+5*i);
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <main+0x288>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <main+0x288>)
 8001700:	8812      	ldrh	r2, [r2, #0]
 8001702:	4611      	mov	r1, r2
 8001704:	f503 53ab 	add.w	r3, r3, #5472	; 0x1560
 8001708:	331c      	adds	r3, #28
 800170a:	b298      	uxth	r0, r3
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <main+0x2e4>)
 800170e:	460b      	mov	r3, r1
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	440b      	add	r3, r1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3302      	adds	r3, #2
 800171a:	4602      	mov	r2, r0
 800171c:	801a      	strh	r2, [r3, #0]
		Packs[i].SendIdx = i;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <main+0x288>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <main+0x288>)
 8001726:	8818      	ldrh	r0, [r3, #0]
 8001728:	4a36      	ldr	r2, [pc, #216]	; (8001804 <main+0x2e4>)
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3304      	adds	r3, #4
 8001736:	4602      	mov	r2, r0
 8001738:	801a      	strh	r2, [r3, #0]

		i++;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <main+0x288>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <main+0x288>)
 8001744:	801a      	strh	r2, [r3, #0]
//		prog_freg(5823);       // диапазон сканирования 5500 - 6000 МГц

		HAL_SPI_MspInit(&hspi1);
 8001746:	4825      	ldr	r0, [pc, #148]	; (80017dc <main+0x2bc>)
 8001748:	f000 f9ae 	bl	8001aa8 <HAL_SPI_MspInit>
		HAL_Delay(1);	// задержка
 800174c:	2001      	movs	r0, #1
 800174e:	f000 fc57 	bl	8002000 <HAL_Delay>

		SPI1_SS_En;
 8001752:	2200      	movs	r2, #0
 8001754:	2140      	movs	r1, #64	; 0x40
 8001756:	481e      	ldr	r0, [pc, #120]	; (80017d0 <main+0x2b0>)
 8001758:	f001 ffc4 	bl	80036e4 <HAL_GPIO_WritePin>
		CLK1_CNT = 0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <main+0x2b4>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
 8001762:	2301      	movs	r3, #1
 8001764:	2204      	movs	r2, #4
 8001766:	491c      	ldr	r1, [pc, #112]	; (80017d8 <main+0x2b8>)
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <main+0x2bc>)
 800176a:	f004 fc25 	bl	8005fb8 <HAL_SPI_Transmit>
		SPI1_SS_Dis;
 800176e:	2201      	movs	r2, #1
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	4817      	ldr	r0, [pc, #92]	; (80017d0 <main+0x2b0>)
 8001774:	f001 ffb6 	bl	80036e4 <HAL_GPIO_WritePin>

		HAL_ADC_Start_IT(&hadc1);
 8001778:	481c      	ldr	r0, [pc, #112]	; (80017ec <main+0x2cc>)
 800177a:	f000 fd3d 	bl	80021f8 <HAL_ADC_Start_IT>
		HAL_Delay(5);	// задержка
 800177e:	2005      	movs	r0, #5
 8001780:	f000 fc3e 	bl	8002000 <HAL_Delay>

//		adcData[i] = TmpADC;
//		adcData[i] = adcDMA_Data[1];
		adcData[i] = adcDMA_Data[1];	// * mcuVoltage / ADC_MAX;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <main+0x288>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <main+0x2d0>)
 800178c:	8859      	ldrh	r1, [r3, #2]
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <main+0x2e8>)
 8001790:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001794:	e0d5      	b.n	8001942 <main+0x422>
		adcData[i] = TmpADC;
	}	// scaning
#endif
	else
	{
		for(j = 0; j < i; j++)
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <main+0x28c>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
 800179c:	e08e      	b.n	80018bc <main+0x39c>
 800179e:	bf00      	nop
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40b33200 	.word	0x40b33200
 80017a8:	2000044e 	.word	0x2000044e
 80017ac:	20000450 	.word	0x20000450
 80017b0:	20000452 	.word	0x20000452
 80017b4:	20000454 	.word	0x20000454
 80017b8:	08007360 	.word	0x08007360
 80017bc:	2000056c 	.word	0x2000056c
 80017c0:	080073b0 	.word	0x080073b0
 80017c4:	200005bc 	.word	0x200005bc
 80017c8:	08007400 	.word	0x08007400
 80017cc:	2000060c 	.word	0x2000060c
 80017d0:	40010800 	.word	0x40010800
 80017d4:	2000044c 	.word	0x2000044c
 80017d8:	20000000 	.word	0x20000000
 80017dc:	2000071c 	.word	0x2000071c
 80017e0:	200007bc 	.word	0x200007bc
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000700 	.word	0x20000700
 80017ec:	20000054 	.word	0x20000054
 80017f0:	20000460 	.word	0x20000460
 80017f4:	40011000 	.word	0x40011000
 80017f8:	20000458 	.word	0x20000458
 80017fc:	457ff000 	.word	0x457ff000
 8001800:	2000045c 	.word	0x2000045c
 8001804:	20000170 	.word	0x20000170
 8001808:	20000464 	.word	0x20000464
		{
			Packs[j].RSSI = adcData[j];
 800180c:	4b4f      	ldr	r3, [pc, #316]	; (800194c <main+0x42c>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <main+0x42c>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <main+0x430>)
 800181a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800181e:	4a4d      	ldr	r2, [pc, #308]	; (8001954 <main+0x434>)
 8001820:	460b      	mov	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	4602      	mov	r2, r0
 800182c:	801a      	strh	r2, [r3, #0]
			SummRSSI += Packs[j].RSSI;
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <main+0x42c>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	4a47      	ldr	r2, [pc, #284]	; (8001954 <main+0x434>)
 8001836:	460b      	mov	r3, r1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	440b      	add	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b44      	ldr	r3, [pc, #272]	; (8001958 <main+0x438>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4413      	add	r3, r2
 800184a:	4a43      	ldr	r2, [pc, #268]	; (8001958 <main+0x438>)
 800184c:	6013      	str	r3, [r2, #0]

//			if(Packs[j].RSSI > maxRSSI + LvlRSSI)
			if(Packs[j].RSSI > AvgRSSI + LvlRSSI)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <main+0x42c>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <main+0x434>)
 8001856:	460b      	mov	r3, r1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	440b      	add	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <main+0x43c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <main+0x440>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	440b      	add	r3, r1
 8001870:	429a      	cmp	r2, r3
 8001872:	dd1d      	ble.n	80018b0 <main+0x390>
			{
				maxRSSI = Packs[j].RSSI;
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <main+0x42c>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4a36      	ldr	r2, [pc, #216]	; (8001954 <main+0x434>)
 800187c:	460b      	mov	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	440b      	add	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <main+0x444>)
 800188a:	801a      	strh	r2, [r3, #0]
				RX_Freq = Packs[j].RX_Freq;
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <main+0x42c>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	4a30      	ldr	r2, [pc, #192]	; (8001954 <main+0x434>)
 8001894:	460b      	mov	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	3302      	adds	r3, #2
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <main+0x448>)
 80018a4:	801a      	strh	r2, [r3, #0]
				Fnd_Idx = j;
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <main+0x42c>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <main+0x44c>)
 80018ae:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < i; j++)
 80018b0:	4b26      	ldr	r3, [pc, #152]	; (800194c <main+0x42c>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <main+0x42c>)
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <main+0x42c>)
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <main+0x450>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3a1      	bcc.n	800180c <main+0x2ec>
			}
		}

		AvgRSSI = SummRSSI/(i + 1);
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <main+0x438>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <main+0x450>)
 80018ce:	8812      	ldrh	r2, [r2, #0]
 80018d0:	3201      	adds	r2, #1
 80018d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <main+0x43c>)
 80018da:	801a      	strh	r2, [r3, #0]
		SummRSSI = AvgRSSI;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <main+0x43c>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <main+0x438>)
 80018e4:	601a      	str	r2, [r3, #0]
//		maxRSSI = AvgRSSI;
/*
	Тут имеем частоту RX_Freq которую надо подавить.
*/
		VTX1_PWR_ON;		// Включаем передатчик
 80018e6:	2200      	movs	r2, #0
 80018e8:	2102      	movs	r1, #2
 80018ea:	4822      	ldr	r0, [pc, #136]	; (8001974 <main+0x454>)
 80018ec:	f001 fefa 	bl	80036e4 <HAL_GPIO_WritePin>

		HAL_Delay(750);	// задержка
 80018f0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80018f4:	f000 fb84 	bl	8002000 <HAL_Delay>
			}
		}
		else k = 0;
*/

		HAL_UART_MspInit(&huart2);
 80018f8:	481f      	ldr	r0, [pc, #124]	; (8001978 <main+0x458>)
 80018fa:	f000 fa4f 	bl	8001d9c <HAL_UART_MspInit>
//		UART_Tx2Pin();
		HAL_Delay(1);	// задержка
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 fb7e 	bl	8002000 <HAL_Delay>
		InputTx2Pin();
		HAL_Delay(1);	// задержка
		HAL_UART_Receive(&huart2, receiveBuffer, 16, 30);
		HAL_Delay(10);	// задержка
*/
		HAL_UART_MspInit(&huart2);
 8001904:	481c      	ldr	r0, [pc, #112]	; (8001978 <main+0x458>)
 8001906:	f000 fa49 	bl	8001d9c <HAL_UART_MspInit>

//	    UART_Tx2Pin();
		HAL_Delay(1);	// задержка
 800190a:	2001      	movs	r0, #1
 800190c:	f000 fb78 	bl	8002000 <HAL_Delay>
//		HAL_UART_Transmit(&huart2,New_freq,16,5);

//		Fill_Cmd_freq(Fix_Norm_freqs[Fnd_Idx]);
		Fill_Cmd_freq(RX_Freq);
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <main+0x448>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fdc7 	bl	80014a8 <Fill_Cmd_freq>

		HAL_UART_Transmit(&huart2,command_start_freq,16,30);
 800191a:	231e      	movs	r3, #30
 800191c:	2210      	movs	r2, #16
 800191e:	4917      	ldr	r1, [pc, #92]	; (800197c <main+0x45c>)
 8001920:	4815      	ldr	r0, [pc, #84]	; (8001978 <main+0x458>)
 8001922:	f004 fe7f 	bl	8006624 <HAL_UART_Transmit>

// Тут влепить запуск сканера, оптрон на кнопку

//		HAL_Delay(18000);	// задержка на работу глушилки
		HAL_Delay(180);	// задержка на работу глушилки
 8001926:	20b4      	movs	r0, #180	; 0xb4
 8001928:	f000 fb6a 	bl	8002000 <HAL_Delay>
		InputTx2Pin();
		HAL_Delay(1);	// задержка
		HAL_UART_Receive(&huart2, receiveBuffer, 16, 30);
		HAL_Delay(100);	// задержка
*/
		HAL_Delay(1);	// задержка
 800192c:	2001      	movs	r0, #1
 800192e:	f000 fb67 	bl	8002000 <HAL_Delay>


		VTX1_PWR_OFF;		// Выключаем передатчик
 8001932:	2201      	movs	r2, #1
 8001934:	2102      	movs	r1, #2
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <main+0x454>)
 8001938:	f001 fed4 	bl	80036e4 <HAL_GPIO_WritePin>

		i = 0;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <main+0x450>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(25);	// задержка
 8001942:	2019      	movs	r0, #25
 8001944:	f000 fb5c 	bl	8002000 <HAL_Delay>
	PC13_Xor;
 8001948:	e693      	b.n	8001672 <main+0x152>
 800194a:	bf00      	nop
 800194c:	20000450 	.word	0x20000450
 8001950:	20000464 	.word	0x20000464
 8001954:	20000170 	.word	0x20000170
 8001958:	20000564 	.word	0x20000564
 800195c:	20000560 	.word	0x20000560
 8001960:	20000008 	.word	0x20000008
 8001964:	2000055e 	.word	0x2000055e
 8001968:	20000568 	.word	0x20000568
 800196c:	2000055c 	.word	0x2000055c
 8001970:	2000044e 	.word	0x2000044e
 8001974:	40010800 	.word	0x40010800
 8001978:	200007bc 	.word	0x200007bc
 800197c:	2000001c 	.word	0x2000001c

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	2228      	movs	r2, #40	; 0x28
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f005 fcae 	bl	80072f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	2310      	movs	r3, #16
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019c0:	2300      	movs	r3, #0
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019c4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fcf2 	bl	80053b8 <HAL_RCC_OscConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019da:	f000 f828 	bl	8001a2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	230f      	movs	r3, #15
 80019e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 ff5e 	bl	80058bc <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a06:	f000 f812 	bl	8001a2e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f8de 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a22:	f000 f804 	bl	8001a2e <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	; 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
}
 8001a34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <Error_Handler+0x8>

08001a38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a3e:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <MX_SPI1_Init+0x6c>)
 8001a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a86:	220a      	movs	r2, #10
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_SPI1_Init+0x68>)
 8001a8c:	f004 fa10 	bl	8005eb0 <HAL_SPI_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001a96:	f7ff ffca 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000071c 	.word	0x2000071c
 8001aa4:	40013000 	.word	0x40013000

08001aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_SPI_MspInit+0x80>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d12b      	bne.n	8001b20 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ace:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001af8:	23a0      	movs	r3, #160	; 0xa0
 8001afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4809      	ldr	r0, [pc, #36]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001b0c:	f001 fc66 	bl	80033dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2023      	movs	r0, #35	; 0x23
 8001b16:	f001 f97c 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b1a:	2023      	movs	r0, #35	; 0x23
 8001b1c:	f001 f995 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013000 	.word	0x40013000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6193      	str	r3, [r2, #24]
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_MspInit+0x60>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_MspInit+0x60>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bde:	f000 f9f3 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001bec:	2010      	movs	r0, #16
 8001bee:	f001 fdab 	bl	8003748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	I2C1_LED_Xor;
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <EXTI4_IRQHandler+0x3c>)
 8001bf6:	f001 fd8d 	bl	8003714 <HAL_GPIO_TogglePin>
	if(CLK1_CNT < 25 ) CLK1_CNT++;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <EXTI4_IRQHandler+0x40>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b18      	cmp	r3, #24
 8001c00:	d806      	bhi.n	8001c10 <EXTI4_IRQHandler+0x28>
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <EXTI4_IRQHandler+0x40>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <EXTI4_IRQHandler+0x40>)
 8001c0c:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_MspDeInit(&hspi1);
	OutSPI1Pin();
	SPI1_SS_Dis;
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c0e:	e006      	b.n	8001c1e <EXTI4_IRQHandler+0x36>
	OutSPI1Pin();
 8001c10:	f7ff f91a 	bl	8000e48 <OutSPI1Pin>
	SPI1_SS_Dis;
 8001c14:	2201      	movs	r2, #1
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <EXTI4_IRQHandler+0x44>)
 8001c1a:	f001 fd63 	bl	80036e4 <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	2000044c 	.word	0x2000044c
 8001c2c:	40010800 	.word	0x40010800

08001c30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <DMA1_Channel1_IRQHandler+0x10>)
 8001c36:	f001 fa91 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000084 	.word	0x20000084

08001c44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <ADC1_2_IRQHandler+0x1c>)
 8001c4a:	f000 fc75 	bl	8002538 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  TmpADC = HAL_ADC_GetValue(&hadc1);
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <ADC1_2_IRQHandler+0x1c>)
 8001c50:	f000 fc66 	bl	8002520 <HAL_ADC_GetValue>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <ADC1_2_IRQHandler+0x20>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000054 	.word	0x20000054
 8001c64:	20000558 	.word	0x20000558

08001c68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <I2C1_EV_IRQHandler+0x10>)
 8001c6e:	f001 fee5 	bl	8003a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200000c8 	.word	0x200000c8

08001c7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <I2C1_ER_IRQHandler+0x10>)
 8001c82:	f002 f82e 	bl	8003ce2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000c8 	.word	0x200000c8

08001c90 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <I2C2_EV_IRQHandler+0x10>)
 8001c96:	f001 fed1 	bl	8003a3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000011c 	.word	0x2000011c

08001ca4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <I2C2_ER_IRQHandler+0x10>)
 8001caa:	f002 f81a 	bl	8003ce2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000011c 	.word	0x2000011c

08001cb8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <SPI1_IRQHandler+0x10>)
 8001cbe:	f004 fabf 	bl	8006240 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000071c 	.word	0x2000071c

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <USART1_IRQHandler+0x10>)
 8001cd2:	f004 fdbd 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000774 	.word	0x20000774

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <USART2_IRQHandler+0x10>)
 8001ce6:	f004 fdb3 	bl	8006850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200007bc 	.word	0x200007bc

08001cf4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_USART1_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d12:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	f004 fc29 	bl	8006584 <HAL_UART_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001d38:	f7ff fe79 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000774 	.word	0x20000774
 8001d44:	40013800 	.word	0x40013800

08001d48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <MX_USART2_UART_Init+0x50>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d80:	f004 fc00 	bl	8006584 <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f7ff fe50 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200007bc 	.word	0x200007bc
 8001d98:	40004400 	.word	0x40004400

08001d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <HAL_UART_MspInit+0x130>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d146      	bne.n	8001e4a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dbc:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd4:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dec:	2340      	movs	r3, #64	; 0x40
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4835      	ldr	r0, [pc, #212]	; (8001ed4 <HAL_UART_MspInit+0x138>)
 8001e00:	f001 faec 	bl	80033dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	482f      	ldr	r0, [pc, #188]	; (8001ed4 <HAL_UART_MspInit+0x138>)
 8001e18:	f001 fae0 	bl	80033dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_UART_MspInit+0x13c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e32:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <HAL_UART_MspInit+0x13c>)
 8001e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e36:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2025      	movs	r0, #37	; 0x25
 8001e3e:	f000 ffe8 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e42:	2025      	movs	r0, #37	; 0x25
 8001e44:	f001 f801 	bl	8002e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e48:	e03c      	b.n	8001ec4 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_UART_MspInit+0x140>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d137      	bne.n	8001ec4 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5e:	61d3      	str	r3, [r2, #28]
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x134>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e84:	2304      	movs	r3, #4
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4812      	ldr	r0, [pc, #72]	; (8001ee0 <HAL_UART_MspInit+0x144>)
 8001e98:	f001 faa0 	bl	80033dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <HAL_UART_MspInit+0x144>)
 8001eb0:	f001 fa94 	bl	80033dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2026      	movs	r0, #38	; 0x26
 8001eba:	f000 ffaa 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 ffc3 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	; 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee4:	f000 f823 	bl	8001f2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eea:	490c      	ldr	r1, [pc, #48]	; (8001f1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef0:	e002      	b.n	8001ef8 <LoopCopyDataInit>

08001ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef6:	3304      	adds	r3, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001efc:	d3f9      	bcc.n	8001ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f00:	4c09      	ldr	r4, [pc, #36]	; (8001f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f04:	e001      	b.n	8001f0a <LoopFillZerobss>

08001f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f08:	3204      	adds	r2, #4

08001f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f0c:	d3fb      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f005 f9f7 	bl	8007300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f12:	f7ff fb05 	bl	8001520 <main>
  bx lr
 8001f16:	4770      	bx	lr
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001f20:	0800753c 	.word	0x0800753c
  ldr r2, =_sbss
 8001f24:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001f28:	20000808 	.word	0x20000808

08001f2c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <CAN1_RX1_IRQHandler>

08001f2e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x28>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x28>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 ff55 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fdec 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ff6d 	bl	8002e66 <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 ff35 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	2000002c 	.word	0x2000002c
 8001fc0:	20000034 	.word	0x20000034
 8001fc4:	20000030 	.word	0x20000030

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000034 	.word	0x20000034
 8001fe8:	20000804 	.word	0x20000804

08001fec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000804 	.word	0x20000804

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffe0 	bl	8001fec <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000034 	.word	0x20000034

08002048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0be      	b.n	80021e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe ff94 	bl	8000fb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fc89 	bl	80029a4 <ADC_ConversionStop_Disable>
 8002092:	4603      	mov	r3, r0
 8002094:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8099 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8095 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b4:	f023 0302 	bic.w	r3, r3, #2
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_Init+0xa2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_Init+0xa8>
 80020ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_Init+0xaa>
 80020f0:	2300      	movs	r3, #0
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7d1b      	ldrb	r3, [r3, #20]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d119      	bne.n	8002134 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7b1b      	ldrb	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	3b01      	subs	r3, #1
 800210e:	035a      	lsls	r2, r3, #13
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e00b      	b.n	8002134 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_ADC_Init+0x1a8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d003      	beq.n	800216e <HAL_ADC_Init+0x126>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	430a      	orrs	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_Init+0x1ac>)
 8002194:	4013      	ands	r3, r2
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d10b      	bne.n	80021b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f023 0312 	bic.w	r3, r3, #18
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	e007      	b.n	80021e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	ffe1f7fd 	.word	0xffe1f7fd
 80021f4:	ff1f0efe 	.word	0xff1f0efe

080021f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start_IT+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e0a0      	b.n	8002354 <HAL_ADC_Start_IT+0x15c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fb68 	bl	80028f0 <ADC_Enable>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 808f 	bne.w	800234a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_ADC_Start_IT+0x164>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d105      	bne.n	8002256 <HAL_ADC_Start_IT+0x5e>
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_ADC_Start_IT+0x168>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d026      	beq.n	80022be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002278:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002280:	e01d      	b.n	80022be <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_ADC_Start_IT+0x168>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_Start_IT+0xaa>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_ADC_Start_IT+0x164>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10d      	bne.n	80022be <HAL_ADC_Start_IT+0xc6>
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_ADC_Start_IT+0x168>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f023 0206 	bic.w	r2, r3, #6
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d6:	e002      	b.n	80022de <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0202 	mvn.w	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0220 	orr.w	r2, r2, #32
 80022fe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800230a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800230e:	d113      	bne.n	8002338 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_Start_IT+0x164>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d105      	bne.n	8002326 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_Start_IT+0x168>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	e00c      	b.n	8002352 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e003      	b.n	8002352 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40012800 	.word	0x40012800
 8002360:	40012400 	.word	0x40012400

08002364 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a64      	ldr	r2, [pc, #400]	; (800250c <HAL_ADC_Start_DMA+0x1a8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_ADC_Start_DMA+0x24>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a63      	ldr	r2, [pc, #396]	; (8002510 <HAL_ADC_Start_DMA+0x1ac>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d106      	bne.n	8002396 <HAL_ADC_Start_DMA+0x32>
 8002388:	4b60      	ldr	r3, [pc, #384]	; (800250c <HAL_ADC_Start_DMA+0x1a8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 80b3 	bne.w	80024fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_Start_DMA+0x40>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e0ae      	b.n	8002502 <HAL_ADC_Start_DMA+0x19e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa9f 	bl	80028f0 <ADC_Enable>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 809a 	bne.w	80024f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_ADC_Start_DMA+0x1ac>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d105      	bne.n	80023e8 <HAL_ADC_Start_DMA+0x84>
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_ADC_Start_DMA+0x1a8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d026      	beq.n	8002450 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002412:	e01d      	b.n	8002450 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a39      	ldr	r2, [pc, #228]	; (800250c <HAL_ADC_Start_DMA+0x1a8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_ADC_Start_DMA+0xd0>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a38      	ldr	r2, [pc, #224]	; (8002510 <HAL_ADC_Start_DMA+0x1ac>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d10d      	bne.n	8002450 <HAL_ADC_Start_DMA+0xec>
 8002434:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_ADC_Start_DMA+0x1a8>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f023 0206 	bic.w	r2, r3, #6
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
 8002468:	e002      	b.n	8002470 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a25      	ldr	r2, [pc, #148]	; (8002514 <HAL_ADC_Start_DMA+0x1b0>)
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <HAL_ADC_Start_DMA+0x1b4>)
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_ADC_Start_DMA+0x1b8>)
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0202 	mvn.w	r2, #2
 8002498:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a18      	ldr	r0, [r3, #32]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	334c      	adds	r3, #76	; 0x4c
 80024b4:	4619      	mov	r1, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f000 fd3b 	bl	8002f34 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024cc:	d108      	bne.n	80024e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024de:	e00f      	b.n	8002500 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024f0:	e006      	b.n	8002500 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024fa:	e001      	b.n	8002500 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40012400 	.word	0x40012400
 8002510:	40012800 	.word	0x40012800
 8002514:	08002a27 	.word	0x08002a27
 8002518:	08002aa3 	.word	0x08002aa3
 800251c:	08002abf 	.word	0x08002abf

08002520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03e      	beq.n	80025d8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d039      	beq.n	80025d8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002586:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258a:	d11d      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002590:	2b00      	cmp	r3, #0
 8002592:	d119      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0220 	bic.w	r2, r2, #32
 80025a2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f874 	bl	80026b6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f06f 0212 	mvn.w	r2, #18
 80025d6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d04d      	beq.n	800267e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d048      	beq.n	800267e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800260e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002612:	d012      	beq.n	800263a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800261e:	2b00      	cmp	r3, #0
 8002620:	d125      	bne.n	800266e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800262c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002630:	d11d      	bne.n	800266e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d119      	bne.n	800266e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002648:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 faee 	bl	8002c50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 020c 	mvn.w	r2, #12
 800267c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f81b 	bl	80026da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x20>
 800271c:	2302      	movs	r3, #2
 800271e:	e0dc      	b.n	80028da <HAL_ADC_ConfigChannel+0x1da>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d81c      	bhi.n	800276a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b05      	subs	r3, #5
 8002742:	221f      	movs	r2, #31
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	4019      	ands	r1, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	3b05      	subs	r3, #5
 800275c:	fa00 f203 	lsl.w	r2, r0, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	635a      	str	r2, [r3, #52]	; 0x34
 8002768:	e03c      	b.n	80027e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d81c      	bhi.n	80027ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	3b23      	subs	r3, #35	; 0x23
 8002784:	221f      	movs	r2, #31
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	4019      	ands	r1, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b23      	subs	r3, #35	; 0x23
 800279e:	fa00 f203 	lsl.w	r2, r0, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
 80027aa:	e01b      	b.n	80027e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b41      	subs	r3, #65	; 0x41
 80027be:	221f      	movs	r2, #31
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4019      	ands	r1, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3b41      	subs	r3, #65	; 0x41
 80027d8:	fa00 f203 	lsl.w	r2, r0, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d91c      	bls.n	8002826 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	3b1e      	subs	r3, #30
 80027fe:	2207      	movs	r2, #7
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	4019      	ands	r1, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6898      	ldr	r0, [r3, #8]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	3b1e      	subs	r3, #30
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]
 8002824:	e019      	b.n	800285a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	2207      	movs	r2, #7
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	4019      	ands	r1, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6898      	ldr	r0, [r3, #8]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b10      	cmp	r3, #16
 8002860:	d003      	beq.n	800286a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002866:	2b11      	cmp	r3, #17
 8002868:	d132      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d125      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d126      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002890:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d11a      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_ADC_ConfigChannel+0x1ec>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	0c9a      	lsrs	r2, r3, #18
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028b0:	e002      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x1b2>
 80028be:	e007      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40012400 	.word	0x40012400
 80028e8:	2000002c 	.word	0x2000002c
 80028ec:	431bde83 	.word	0x431bde83

080028f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d040      	beq.n	8002990 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <ADC_Enable+0xac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <ADC_Enable+0xb0>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800292c:	e002      	b.n	8002934 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f9      	bne.n	800292e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800293a:	f7ff fb57 	bl	8001fec <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002940:	e01f      	b.n	8002982 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002942:	f7ff fb53 	bl	8001fec <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d918      	bls.n	8002982 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d011      	beq.n	8002982 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e007      	b.n	8002992 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d1d8      	bne.n	8002942 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000002c 	.word	0x2000002c
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d12e      	bne.n	8002a1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ce:	f7ff fb0d 	bl	8001fec <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029d4:	e01b      	b.n	8002a0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029d6:	f7ff fb09 	bl	8001fec <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d914      	bls.n	8002a0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10d      	bne.n	8002a0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d0dc      	beq.n	80029d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d127      	bne.n	8002a90 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a5a:	d115      	bne.n	8002a88 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fe14 	bl	80026b6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a8e:	e004      	b.n	8002a9a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fe09 	bl	80026c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f043 0204 	orr.w	r2, r3, #4
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff fe01 	bl	80026ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADCEx_Calibration_Start+0x1e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e097      	b.n	8002c42 <HAL_ADCEx_Calibration_Start+0x14e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff42 	bl	80029a4 <ADC_ConversionStop_Disable>
 8002b20:	4603      	mov	r3, r0
 8002b22:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fee3 	bl	80028f0 <ADC_Enable>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 8081 	bne.w	8002c38 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b3e:	f023 0302 	bic.w	r3, r3, #2
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b4a:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <HAL_ADCEx_Calibration_Start+0x158>)
 8002b4c:	681c      	ldr	r4, [r3, #0]
 8002b4e:	2002      	movs	r0, #2
 8002b50:	f003 f8f8 	bl	8005d44 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b54:	4603      	mov	r3, r0
 8002b56:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b5a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b5c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0208 	orr.w	r2, r2, #8
 8002b7a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b7c:	f7ff fa36 	bl	8001fec <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b82:	e01b      	b.n	8002bbc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b84:	f7ff fa32 	bl	8001fec <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b0a      	cmp	r3, #10
 8002b90:	d914      	bls.n	8002bbc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	f023 0312 	bic.w	r3, r3, #18
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e042      	b.n	8002c42 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1dc      	bne.n	8002b84 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0204 	orr.w	r2, r2, #4
 8002bd8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002bda:	f7ff fa07 	bl	8001fec <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002be0:	e01b      	b.n	8002c1a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002be2:	f7ff fa03 	bl	8001fec <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b0a      	cmp	r3, #10
 8002bee:	d914      	bls.n	8002c1a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f023 0312 	bic.w	r3, r3, #18
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e013      	b.n	8002c42 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1dc      	bne.n	8002be2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f023 0303 	bic.w	r3, r3, #3
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	371c      	adds	r7, #28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000002c 	.word	0x2000002c

08002c50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
	...

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4906      	ldr	r1, [pc, #24]	; (8002cfc <__NVIC_EnableIRQ+0x34>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff90 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff2d 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff42 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff90 	bl	8002d54 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5f 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff35 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e043      	b.n	8002f1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_DMA_Init+0xa8>)
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_DMA_Init+0xac>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	009a      	lsls	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <HAL_DMA_Init+0xb0>)
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ece:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	bffdfff8 	.word	0xbffdfff8
 8002f2c:	cccccccd 	.word	0xcccccccd
 8002f30:	40020000 	.word	0x40020000

08002f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Start_IT+0x20>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e04b      	b.n	8002fec <HAL_DMA_Start_IT+0xb8>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d13a      	bne.n	8002fde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f9f8 	bl	8003382 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 020e 	orr.w	r2, r2, #14
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e00f      	b.n	8002fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 020a 	orr.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e005      	b.n	8002fea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d008      	beq.n	800301e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2204      	movs	r2, #4
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e020      	b.n	8003060 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 020e 	bic.w	r2, r2, #14
 800302c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d005      	beq.n	8003090 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	e051      	b.n	8003134 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 020e 	bic.w	r2, r2, #14
 800309e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_DMA_Abort_IT+0xd4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d029      	beq.n	800310e <HAL_DMA_Abort_IT+0xa2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_DMA_Abort_IT+0xd8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort_IT+0x9e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <HAL_DMA_Abort_IT+0xdc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01a      	beq.n	8003104 <HAL_DMA_Abort_IT+0x98>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_DMA_Abort_IT+0xe0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d012      	beq.n	80030fe <HAL_DMA_Abort_IT+0x92>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_DMA_Abort_IT+0xe4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00a      	beq.n	80030f8 <HAL_DMA_Abort_IT+0x8c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_DMA_Abort_IT+0xe8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d102      	bne.n	80030f2 <HAL_DMA_Abort_IT+0x86>
 80030ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f0:	e00e      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030f6:	e00b      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fc:	e008      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 80030fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003102:	e005      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 8003104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003108:	e002      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 800310a:	2310      	movs	r3, #16
 800310c:	e000      	b.n	8003110 <HAL_DMA_Abort_IT+0xa4>
 800310e:	2301      	movs	r3, #1
 8003110:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_DMA_Abort_IT+0xec>)
 8003112:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
    } 
  }
  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40020008 	.word	0x40020008
 8003144:	4002001c 	.word	0x4002001c
 8003148:	40020030 	.word	0x40020030
 800314c:	40020044 	.word	0x40020044
 8003150:	40020058 	.word	0x40020058
 8003154:	4002006c 	.word	0x4002006c
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	2204      	movs	r2, #4
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d04f      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0204 	bic.w	r2, r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d029      	beq.n	800320a <HAL_DMA_IRQHandler+0xae>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <HAL_DMA_IRQHandler+0xaa>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a63      	ldr	r2, [pc, #396]	; (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01a      	beq.n	8003200 <HAL_DMA_IRQHandler+0xa4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a62      	ldr	r2, [pc, #392]	; (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d012      	beq.n	80031fa <HAL_DMA_IRQHandler+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_DMA_IRQHandler+0x200>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00a      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x98>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_DMA_IRQHandler+0x204>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_DMA_IRQHandler+0x92>
 80031e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ec:	e00e      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031f2:	e00b      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031f8:	e008      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 80031fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031fe:	e005      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003204:	e002      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 8003206:	2340      	movs	r3, #64	; 0x40
 8003208:	e000      	b.n	800320c <HAL_DMA_IRQHandler+0xb0>
 800320a:	2304      	movs	r3, #4
 800320c:	4a55      	ldr	r2, [pc, #340]	; (8003364 <HAL_DMA_IRQHandler+0x208>)
 800320e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 8094 	beq.w	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003222:	e08e      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2202      	movs	r2, #2
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d056      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d051      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020a 	bic.w	r2, r2, #10
 800325a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d029      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x166>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_DMA_IRQHandler+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d022      	beq.n	80032be <HAL_DMA_IRQHandler+0x162>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a35      	ldr	r2, [pc, #212]	; (8003354 <HAL_DMA_IRQHandler+0x1f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x15c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_DMA_IRQHandler+0x1fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d012      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x156>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <HAL_DMA_IRQHandler+0x200>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x150>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_DMA_IRQHandler+0x204>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d102      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x14a>
 80032a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032a4:	e00e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032aa:	e00b      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	e008      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b6:	e005      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032bc:	e002      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032be:	2320      	movs	r3, #32
 80032c0:	e000      	b.n	80032c4 <HAL_DMA_IRQHandler+0x168>
 80032c2:	2302      	movs	r3, #2
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_DMA_IRQHandler+0x208>)
 80032c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d034      	beq.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032e0:	e02f      	b.n	8003342 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2208      	movs	r2, #8
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d023      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020e 	bic.w	r2, r2, #14
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
    }
  }
  return;
 8003342:	bf00      	nop
 8003344:	bf00      	nop
}
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40020008 	.word	0x40020008
 8003350:	4002001c 	.word	0x4002001c
 8003354:	40020030 	.word	0x40020030
 8003358:	40020044 	.word	0x40020044
 800335c:	40020058 	.word	0x40020058
 8003360:	4002006c 	.word	0x4002006c
 8003364:	40020000 	.word	0x40020000

08003368 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003376:	b2db      	uxtb	r3, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr

08003382 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d108      	bne.n	80033c2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033c0:	e007      	b.n	80033d2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033dc:	b480      	push	{r7}
 80033de:	b08b      	sub	sp, #44	; 0x2c
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	e169      	b.n	80036c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033f0:	2201      	movs	r2, #1
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 8158 	bne.w	80036be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4a9a      	ldr	r2, [pc, #616]	; (800367c <HAL_GPIO_Init+0x2a0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d05e      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003418:	4a98      	ldr	r2, [pc, #608]	; (800367c <HAL_GPIO_Init+0x2a0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d875      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800341e:	4a98      	ldr	r2, [pc, #608]	; (8003680 <HAL_GPIO_Init+0x2a4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d058      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003424:	4a96      	ldr	r2, [pc, #600]	; (8003680 <HAL_GPIO_Init+0x2a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d86f      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800342a:	4a96      	ldr	r2, [pc, #600]	; (8003684 <HAL_GPIO_Init+0x2a8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d052      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003430:	4a94      	ldr	r2, [pc, #592]	; (8003684 <HAL_GPIO_Init+0x2a8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d869      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003436:	4a94      	ldr	r2, [pc, #592]	; (8003688 <HAL_GPIO_Init+0x2ac>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d04c      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 800343c:	4a92      	ldr	r2, [pc, #584]	; (8003688 <HAL_GPIO_Init+0x2ac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d863      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003442:	4a92      	ldr	r2, [pc, #584]	; (800368c <HAL_GPIO_Init+0x2b0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d046      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
 8003448:	4a90      	ldr	r2, [pc, #576]	; (800368c <HAL_GPIO_Init+0x2b0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d85d      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 800344e:	2b12      	cmp	r3, #18
 8003450:	d82a      	bhi.n	80034a8 <HAL_GPIO_Init+0xcc>
 8003452:	2b12      	cmp	r3, #18
 8003454:	d859      	bhi.n	800350a <HAL_GPIO_Init+0x12e>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_GPIO_Init+0x80>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	080034d7 	.word	0x080034d7
 8003460:	080034b1 	.word	0x080034b1
 8003464:	080034c3 	.word	0x080034c3
 8003468:	08003505 	.word	0x08003505
 800346c:	0800350b 	.word	0x0800350b
 8003470:	0800350b 	.word	0x0800350b
 8003474:	0800350b 	.word	0x0800350b
 8003478:	0800350b 	.word	0x0800350b
 800347c:	0800350b 	.word	0x0800350b
 8003480:	0800350b 	.word	0x0800350b
 8003484:	0800350b 	.word	0x0800350b
 8003488:	0800350b 	.word	0x0800350b
 800348c:	0800350b 	.word	0x0800350b
 8003490:	0800350b 	.word	0x0800350b
 8003494:	0800350b 	.word	0x0800350b
 8003498:	0800350b 	.word	0x0800350b
 800349c:	0800350b 	.word	0x0800350b
 80034a0:	080034b9 	.word	0x080034b9
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	4a79      	ldr	r2, [pc, #484]	; (8003690 <HAL_GPIO_Init+0x2b4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ae:	e02c      	b.n	800350a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	623b      	str	r3, [r7, #32]
          break;
 80034b6:	e029      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	3304      	adds	r3, #4
 80034be:	623b      	str	r3, [r7, #32]
          break;
 80034c0:	e024      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	3308      	adds	r3, #8
 80034c8:	623b      	str	r3, [r7, #32]
          break;
 80034ca:	e01f      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	330c      	adds	r3, #12
 80034d2:	623b      	str	r3, [r7, #32]
          break;
 80034d4:	e01a      	b.n	800350c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034de:	2304      	movs	r3, #4
 80034e0:	623b      	str	r3, [r7, #32]
          break;
 80034e2:	e013      	b.n	800350c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ec:	2308      	movs	r3, #8
 80034ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	611a      	str	r2, [r3, #16]
          break;
 80034f6:	e009      	b.n	800350c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f8:	2308      	movs	r3, #8
 80034fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	615a      	str	r2, [r3, #20]
          break;
 8003502:	e003      	b.n	800350c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003504:	2300      	movs	r3, #0
 8003506:	623b      	str	r3, [r7, #32]
          break;
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x130>
          break;
 800350a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2bff      	cmp	r3, #255	; 0xff
 8003510:	d801      	bhi.n	8003516 <HAL_GPIO_Init+0x13a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	e001      	b.n	800351a <HAL_GPIO_Init+0x13e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2bff      	cmp	r3, #255	; 0xff
 8003520:	d802      	bhi.n	8003528 <HAL_GPIO_Init+0x14c>
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	e002      	b.n	800352e <HAL_GPIO_Init+0x152>
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	3b08      	subs	r3, #8
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	210f      	movs	r1, #15
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80b1 	beq.w	80036be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_GPIO_Init+0x2b8>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003574:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_GPIO_Init+0x2bc>)
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <HAL_GPIO_Init+0x2c0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_GPIO_Init+0x1ec>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_GPIO_Init+0x2c4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_GPIO_Init+0x1e8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3e      	ldr	r2, [pc, #248]	; (80036a4 <HAL_GPIO_Init+0x2c8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x1e4>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_GPIO_Init+0x2cc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_GPIO_Init+0x1e0>
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035bc:	2304      	movs	r3, #4
 80035be:	e004      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e002      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_GPIO_Init+0x1ee>
 80035c8:	2300      	movs	r3, #0
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	f002 0203 	and.w	r2, r2, #3
 80035d0:	0092      	lsls	r2, r2, #2
 80035d2:	4093      	lsls	r3, r2
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035da:	492f      	ldr	r1, [pc, #188]	; (8003698 <HAL_GPIO_Init+0x2bc>)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	492c      	ldr	r1, [pc, #176]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]
 8003600:	e006      	b.n	8003610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	43db      	mvns	r3, r3
 800360a:	4928      	ldr	r1, [pc, #160]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800360c:	4013      	ands	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	43db      	mvns	r3, r3
 8003632:	491e      	ldr	r1, [pc, #120]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003634:	4013      	ands	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4918      	ldr	r1, [pc, #96]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	43db      	mvns	r3, r3
 800365a:	4914      	ldr	r1, [pc, #80]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800365c:	4013      	ands	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d021      	beq.n	80036b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e021      	b.n	80036be <HAL_GPIO_Init+0x2e2>
 800367a:	bf00      	nop
 800367c:	10320000 	.word	0x10320000
 8003680:	10310000 	.word	0x10310000
 8003684:	10220000 	.word	0x10220000
 8003688:	10210000 	.word	0x10210000
 800368c:	10120000 	.word	0x10120000
 8003690:	10110000 	.word	0x10110000
 8003694:	40021000 	.word	0x40021000
 8003698:	40010000 	.word	0x40010000
 800369c:	40010800 	.word	0x40010800
 80036a0:	40010c00 	.word	0x40010c00
 80036a4:	40011000 	.word	0x40011000
 80036a8:	40011400 	.word	0x40011400
 80036ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_GPIO_Init+0x304>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	4909      	ldr	r1, [pc, #36]	; (80036e0 <HAL_GPIO_Init+0x304>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3301      	adds	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f47f ae8e 	bne.w	80033f0 <HAL_GPIO_Init+0x14>
  }
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	372c      	adds	r7, #44	; 0x2c
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40010400 	.word	0x40010400

080036e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
 80036f0:	4613      	mov	r3, r2
 80036f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036f4:	787b      	ldrb	r3, [r7, #1]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003700:	e003      	b.n	800370a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	041a      	lsls	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	611a      	str	r2, [r3, #16]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4013      	ands	r3, r2
 800372c:	041a      	lsls	r2, r3, #16
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43d9      	mvns	r1, r3
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	400b      	ands	r3, r1
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
	...

08003748 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f806 	bl	8003778 <HAL_GPIO_EXTI_Callback>
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40010400 	.word	0x40010400

08003778 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fdbc 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f002 f9ac 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	; (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b80      	cmp	r3, #128	; 0x80
 8003a28:	d103      	bne.n	8003a32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  }
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d003      	beq.n	8003a74 <HAL_I2C_EV_IRQHandler+0x38>
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	f040 80b1 	bne.w	8003bd6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <HAL_I2C_EV_IRQHandler+0x6e>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a94:	d003      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x62>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x66>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_I2C_EV_IRQHandler+0x68>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f000 8114 	beq.w	8003cd2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_I2C_EV_IRQHandler+0x90>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f001 fc60 	bl	8005384 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fd60 	bl	800458a <I2C_Master_SB>
 8003aca:	e083      	b.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0xac>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fdd7 	bl	8004694 <I2C_Master_ADD10>
 8003ae6:	e075      	b.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_I2C_EV_IRQHandler+0xc8>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fdf2 	bl	80046e6 <I2C_Master_ADDR>
 8003b02:	e067      	b.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d036      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1c:	f000 80db 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9d4 	bl	8003eec <I2C_MasterTransmit_TXE>
 8003b44:	e046      	b.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80c2 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80bc 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b5e:	7bbb      	ldrb	r3, [r7, #14]
 8003b60:	2b21      	cmp	r3, #33	; 0x21
 8003b62:	d103      	bne.n	8003b6c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fa5d 	bl	8004024 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b6a:	e0b4      	b.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	f040 80b1 	bne.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 facb 	bl	8004110 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7a:	e0ac      	b.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8a:	f000 80a4 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x178>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x178>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fb47 	bl	8004240 <I2C_MasterReceive_RXNE>
 8003bb2:	e00f      	b.n	8003bd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 808b 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8085 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fbf2 	bl	80043b6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd2:	e080      	b.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003bd4:	e07f      	b.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e007      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00c      	beq.n	8003c26 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 ffb8 	bl	8004b94 <I2C_Slave_ADDR>
 8003c24:	e05a      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0x206>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fff2 	bl	8004c24 <I2C_Slave_STOPF>
 8003c40:	e04c      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	2b21      	cmp	r3, #33	; 0x21
 8003c46:	d002      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0x212>
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	2b29      	cmp	r3, #41	; 0x29
 8003c4c:	d120      	bne.n	8003c90 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x238>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x238>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fed5 	bl	8004a1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c72:	e032      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02d      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0x29e>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d028      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 ff04 	bl	8004a96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c8e:	e024      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 ff11 	bl	8004ad6 <I2C_SlaveReceive_RXNE>
 8003cb4:	e012      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00d      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 ff41 	bl	8004b52 <I2C_SlaveReceive_BTF>
 8003cd0:	e004      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_I2C_ER_IRQHandler+0x5a>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d2a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0x80>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f043 0302 	orr.w	r3, r3, #2
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03e      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x108>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d039      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003d76:	7efb      	ldrb	r3, [r7, #27]
 8003d78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d90:	7ebb      	ldrb	r3, [r7, #26]
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d112      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xda>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xda>
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b21      	cmp	r3, #33	; 0x21
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b29      	cmp	r3, #41	; 0x29
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_ER_IRQHandler+0xd2>
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d106      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	d103      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 f865 	bl	8004e84 <I2C_Slave_AF>
 8003dba:	e016      	b.n	8003dea <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dce:	7efb      	ldrb	r3, [r7, #27]
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d002      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0xf8>
 8003dd4:	7efb      	ldrb	r3, [r7, #27]
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x12e>
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f043 0308 	orr.w	r3, r3, #8
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e0e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 f8a2 	bl	8004f6c <I2C_ITError>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
 8003e84:	4613      	mov	r3, r2
 8003e86:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d150      	bne.n	8003fb4 <I2C_MasterTransmit_TXE+0xc8>
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d14d      	bne.n	8003fb4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d01d      	beq.n	8003f5a <I2C_MasterTransmit_TXE+0x6e>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d01a      	beq.n	8003f5a <I2C_MasterTransmit_TXE+0x6e>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f2a:	d016      	beq.n	8003f5a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f3a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2211      	movs	r2, #17
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff6c 	bl	8003e30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f58:	e060      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f68:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f78:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d107      	bne.n	8003fa4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ff81 	bl	8003ea4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa2:	e03b      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff3f 	bl	8003e30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fb2:	e033      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b21      	cmp	r3, #33	; 0x21
 8003fb8:	d005      	beq.n	8003fc6 <I2C_MasterTransmit_TXE+0xda>
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d12d      	bne.n	800401c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b22      	cmp	r3, #34	; 0x22
 8003fc4:	d12a      	bne.n	800401c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d108      	bne.n	8003fe2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fde:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fe0:	e01c      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d103      	bne.n	8003ff6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f88e 	bl	8004110 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ff4:	e012      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800401a:	e7ff      	b.n	800401c <I2C_MasterTransmit_TXE+0x130>
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b21      	cmp	r3, #33	; 0x21
 800403c:	d164      	bne.n	8004108 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800406c:	e04c      	b.n	8004108 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d01d      	beq.n	80040b0 <I2C_MasterTransmit_BTF+0x8c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b20      	cmp	r3, #32
 8004078:	d01a      	beq.n	80040b0 <I2C_MasterTransmit_BTF+0x8c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004080:	d016      	beq.n	80040b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004090:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2211      	movs	r2, #17
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fec1 	bl	8003e30 <HAL_I2C_MasterTxCpltCallback>
}
 80040ae:	e02b      	b.n	8004108 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d107      	bne.n	80040fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fed6 	bl	8003ea4 <HAL_I2C_MemTxCpltCallback>
}
 80040f8:	e006      	b.n	8004108 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fe94 	bl	8003e30 <HAL_I2C_MasterTxCpltCallback>
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11d      	bne.n	8004164 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10b      	bne.n	8004148 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004134:	b2da      	uxtb	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004146:	e077      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414c:	b29b      	uxth	r3, r3
 800414e:	121b      	asrs	r3, r3, #8
 8004150:	b2da      	uxtb	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004162:	e069      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10b      	bne.n	8004184 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	b2da      	uxtb	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004182:	e059      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	2b02      	cmp	r3, #2
 800418a:	d152      	bne.n	8004232 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d10d      	bne.n	80041ae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ac:	e044      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b21      	cmp	r3, #33	; 0x21
 80041bc:	d112      	bne.n	80041e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041e2:	e029      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d124      	bne.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d121      	bne.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004202:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff fe3a 	bl	8003ea4 <HAL_I2C_MemTxCpltCallback>
}
 8004230:	e002      	b.n	8004238 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fbee 	bl	8003a14 <I2C_Flush_DR>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b22      	cmp	r3, #34	; 0x22
 8004252:	f040 80ac 	bne.w	80043ae <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d921      	bls.n	80042a8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b03      	cmp	r3, #3
 8004292:	f040 808c 	bne.w	80043ae <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80042a6:	e082      	b.n	80043ae <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d075      	beq.n	800439c <I2C_MasterReceive_RXNE+0x15c>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d002      	beq.n	80042bc <I2C_MasterReceive_RXNE+0x7c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d16f      	bne.n	800439c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f001 f82f 	bl	8005320 <I2C_WaitOnSTOPRequestThroughIT>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d142      	bne.n	800434e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d10a      	bne.n	8004338 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fdc0 	bl	8003eb6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004336:	e03a      	b.n	80043ae <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2212      	movs	r2, #18
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fd7b 	bl	8003e42 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800434c:	e02f      	b.n	80043ae <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800435c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fd97 	bl	8003ec8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800439a:	e008      	b.n	80043ae <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043aa:	605a      	str	r2, [r3, #4]
}
 80043ac:	e7ff      	b.n	80043ae <I2C_MasterReceive_RXNE+0x16e>
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d11b      	bne.n	8004406 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004404:	e0bd      	b.n	8004582 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b03      	cmp	r3, #3
 800440e:	d129      	bne.n	8004464 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00a      	beq.n	800443c <I2C_MasterReceive_BTF+0x86>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d007      	beq.n	800443c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004462:	e08e      	b.n	8004582 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d176      	bne.n	800455c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d002      	beq.n	800447a <I2C_MasterReceive_BTF+0xc4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d108      	bne.n	800448c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e019      	b.n	80044c0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b04      	cmp	r3, #4
 8004490:	d002      	beq.n	8004498 <I2C_MasterReceive_BTF+0xe2>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d108      	bne.n	80044aa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e00a      	b.n	80044c0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d007      	beq.n	80044c0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800451a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d10a      	bne.n	8004546 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fcb9 	bl	8003eb6 <HAL_I2C_MemRxCpltCallback>
}
 8004544:	e01d      	b.n	8004582 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2212      	movs	r2, #18
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fc74 	bl	8003e42 <HAL_I2C_MasterRxCpltCallback>
}
 800455a:	e012      	b.n	8004582 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d117      	bne.n	80045ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80045b8:	e067      	b.n	800468a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	611a      	str	r2, [r3, #16]
}
 80045cc:	e05d      	b.n	800468a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d6:	d133      	bne.n	8004640 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b21      	cmp	r3, #33	; 0x21
 80045e2:	d109      	bne.n	80045f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e008      	b.n	800460a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <I2C_Master_SB+0x92>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d108      	bne.n	800462e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <I2C_Master_SB+0x100>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02d      	beq.n	800468a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463c:	605a      	str	r2, [r3, #4]
}
 800463e:	e024      	b.n	800468a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10e      	bne.n	8004666 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	b29b      	uxth	r3, r3
 800464e:	11db      	asrs	r3, r3, #7
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0306 	and.w	r3, r3, #6
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f063 030f 	orn	r3, r3, #15
 800465c:	b2da      	uxtb	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]
}
 8004664:	e011      	b.n	800468a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10d      	bne.n	800468a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	b29b      	uxth	r3, r3
 8004674:	11db      	asrs	r3, r3, #7
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0306 	and.w	r3, r3, #6
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f063 030e 	orn	r3, r3, #14
 8004682:	b2da      	uxtb	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <I2C_Master_ADD10+0x26>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d108      	bne.n	80046cc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <I2C_Master_ADD10+0x48>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046da:	605a      	str	r2, [r3, #4]
  }
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b091      	sub	sp, #68	; 0x44
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b22      	cmp	r3, #34	; 0x22
 800470e:	f040 8174 	bne.w	80049fa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <I2C_Master_ADDR+0x54>
 800471a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d10b      	bne.n	800473a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	e16b      	b.n	8004a12 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	2b00      	cmp	r3, #0
 8004740:	d11d      	bne.n	800477e <I2C_Master_ADDR+0x98>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800474a:	d118      	bne.n	800477e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
 800477c:	e149      	b.n	8004a12 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d113      	bne.n	80047b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e120      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	f040 808a 	bne.w	80048d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047c2:	d137      	bne.n	8004834 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e2:	d113      	bne.n	800480c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f4:	2300      	movs	r3, #0
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	e0f2      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480c:	2300      	movs	r3, #0
 800480e:	623b      	str	r3, [r7, #32]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e0de      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	2b08      	cmp	r3, #8
 8004838:	d02e      	beq.n	8004898 <I2C_Master_ADDR+0x1b2>
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	2b20      	cmp	r3, #32
 800483e:	d02b      	beq.n	8004898 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	2b12      	cmp	r3, #18
 8004844:	d102      	bne.n	800484c <I2C_Master_ADDR+0x166>
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d125      	bne.n	8004898 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	2b04      	cmp	r3, #4
 8004850:	d00e      	beq.n	8004870 <I2C_Master_ADDR+0x18a>
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b02      	cmp	r3, #2
 8004856:	d00b      	beq.n	8004870 <I2C_Master_ADDR+0x18a>
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b10      	cmp	r3, #16
 800485c:	d008      	beq.n	8004870 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e007      	b.n	8004880 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	e0ac      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e090      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d158      	bne.n	800498c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d021      	beq.n	8004924 <I2C_Master_ADDR+0x23e>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d01e      	beq.n	8004924 <I2C_Master_ADDR+0x23e>
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d01b      	beq.n	8004924 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e012      	b.n	800494a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004932:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004958:	d14b      	bne.n	80049f2 <I2C_Master_ADDR+0x30c>
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004960:	d00b      	beq.n	800497a <I2C_Master_ADDR+0x294>
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b01      	cmp	r3, #1
 8004966:	d008      	beq.n	800497a <I2C_Master_ADDR+0x294>
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	2b08      	cmp	r3, #8
 800496c:	d005      	beq.n	800497a <I2C_Master_ADDR+0x294>
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	2b10      	cmp	r3, #16
 8004972:	d002      	beq.n	800497a <I2C_Master_ADDR+0x294>
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	2b20      	cmp	r3, #32
 8004978:	d13b      	bne.n	80049f2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e032      	b.n	80049f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800499a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d117      	bne.n	80049dc <I2C_Master_ADDR+0x2f6>
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b2:	d00b      	beq.n	80049cc <I2C_Master_ADDR+0x2e6>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d008      	beq.n	80049cc <I2C_Master_ADDR+0x2e6>
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d005      	beq.n	80049cc <I2C_Master_ADDR+0x2e6>
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d002      	beq.n	80049cc <I2C_Master_ADDR+0x2e6>
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d107      	bne.n	80049dc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049f8:	e00b      	b.n	8004a12 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
}
 8004a10:	e7ff      	b.n	8004a12 <I2C_Master_ADDR+0x32c>
 8004a12:	bf00      	nop
 8004a14:	3744      	adds	r7, #68	; 0x44
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02b      	beq.n	8004a8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d114      	bne.n	8004a8e <I2C_SlaveTransmit_TXE+0x72>
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b29      	cmp	r3, #41	; 0x29
 8004a68:	d111      	bne.n	8004a8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2221      	movs	r2, #33	; 0x21
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2228      	movs	r2, #40	; 0x28
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff f9e3 	bl	8003e54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d011      	beq.n	8004acc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02c      	beq.n	8004b4a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d114      	bne.n	8004b4a <I2C_SlaveReceive_RXNE+0x74>
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b2a      	cmp	r3, #42	; 0x2a
 8004b24:	d111      	bne.n	8004b4a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2222      	movs	r2, #34	; 0x22
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2228      	movs	r2, #40	; 0x28
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff f98e 	bl	8003e66 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d012      	beq.n	8004b8a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bae:	2b28      	cmp	r3, #40	; 0x28
 8004bb0:	d125      	bne.n	8004bfe <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	81bb      	strh	r3, [r7, #12]
 8004be0:	e002      	b.n	8004be8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bf0:	89ba      	ldrh	r2, [r7, #12]
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff f93e 	bl	8003e78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bfc:	e00e      	b.n	8004c1c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c42:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c80:	d172      	bne.n	8004d68 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b22      	cmp	r3, #34	; 0x22
 8004c86:	d002      	beq.n	8004c8e <I2C_Slave_STOPF+0x6a>
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8c:	d135      	bne.n	8004cfa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f043 0204 	orr.w	r2, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe fb4e 	bl	8003368 <HAL_DMA_GetState>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d049      	beq.n	8004d66 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	4a69      	ldr	r2, [pc, #420]	; (8004e7c <I2C_Slave_STOPF+0x258>)
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe f9c4 	bl	800306c <HAL_DMA_Abort_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d03d      	beq.n	8004d66 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf8:	e035      	b.n	8004d66 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fb18 	bl	8003368 <HAL_DMA_GetState>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d014      	beq.n	8004d68 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	4a4e      	ldr	r2, [pc, #312]	; (8004e7c <I2C_Slave_STOPF+0x258>)
 8004d44:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe f98e 	bl	800306c <HAL_DMA_Abort_IT>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d60:	4610      	mov	r0, r2
 8004d62:	4798      	blx	r3
 8004d64:	e000      	b.n	8004d68 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d66:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d03e      	beq.n	8004df0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d112      	bne.n	8004da6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d112      	bne.n	8004dda <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0204 	orr.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8b7 	bl	8004f6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004dfe:	e039      	b.n	8004e74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	2b2a      	cmp	r3, #42	; 0x2a
 8004e04:	d109      	bne.n	8004e1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2228      	movs	r2, #40	; 0x28
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff f826 	bl	8003e66 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b28      	cmp	r3, #40	; 0x28
 8004e24:	d111      	bne.n	8004e4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <I2C_Slave_STOPF+0x25c>)
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff f825 	bl	8003e92 <HAL_I2C_ListenCpltCallback>
}
 8004e48:	e014      	b.n	8004e74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	2b22      	cmp	r3, #34	; 0x22
 8004e50:	d002      	beq.n	8004e58 <I2C_Slave_STOPF+0x234>
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b22      	cmp	r3, #34	; 0x22
 8004e56:	d10d      	bne.n	8004e74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fe fff9 	bl	8003e66 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	080051d1 	.word	0x080051d1
 8004e80:	ffff0000 	.word	0xffff0000

08004e84 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d002      	beq.n	8004ea6 <I2C_Slave_AF+0x22>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d129      	bne.n	8004efa <I2C_Slave_AF+0x76>
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	2b28      	cmp	r3, #40	; 0x28
 8004eaa:	d126      	bne.n	8004efa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2e      	ldr	r2, [pc, #184]	; (8004f68 <I2C_Slave_AF+0xe4>)
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ec0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fe ffcd 	bl	8003e92 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ef8:	e031      	b.n	8004f5e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b21      	cmp	r3, #33	; 0x21
 8004efe:	d129      	bne.n	8004f54 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <I2C_Slave_AF+0xe4>)
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2221      	movs	r2, #33	; 0x21
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f2a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f34:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fe fd64 	bl	8003a14 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fe ff81 	bl	8003e54 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f52:	e004      	b.n	8004f5e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f5c:	615a      	str	r2, [r3, #20]
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	ffff0000 	.word	0xffff0000

08004f6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d002      	beq.n	8004f90 <I2C_ITError+0x24>
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d10a      	bne.n	8004fa6 <I2C_ITError+0x3a>
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b22      	cmp	r3, #34	; 0x22
 8004f94:	d107      	bne.n	8004fa6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fac:	2b28      	cmp	r3, #40	; 0x28
 8004fae:	d107      	bne.n	8004fc0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2228      	movs	r2, #40	; 0x28
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fbe:	e015      	b.n	8004fec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d00a      	beq.n	8004fe6 <I2C_ITError+0x7a>
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b60      	cmp	r3, #96	; 0x60
 8004fd4:	d007      	beq.n	8004fe6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffa:	d162      	bne.n	80050c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d020      	beq.n	800505c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <I2C_ITError+0x25c>)
 8005020:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe f820 	bl	800306c <HAL_DMA_Abort_IT>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8089 	beq.w	8005146 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
 800505a:	e074      	b.n	8005146 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	4a59      	ldr	r2, [pc, #356]	; (80051c8 <I2C_ITError+0x25c>)
 8005062:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	4618      	mov	r0, r3
 800506a:	f7fd ffff 	bl	800306c <HAL_DMA_Abort_IT>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d068      	beq.n	8005146 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d10b      	bne.n	800509a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050bc:	4610      	mov	r0, r2
 80050be:	4798      	blx	r3
 80050c0:	e041      	b.n	8005146 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b60      	cmp	r3, #96	; 0x60
 80050cc:	d125      	bne.n	800511a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10b      	bne.n	8005102 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fe fee1 	bl	8003eda <HAL_I2C_AbortCpltCallback>
 8005118:	e015      	b.n	8005146 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d10b      	bne.n	8005140 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fe fec1 	bl	8003ec8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10e      	bne.n	8005174 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d113      	bne.n	80051c0 <I2C_ITError+0x254>
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b28      	cmp	r3, #40	; 0x28
 800519c:	d110      	bne.n	80051c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <I2C_ITError+0x260>)
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe fe69 	bl	8003e92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	080051d1 	.word	0x080051d1
 80051cc:	ffff0000 	.word	0xffff0000

080051d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051ea:	4b4b      	ldr	r3, [pc, #300]	; (8005318 <I2C_DMAAbort+0x148>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	08db      	lsrs	r3, r3, #3
 80051f0:	4a4a      	ldr	r2, [pc, #296]	; (800531c <I2C_DMAAbort+0x14c>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	0a1a      	lsrs	r2, r3, #8
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00da      	lsls	r2, r3, #3
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005216:	e00a      	b.n	800522e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3b01      	subs	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800522c:	d0ea      	beq.n	8005204 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	2200      	movs	r2, #0
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	2200      	movs	r2, #0
 800524c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	2200      	movs	r2, #0
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	2200      	movs	r2, #0
 8005282:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0201 	bic.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d10e      	bne.n	80052be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2200      	movs	r2, #0
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7fe fe0f 	bl	8003eda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052bc:	e027      	b.n	800530e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052c4:	2b28      	cmp	r3, #40	; 0x28
 80052c6:	d117      	bne.n	80052f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2228      	movs	r2, #40	; 0x28
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052f6:	e007      	b.n	8005308 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005308:	6978      	ldr	r0, [r7, #20]
 800530a:	f7fe fddd 	bl	8003ec8 <HAL_I2C_ErrorCallback>
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000002c 	.word	0x2000002c
 800531c:	14f8b589 	.word	0x14f8b589

08005320 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	08db      	lsrs	r3, r3, #3
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	0a1a      	lsrs	r2, r3, #8
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e008      	b.n	8005370 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d0e9      	beq.n	8005342 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	2000002c 	.word	0x2000002c
 8005380:	14f8b589 	.word	0x14f8b589

08005384 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005394:	d103      	bne.n	800539e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800539c:	e007      	b.n	80053ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053a6:	d102      	bne.n	80053ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2208      	movs	r2, #8
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e272      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8087 	beq.w	80054e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053d8:	4b92      	ldr	r3, [pc, #584]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d00c      	beq.n	80053fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053e4:	4b8f      	ldr	r3, [pc, #572]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d112      	bne.n	8005416 <HAL_RCC_OscConfig+0x5e>
 80053f0:	4b8c      	ldr	r3, [pc, #560]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d10b      	bne.n	8005416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fe:	4b89      	ldr	r3, [pc, #548]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d06c      	beq.n	80054e4 <HAL_RCC_OscConfig+0x12c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d168      	bne.n	80054e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e24c      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541e:	d106      	bne.n	800542e <HAL_RCC_OscConfig+0x76>
 8005420:	4b80      	ldr	r3, [pc, #512]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a7f      	ldr	r2, [pc, #508]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e02e      	b.n	800548c <HAL_RCC_OscConfig+0xd4>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10c      	bne.n	8005450 <HAL_RCC_OscConfig+0x98>
 8005436:	4b7b      	ldr	r3, [pc, #492]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7a      	ldr	r2, [pc, #488]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800543c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	4b78      	ldr	r3, [pc, #480]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a77      	ldr	r2, [pc, #476]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e01d      	b.n	800548c <HAL_RCC_OscConfig+0xd4>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0xbc>
 800545a:	4b72      	ldr	r3, [pc, #456]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a71      	ldr	r2, [pc, #452]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6e      	ldr	r2, [pc, #440]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0xd4>
 8005474:	4b6b      	ldr	r3, [pc, #428]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a6a      	ldr	r2, [pc, #424]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b68      	ldr	r3, [pc, #416]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a67      	ldr	r2, [pc, #412]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fc fdaa 	bl	8001fec <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800549c:	f7fc fda6 	bl	8001fec <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e200      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0xe4>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fc fd96 	bl	8001fec <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fc fd92 	bl	8001fec <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e1ec      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	4b53      	ldr	r3, [pc, #332]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x10c>
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d063      	beq.n	80055ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054f2:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054fe:	4b49      	ldr	r3, [pc, #292]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 030c 	and.w	r3, r3, #12
 8005506:	2b08      	cmp	r3, #8
 8005508:	d11c      	bne.n	8005544 <HAL_RCC_OscConfig+0x18c>
 800550a:	4b46      	ldr	r3, [pc, #280]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d116      	bne.n	8005544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	4b43      	ldr	r3, [pc, #268]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_RCC_OscConfig+0x176>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e1c0      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552e:	4b3d      	ldr	r3, [pc, #244]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4939      	ldr	r1, [pc, #228]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	e03a      	b.n	80055ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <HAL_RCC_OscConfig+0x270>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005552:	f7fc fd4b 	bl	8001fec <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555a:	f7fc fd47 	bl	8001fec <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1a1      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005578:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4927      	ldr	r1, [pc, #156]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	e015      	b.n	80055ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558e:	4b26      	ldr	r3, [pc, #152]	; (8005628 <HAL_RCC_OscConfig+0x270>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fc fd2a 	bl	8001fec <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559c:	f7fc fd26 	bl	8001fec <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e180      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d03a      	beq.n	800563c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d019      	beq.n	8005602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <HAL_RCC_OscConfig+0x274>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d4:	f7fc fd0a 	bl	8001fec <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055dc:	f7fc fd06 	bl	8001fec <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e160      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055fa:	2001      	movs	r0, #1
 80055fc:	f000 face 	bl	8005b9c <RCC_Delay>
 8005600:	e01c      	b.n	800563c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_RCC_OscConfig+0x274>)
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005608:	f7fc fcf0 	bl	8001fec <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560e:	e00f      	b.n	8005630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005610:	f7fc fcec 	bl	8001fec <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d908      	bls.n	8005630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e146      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	42420000 	.word	0x42420000
 800562c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005630:	4b92      	ldr	r3, [pc, #584]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e9      	bne.n	8005610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80a6 	beq.w	8005796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564e:	4b8b      	ldr	r3, [pc, #556]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565a:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4a87      	ldr	r2, [pc, #540]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	61d3      	str	r3, [r2, #28]
 8005666:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b82      	ldr	r3, [pc, #520]	; (8005880 <HAL_RCC_OscConfig+0x4c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d118      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005682:	4b7f      	ldr	r3, [pc, #508]	; (8005880 <HAL_RCC_OscConfig+0x4c8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7e      	ldr	r2, [pc, #504]	; (8005880 <HAL_RCC_OscConfig+0x4c8>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fc fcad 	bl	8001fec <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fc fca9 	bl	8001fec <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b64      	cmp	r3, #100	; 0x64
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e103      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	4b75      	ldr	r3, [pc, #468]	; (8005880 <HAL_RCC_OscConfig+0x4c8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x312>
 80056bc:	4b6f      	ldr	r3, [pc, #444]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4a6e      	ldr	r2, [pc, #440]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6213      	str	r3, [r2, #32]
 80056c8:	e02d      	b.n	8005726 <HAL_RCC_OscConfig+0x36e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x334>
 80056d2:	4b6a      	ldr	r3, [pc, #424]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4a69      	ldr	r2, [pc, #420]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	6213      	str	r3, [r2, #32]
 80056de:	4b67      	ldr	r3, [pc, #412]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	4a66      	ldr	r2, [pc, #408]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	f023 0304 	bic.w	r3, r3, #4
 80056e8:	6213      	str	r3, [r2, #32]
 80056ea:	e01c      	b.n	8005726 <HAL_RCC_OscConfig+0x36e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b05      	cmp	r3, #5
 80056f2:	d10c      	bne.n	800570e <HAL_RCC_OscConfig+0x356>
 80056f4:	4b61      	ldr	r3, [pc, #388]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	4a60      	ldr	r2, [pc, #384]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	6213      	str	r3, [r2, #32]
 8005700:	4b5e      	ldr	r3, [pc, #376]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	4a5d      	ldr	r2, [pc, #372]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6213      	str	r3, [r2, #32]
 800570c:	e00b      	b.n	8005726 <HAL_RCC_OscConfig+0x36e>
 800570e:	4b5b      	ldr	r3, [pc, #364]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4a5a      	ldr	r2, [pc, #360]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	6213      	str	r3, [r2, #32]
 800571a:	4b58      	ldr	r3, [pc, #352]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	4a57      	ldr	r2, [pc, #348]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d015      	beq.n	800575a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572e:	f7fc fc5d 	bl	8001fec <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fc fc59 	bl	8001fec <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e0b1      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	4b4b      	ldr	r3, [pc, #300]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ee      	beq.n	8005736 <HAL_RCC_OscConfig+0x37e>
 8005758:	e014      	b.n	8005784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575a:	f7fc fc47 	bl	8001fec <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005762:	f7fc fc43 	bl	8001fec <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e09b      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ee      	bne.n	8005762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d105      	bne.n	8005796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578a:	4b3c      	ldr	r3, [pc, #240]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	4a3b      	ldr	r2, [pc, #236]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8087 	beq.w	80058ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a0:	4b36      	ldr	r3, [pc, #216]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d061      	beq.n	8005870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d146      	bne.n	8005842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b4:	4b33      	ldr	r3, [pc, #204]	; (8005884 <HAL_RCC_OscConfig+0x4cc>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ba:	f7fc fc17 	bl	8001fec <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fc fc13 	bl	8001fec <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e06d      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d4:	4b29      	ldr	r3, [pc, #164]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d108      	bne.n	80057fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057ea:	4b24      	ldr	r3, [pc, #144]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4921      	ldr	r1, [pc, #132]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fc:	4b1f      	ldr	r3, [pc, #124]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a19      	ldr	r1, [r3, #32]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	430b      	orrs	r3, r1
 800580e:	491b      	ldr	r1, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <HAL_RCC_OscConfig+0x4cc>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fc fbe7 	bl	8001fec <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005822:	f7fc fbe3 	bl	8001fec <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e03d      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005834:	4b11      	ldr	r3, [pc, #68]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x46a>
 8005840:	e035      	b.n	80058ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005842:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCC_OscConfig+0x4cc>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fc fbd0 	bl	8001fec <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005850:	f7fc fbcc 	bl	8001fec <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e026      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <HAL_RCC_OscConfig+0x4c4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x498>
 800586e:	e01e      	b.n	80058ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d107      	bne.n	8005888 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e019      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
 800587c:	40021000 	.word	0x40021000
 8005880:	40007000 	.word	0x40007000
 8005884:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_OscConfig+0x500>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	429a      	cmp	r2, r3
 800589a:	d106      	bne.n	80058aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d001      	beq.n	80058ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40021000 	.word	0x40021000

080058bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0d0      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b6a      	ldr	r3, [pc, #424]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d910      	bls.n	8005900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b67      	ldr	r3, [pc, #412]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 0207 	bic.w	r2, r3, #7
 80058e6:	4965      	ldr	r1, [pc, #404]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0b8      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d020      	beq.n	800594e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005918:	4b59      	ldr	r3, [pc, #356]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005922:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a52      	ldr	r2, [pc, #328]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005936:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800593a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	494d      	ldr	r1, [pc, #308]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d040      	beq.n	80059dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d107      	bne.n	8005972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005962:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d115      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e07f      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597a:	4b41      	ldr	r3, [pc, #260]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e073      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598a:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06b      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4936      	ldr	r1, [pc, #216]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fc fb1e 	bl	8001fec <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fc fb1a 	bl	8001fec <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e053      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059dc:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d210      	bcs.n	8005a0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 0207 	bic.w	r2, r3, #7
 80059f2:	4922      	ldr	r1, [pc, #136]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b20      	ldr	r3, [pc, #128]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e032      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a18:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4916      	ldr	r1, [pc, #88]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a36:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	490e      	ldr	r1, [pc, #56]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a4a:	f000 f821 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	490a      	ldr	r1, [pc, #40]	; (8005a84 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5c:	5ccb      	ldrb	r3, [r1, r3]
 8005a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <HAL_RCC_ClockConfig+0x1cc>)
 8005a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCC_ClockConfig+0x1d0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc fa7c 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40022000 	.word	0x40022000
 8005a80:	40021000 	.word	0x40021000
 8005a84:	080074f4 	.word	0x080074f4
 8005a88:	2000002c 	.word	0x2000002c
 8005a8c:	20000030 	.word	0x20000030

08005a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005aaa:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x36>
 8005abe:	e027      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ac2:	613b      	str	r3, [r7, #16]
      break;
 8005ac4:	e027      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	0c9b      	lsrs	r3, r3, #18
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ad0:	5cd3      	ldrb	r3, [r2, r3]
 8005ad2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d010      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	0c5b      	lsrs	r3, r3, #17
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005aea:	5cd3      	ldrb	r3, [r2, r3]
 8005aec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005af2:	fb03 f202 	mul.w	r2, r3, r2
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e004      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	613b      	str	r3, [r7, #16]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b12:	613b      	str	r3, [r7, #16]
      break;
 8005b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b16:	693b      	ldr	r3, [r7, #16]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40021000 	.word	0x40021000
 8005b28:	007a1200 	.word	0x007a1200
 8005b2c:	0800750c 	.word	0x0800750c
 8005b30:	0800751c 	.word	0x0800751c
 8005b34:	003d0900 	.word	0x003d0900

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	2000002c 	.word	0x2000002c

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff2 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	08007504 	.word	0x08007504

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffde 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	0adb      	lsrs	r3, r3, #11
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	08007504 	.word	0x08007504

08005b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <RCC_Delay+0x34>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <RCC_Delay+0x38>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bb8:	bf00      	nop
  }
  while (Delay --);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f9      	bne.n	8005bb8 <RCC_Delay+0x1c>
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	2000002c 	.word	0x2000002c
 8005bd4:	10624dd3 	.word	0x10624dd3

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d07d      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf8:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c04:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4a4b      	ldr	r2, [pc, #300]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	61d3      	str	r3, [r2, #28]
 8005c10:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	4b46      	ldr	r3, [pc, #280]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d118      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2c:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a42      	ldr	r2, [pc, #264]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c38:	f7fc f9d8 	bl	8001fec <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	e008      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fc f9d4 	bl	8001fec <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e06d      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d02e      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d027      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c92:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fc f9a3 	bl	8001fec <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fc f99f 	bl	8001fec <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e036      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ee      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4917      	ldr	r1, [pc, #92]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce4:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	490b      	ldr	r1, [pc, #44]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	4904      	ldr	r1, [pc, #16]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42420440 	.word	0x42420440

08005d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	f200 808a 	bhi.w	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d045      	beq.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d075      	beq.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005d7a:	e082      	b.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005d7c:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d82:	4b45      	ldr	r3, [pc, #276]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d07b      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0c9b      	lsrs	r3, r3, #18
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	4a41      	ldr	r2, [pc, #260]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005d98:	5cd3      	ldrb	r3, [r2, r3]
 8005d9a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d015      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005da6:	4b3c      	ldr	r3, [pc, #240]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0c5b      	lsrs	r3, r3, #17
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	4a3b      	ldr	r2, [pc, #236]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005dc0:	4a38      	ldr	r2, [pc, #224]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e004      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ddc:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de8:	d102      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	61bb      	str	r3, [r7, #24]
      break;
 8005dee:	e04a      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4a2d      	ldr	r2, [pc, #180]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	61bb      	str	r3, [r7, #24]
      break;
 8005dfe:	e042      	b.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005e00:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e10:	d108      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e01f      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d109      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005e3c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	e00f      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4e:	d11c      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005e5c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e60:	61bb      	str	r3, [r7, #24]
      break;
 8005e62:	e012      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005e64:	e011      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005e66:	f7ff fe85 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	0b9b      	lsrs	r3, r3, #14
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	3301      	adds	r3, #1
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	61bb      	str	r3, [r7, #24]
      break;
 8005e80:	e004      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e8a:	bf00      	nop
    }
  }
  return (frequency);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	08007520 	.word	0x08007520
 8005ea0:	08007530 	.word	0x08007530
 8005ea4:	007a1200 	.word	0x007a1200
 8005ea8:	003d0900 	.word	0x003d0900
 8005eac:	aaaaaaab 	.word	0xaaaaaaab

08005eb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e076      	b.n	8005fb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d108      	bne.n	8005edc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e005      	b.n	8005ee8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb fdd0 	bl	8001aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	ea42 0103 	orr.w	r1, r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	0c1a      	lsrs	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f002 0204 	and.w	r2, r2, #4
 8005f8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_SPI_Transmit+0x22>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e12d      	b.n	8006236 <HAL_SPI_Transmit+0x27e>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fe2:	f7fc f803 	bl	8001fec <HAL_GetTick>
 8005fe6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ffc:	e116      	b.n	800622c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x52>
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800600e:	e10d      	b.n	800622c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2203      	movs	r2, #3
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	88fa      	ldrh	r2, [r7, #6]
 800602e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006056:	d10f      	bne.n	8006078 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006076:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d007      	beq.n	8006096 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609e:	d14f      	bne.n	8006140 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_Transmit+0xf6>
 80060a8:	8afb      	ldrh	r3, [r7, #22]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d142      	bne.n	8006134 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060d2:	e02f      	b.n	8006134 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d112      	bne.n	8006108 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	86da      	strh	r2, [r3, #54]	; 0x36
 8006106:	e015      	b.n	8006134 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006108:	f7fb ff70 	bl	8001fec <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d803      	bhi.n	8006120 <HAL_SPI_Transmit+0x168>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611e:	d102      	bne.n	8006126 <HAL_SPI_Transmit+0x16e>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006132:	e07b      	b.n	800622c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1ca      	bne.n	80060d4 <HAL_SPI_Transmit+0x11c>
 800613e:	e050      	b.n	80061e2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <HAL_SPI_Transmit+0x196>
 8006148:	8afb      	ldrh	r3, [r7, #22]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d144      	bne.n	80061d8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006174:	e030      	b.n	80061d8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d113      	bne.n	80061ac <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80061aa:	e015      	b.n	80061d8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ac:	f7fb ff1e 	bl	8001fec <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d803      	bhi.n	80061c4 <HAL_SPI_Transmit+0x20c>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Transmit+0x212>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061d6:	e029      	b.n	800622c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1c9      	bne.n	8006176 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f9ae 	bl	8006548 <SPI_EndRxTxTransaction>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	613b      	str	r3, [r7, #16]
 8006214:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e003      	b.n	800622c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10e      	bne.n	8006280 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
    return;
 800627e:	e0b7      	b.n	80063f0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <HAL_SPI_IRQHandler+0x5e>
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
    return;
 800629c:	e0a8      	b.n	80063f0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d105      	bne.n	80062b4 <HAL_SPI_IRQHandler+0x74>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 809e 	beq.w	80063f0 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8098 	beq.w	80063f0 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d023      	beq.n	8006312 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d011      	beq.n	80062fa <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	f043 0204 	orr.w	r2, r3, #4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	e00b      	b.n	8006312 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062fa:	2300      	movs	r3, #0
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	693b      	ldr	r3, [r7, #16]
        return;
 8006310:	e06e      	b.n	80063f0 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d014      	beq.n	8006346 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006320:	f043 0201 	orr.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	2b00      	cmp	r3, #0
 800634c:	d04f      	beq.n	80063ee <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800635c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_SPI_IRQHandler+0x13a>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d034      	beq.n	80063e4 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0203 	bic.w	r2, r2, #3
 8006388:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_SPI_IRQHandler+0x1b8>)
 8006398:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fe64 	bl	800306c <HAL_DMA_Abort_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <HAL_SPI_IRQHandler+0x1b8>)
 80063c4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fe4e 	bl	800306c <HAL_DMA_Abort_IT>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80063e2:	e003      	b.n	80063ec <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f809 	bl	80063fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063ea:	e000      	b.n	80063ee <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80063ec:	bf00      	nop
    return;
 80063ee:	bf00      	nop
  }
}
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	0800640f 	.word	0x0800640f

080063fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff ffe7 	bl	80063fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006448:	f7fb fdd0 	bl	8001fec <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4413      	add	r3, r2
 8006456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006458:	f7fb fdc8 	bl	8001fec <HAL_GetTick>
 800645c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800645e:	4b39      	ldr	r3, [pc, #228]	; (8006544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	015b      	lsls	r3, r3, #5
 8006464:	0d1b      	lsrs	r3, r3, #20
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800646e:	e054      	b.n	800651a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d050      	beq.n	800651a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006478:	f7fb fdb8 	bl	8001fec <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	429a      	cmp	r2, r3
 8006486:	d902      	bls.n	800648e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d13d      	bne.n	800650a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800649c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a6:	d111      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d004      	beq.n	80064bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ba:	d107      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d4:	d10f      	bne.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e017      	b.n	800653a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	3b01      	subs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	429a      	cmp	r2, r3
 8006536:	d19b      	bne.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000002c 	.word	0x2000002c

08006548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff6a 	bl	8006438 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e000      	b.n	800657c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e042      	b.n	800661c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb fbf6 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fe03 	bl	80071d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b20      	cmp	r3, #32
 8006642:	d16d      	bne.n	8006720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Transmit+0x2c>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e066      	b.n	8006722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2221      	movs	r2, #33	; 0x21
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fb fcc3 	bl	8001fec <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d108      	bne.n	8006690 <HAL_UART_Transmit+0x6c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e003      	b.n	8006698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006698:	e02a      	b.n	80066f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fb8b 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e036      	b.n	8006722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3302      	adds	r3, #2
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e007      	b.n	80066e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1cf      	bne.n	800669a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fb5b 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b08a      	sub	sp, #40	; 0x28
 800672e:	af02      	add	r7, sp, #8
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b20      	cmp	r3, #32
 8006748:	d17c      	bne.n	8006844 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Receive+0x2c>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e075      	b.n	8006846 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2222      	movs	r2, #34	; 0x22
 8006764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676e:	f7fb fc3d 	bl	8001fec <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88fa      	ldrh	r2, [r7, #6]
 800677e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d108      	bne.n	800679c <HAL_UART_Receive+0x72>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e003      	b.n	80067a4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067a4:	e043      	b.n	800682e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2120      	movs	r1, #32
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fb05 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e042      	b.n	8006846 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3302      	adds	r3, #2
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e01f      	b.n	8006820 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d007      	beq.n	80067fa <HAL_UART_Receive+0xd0>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <HAL_UART_Receive+0xde>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e008      	b.n	800681a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1b6      	bne.n	80067a6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b0ba      	sub	sp, #232	; 0xe8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800688e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <HAL_UART_IRQHandler+0x66>
 80068a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fbd1 	bl	8007056 <UART_Receive_IT>
      return;
 80068b4:	e25b      	b.n	8006d6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80de 	beq.w	8006a7c <HAL_UART_IRQHandler+0x22c>
 80068c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80d1 	beq.w	8006a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <HAL_UART_IRQHandler+0xae>
 80068e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	f043 0201 	orr.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_UART_IRQHandler+0xd2>
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	f043 0202 	orr.w	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <HAL_UART_IRQHandler+0xf6>
 800692e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d005      	beq.n	8006946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f043 0204 	orr.w	r2, r3, #4
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d011      	beq.n	8006976 <HAL_UART_IRQHandler+0x126>
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d105      	bne.n	800696a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800695e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f043 0208 	orr.w	r2, r3, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 81f2 	beq.w	8006d64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_UART_IRQHandler+0x14e>
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fb5c 	bl	8007056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bf14      	ite	ne
 80069ac:	2301      	movne	r3, #1
 80069ae:	2300      	moveq	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d103      	bne.n	80069ca <HAL_UART_IRQHandler+0x17a>
 80069c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d04f      	beq.n	8006a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa66 	bl	8006e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d041      	beq.n	8006a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3314      	adds	r3, #20
 8006a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1d9      	bne.n	80069de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d013      	beq.n	8006a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a36:	4a7e      	ldr	r2, [pc, #504]	; (8006c30 <HAL_UART_IRQHandler+0x3e0>)
 8006a38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fc fb14 	bl	800306c <HAL_DMA_Abort_IT>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d016      	beq.n	8006a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e00e      	b.n	8006a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f99c 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	e00a      	b.n	8006a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f998 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	e006      	b.n	8006a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f994 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a76:	e175      	b.n	8006d64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	bf00      	nop
    return;
 8006a7a:	e173      	b.n	8006d64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	f040 814f 	bne.w	8006d24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8148 	beq.w	8006d24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8141 	beq.w	8006d24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80b6 	beq.w	8006c34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8145 	beq.w	8006d68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	f080 813e 	bcs.w	8006d68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006af2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	f000 8088 	beq.w	8006c10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	330c      	adds	r3, #12
 8006b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1d9      	bne.n	8006b00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3314      	adds	r3, #20
 8006b52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e1      	bne.n	8006b4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3314      	adds	r3, #20
 8006b8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e3      	bne.n	8006b88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be0:	f023 0310 	bic.w	r3, r3, #16
 8006be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bf4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fc f9f2 	bl	8002ff4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f8bf 	bl	8006daa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c2c:	e09c      	b.n	8006d68 <HAL_UART_IRQHandler+0x518>
 8006c2e:	bf00      	nop
 8006c30:	08006f61 	.word	0x08006f61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 808e 	beq.w	8006d6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8089 	beq.w	8006d6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e3      	bne.n	8006c5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3314      	adds	r3, #20
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e3      	bne.n	8006c92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cfc:	61fa      	str	r2, [r7, #28]
 8006cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	69b9      	ldr	r1, [r7, #24]
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	617b      	str	r3, [r7, #20]
   return(result);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e3      	bne.n	8006cd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f844 	bl	8006daa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d22:	e023      	b.n	8006d6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <HAL_UART_IRQHandler+0x4f4>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f923 	bl	8006f88 <UART_Transmit_IT>
    return;
 8006d42:	e014      	b.n	8006d6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_UART_IRQHandler+0x51e>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f962 	bl	8007026 <UART_EndTransmit_IT>
    return;
 8006d62:	e004      	b.n	8006d6e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d6c:	bf00      	nop
  }
}
 8006d6e:	37e8      	adds	r7, #232	; 0xe8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr

08006daa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	460b      	mov	r3, r1
 8006db4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b090      	sub	sp, #64	; 0x40
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd0:	e050      	b.n	8006e74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd8:	d04c      	beq.n	8006e74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de0:	f7fb f904 	bl	8001fec <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d241      	bcs.n	8006e74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e10:	637a      	str	r2, [r7, #52]	; 0x34
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	613b      	str	r3, [r7, #16]
   return(result);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3314      	adds	r3, #20
 8006e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e44:	623a      	str	r2, [r7, #32]
 8006e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e00f      	b.n	8006e94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d09f      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3740      	adds	r7, #64	; 0x40
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b095      	sub	sp, #84	; 0x54
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec4:	643a      	str	r2, [r7, #64]	; 0x40
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e5      	bne.n	8006ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3314      	adds	r3, #20
 8006ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d119      	bne.n	8006f48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f023 0310 	bic.w	r3, r3, #16
 8006f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f34:	61ba      	str	r2, [r7, #24]
 8006f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6979      	ldr	r1, [r7, #20]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	613b      	str	r3, [r7, #16]
   return(result);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f56:	bf00      	nop
 8006f58:	3754      	adds	r7, #84	; 0x54
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff ff0c 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b21      	cmp	r3, #33	; 0x21
 8006f9a:	d13e      	bne.n	800701a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa4:	d114      	bne.n	8006fd0 <UART_Transmit_IT+0x48>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d110      	bne.n	8006fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	621a      	str	r2, [r3, #32]
 8006fce:	e008      	b.n	8006fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6211      	str	r1, [r2, #32]
 8006fda:	781a      	ldrb	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10f      	bne.n	8007016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	e000      	b.n	800701c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800701a:	2302      	movs	r3, #2
  }
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fe94 	bl	8006d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b08c      	sub	sp, #48	; 0x30
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b22      	cmp	r3, #34	; 0x22
 8007068:	f040 80ae 	bne.w	80071c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d117      	bne.n	80070a6 <UART_Receive_IT+0x50>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d113      	bne.n	80070a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	b29a      	uxth	r2, r3
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28
 80070a4:	e026      	b.n	80070f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d007      	beq.n	80070ca <UART_Receive_IT+0x74>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <UART_Receive_IT+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e008      	b.n	80070ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4619      	mov	r1, r3
 8007102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007104:	2b00      	cmp	r3, #0
 8007106:	d15d      	bne.n	80071c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0220 	bic.w	r2, r2, #32
 8007116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	2b01      	cmp	r3, #1
 800714c:	d135      	bne.n	80071ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	613b      	str	r3, [r7, #16]
   return(result);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007174:	623a      	str	r2, [r7, #32]
 8007176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	69f9      	ldr	r1, [r7, #28]
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	61bb      	str	r3, [r7, #24]
   return(result);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0310 	and.w	r3, r3, #16
 8007192:	2b10      	cmp	r3, #16
 8007194:	d10a      	bne.n	80071ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fdf9 	bl	8006daa <HAL_UARTEx_RxEventCallback>
 80071b8:	e002      	b.n	80071c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fde3 	bl	8006d86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e002      	b.n	80071ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3730      	adds	r7, #48	; 0x30
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800720e:	f023 030c 	bic.w	r3, r3, #12
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	430b      	orrs	r3, r1
 800721a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <UART_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d103      	bne.n	8007244 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800723c:	f7fe fc9a 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	e002      	b.n	800724a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007244:	f7fe fc82 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8007248:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	441a      	add	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	4a22      	ldr	r2, [pc, #136]	; (80072ec <UART_SetConfig+0x118>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	0119      	lsls	r1, r3, #4
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009a      	lsls	r2, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007280:	4b1a      	ldr	r3, [pc, #104]	; (80072ec <UART_SetConfig+0x118>)
 8007282:	fba3 0302 	umull	r0, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2064      	movs	r0, #100	; 0x64
 800728a:	fb00 f303 	mul.w	r3, r0, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	3332      	adds	r3, #50	; 0x32
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <UART_SetConfig+0x118>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a0:	4419      	add	r1, r3
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009a      	lsls	r2, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <UART_SetConfig+0x118>)
 80072ba:	fba3 0302 	umull	r0, r3, r3, r2
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2064      	movs	r0, #100	; 0x64
 80072c2:	fb00 f303 	mul.w	r3, r0, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	3332      	adds	r3, #50	; 0x32
 80072cc:	4a07      	ldr	r2, [pc, #28]	; (80072ec <UART_SetConfig+0x118>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	440a      	add	r2, r1
 80072de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40013800 	.word	0x40013800
 80072ec:	51eb851f 	.word	0x51eb851f

080072f0 <memset>:
 80072f0:	4603      	mov	r3, r0
 80072f2:	4402      	add	r2, r0
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d100      	bne.n	80072fa <memset+0xa>
 80072f8:	4770      	bx	lr
 80072fa:	f803 1b01 	strb.w	r1, [r3], #1
 80072fe:	e7f9      	b.n	80072f4 <memset+0x4>

08007300 <__libc_init_array>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	2600      	movs	r6, #0
 8007304:	4d0c      	ldr	r5, [pc, #48]	; (8007338 <__libc_init_array+0x38>)
 8007306:	4c0d      	ldr	r4, [pc, #52]	; (800733c <__libc_init_array+0x3c>)
 8007308:	1b64      	subs	r4, r4, r5
 800730a:	10a4      	asrs	r4, r4, #2
 800730c:	42a6      	cmp	r6, r4
 800730e:	d109      	bne.n	8007324 <__libc_init_array+0x24>
 8007310:	f000 f81a 	bl	8007348 <_init>
 8007314:	2600      	movs	r6, #0
 8007316:	4d0a      	ldr	r5, [pc, #40]	; (8007340 <__libc_init_array+0x40>)
 8007318:	4c0a      	ldr	r4, [pc, #40]	; (8007344 <__libc_init_array+0x44>)
 800731a:	1b64      	subs	r4, r4, r5
 800731c:	10a4      	asrs	r4, r4, #2
 800731e:	42a6      	cmp	r6, r4
 8007320:	d105      	bne.n	800732e <__libc_init_array+0x2e>
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	f855 3b04 	ldr.w	r3, [r5], #4
 8007328:	4798      	blx	r3
 800732a:	3601      	adds	r6, #1
 800732c:	e7ee      	b.n	800730c <__libc_init_array+0xc>
 800732e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007332:	4798      	blx	r3
 8007334:	3601      	adds	r6, #1
 8007336:	e7f2      	b.n	800731e <__libc_init_array+0x1e>
 8007338:	08007534 	.word	0x08007534
 800733c:	08007534 	.word	0x08007534
 8007340:	08007534 	.word	0x08007534
 8007344:	08007538 	.word	0x08007538

08007348 <_init>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr

08007354 <_fini>:
 8007354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007356:	bf00      	nop
 8007358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735a:	bc08      	pop	{r3}
 800735c:	469e      	mov	lr, r3
 800735e:	4770      	bx	lr
