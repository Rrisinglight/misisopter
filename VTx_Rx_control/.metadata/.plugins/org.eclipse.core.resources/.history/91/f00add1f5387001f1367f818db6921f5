/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "RX5808.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
struct Pack_Fild	/* Pack_Typedef */
{
	uint16_t 	RSSI;
	uint16_t 	RX_Freq;
	uint16_t 	SendIdx;
};

//struct Pack_Fild Packs[1024];
struct Pack_Fild Packs[100];

#define ADC_REFERENCE_VOLTAGE        1.2
#define ADC_MAX                    0xFFF

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
	uint8_t SPI1_OUT[8] = "UUUUUUUU";
	uint8_t SPI1_RSV[8] = "AAAAAAAA";
	uint8_t SPI2_OUT[8] = "UUUUUUUU";
	uint8_t SPI2_RSV[8] = "AAAAAAAA";
	uint8_t UART1_OUT[8] = "UUUUUUUU";
	uint8_t UART1_RSV[8] = "AAAAAAAA";
	uint8_t UART2_OUT[8] = "UUUUUUUU";
	uint8_t UART2_RSV[8] = "AAAAAAAA";
//	extern static const unsigned int masFreg[32];
	uint8_t CLK1_CNT = 0;

	uint16_t i,j = 0;

	float mcuVoltage = 0;
	float batteryVoltage = 0;
	uint16_t adcData[100];
	uint32_t TmpADC = 0;
	uint16_t RSSI[100];
	uint16_t minRSSI = 0;
	uint16_t maxRSSI = 0;
	uint16_t AvgRSSI = 0;
	uint16_t LvlRSSI = 0;
	uint32_t SummRSSI = 0;
	uint16_t RX_Freq = 0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_USART2_UART_Init();
  MX_SPI1_Init();
  MX_ADC1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);	// задержка для старта USB

  HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 2);

  RX5808_Init();

  SPI1_SS_En;
  CLK1_CNT = 0;
  HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
  SPI1_SS_Dis;

  i = 0;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	I2C1_LED_Xor;
	PC13_Xor;

//	if(i < 500)
	if(i < 100)
	{
//		prog_freg(5500+1*i);       // диапазон сканирования 5500 - 6000 МГц
		prog_freg(5500+5*i);       // диапазон сканирования 5500 - 6000 МГц
		Packs[i].RX_Freq = (5500+5*i);
		Packs[i].SendIdx = i;

		i++;
//		prog_freg(5823);       // диапазон сканирования 5500 - 6000 МГц

		HAL_SPI_MspInit(&hspi1);
		HAL_Delay(1);	// задержка

		SPI1_SS_En;
		CLK1_CNT = 0;
		HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
		SPI1_SS_Dis;

		HAL_ADC_Start_IT(&hadc1);
		HAL_Delay(1);	// задержка

		adcData[i] = TmpADC;
	}	// scaning
	else
	{
		for(j = 0; j < i; j++)
		{
			Packs[j].RSSI = adcData[j];
			SummRSSI += Packs[j].RSSI;

			if(Packs[j].RSSI > maxRSSI)
			{
				maxRSSI = Packs[j].RSSI;
				RX_Freq = Packs[j].RX_Freq;
			}
		}

		AvgRSSI = SummRSSI/(i + 1);
		SummRSSI = AvgRSSI;
		maxRSSI = AvgRSSI;
/*
	Тут имеем частоту RX_Freq которую надо подавить.
*/
//		HAL_Delay(1);	// задержка
// Это для SA, 4800
		HAL_UART_Transmit(&huart1, UART1_OUT, 2, 0x01);
/* Тут надо вставить отключение выхода */
/* Тут надо еще буфер и размет ответа исправить */
//	   HAL_UART_Receive(&huart1, RX_buffer, 1024, 0x03);

//	   HAL_Delay(1);	// задержка
// Это для Trump, 9600
		HAL_UART_Transmit(&huart2, UART2_OUT, 2, 0x01);
/* Тут надо вставить отключение выхода */
/* Тут надо еще буфер и размет ответа исправить */
//	    HAL_UART_Receive(&huart2, RX_buffer, 1024, 0x03);
//	    HAL_Delay(1);	// задержка на работу глушилки

		i = 0;

	}	// end scaning

/*
	SPI2_SS_En;
	HAL_SPI_Transmit(&hspi2, SPI2_OUT, 4, 0x01);
	HAL_SPI_Receive(&hspi2, SPI2_RSV, 4, 0X01);
	SPI2_SS_Dis;
*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(25);	// задержка

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
