
F411_HW_SPI_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbdc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800cd74  0800cd74  0001cd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf70  0800cf70  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf78  0800cf78  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf7c  0800cf7c  0001cf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  0800cf80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000248c  20000140  0800d0c0  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025cc  0800d0c0  000225cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022235  00000000  00000000  000201b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000560d  00000000  00000000  000423e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  000479f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c5  00000000  00000000  00049640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e372  00000000  00000000  0004ac05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029234  00000000  00000000  00068f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a48d2  00000000  00000000  000921ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074cc  00000000  00000000  00136a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000140 	.word	0x20000140
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cd5c 	.word	0x0800cd5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000144 	.word	0x20000144
 80001d4:	0800cd5c 	.word	0x0800cd5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <OutSPI1Pin>:

extern uint8_t SPI1_OUT[8];

// SPI1Pin пин на выход, PA5
void OutSPI1Pin(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]

	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004e8:	2320      	movs	r3, #32
 80004ea:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <OutSPI1Pin+0x3c>)
 80004fa:	f003 f8eb 	bl	80036d4 <HAL_GPIO_Init>
	  PA5_Clr;
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <OutSPI1Pin+0x3c>)
 8000504:	f003 fa6a 	bl	80039dc <HAL_GPIO_WritePin>
}	//
 8000508:	bf00      	nop
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020000 	.word	0x40020000

08000514 <RX5808_Init>:

void RX5808_Init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
/*	SPI1_OUT[0] = 0x10;
	SPI1_OUT[1] = 0x01;
	SPI1_OUT[2] = 0x00;
	SPI1_OUT[3] = 0x00;
*/
	SPI1_OUT[0] = 0x10;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <RX5808_Init+0x28>)
 800051a:	2210      	movs	r2, #16
 800051c:	701a      	strb	r2, [r3, #0]
	SPI1_OUT[1] = 0x0F;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <RX5808_Init+0x28>)
 8000520:	220f      	movs	r2, #15
 8000522:	705a      	strb	r2, [r3, #1]
	SPI1_OUT[2] = 0x29;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <RX5808_Init+0x28>)
 8000526:	2229      	movs	r2, #41	; 0x29
 8000528:	709a      	strb	r2, [r3, #2]
	SPI1_OUT[3] = 0x00;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <RX5808_Init+0x28>)
 800052c:	2200      	movs	r2, #0
 800052e:	70da      	strb	r2, [r3, #3]

//    SET(RX5808_PORTX, RX5808_SS);
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000

08000540 <prog_freg>:

 void prog_freg (unsigned int Freguency)               // устанавливаем частоту в RX5808 из регистра freguencu
{
 8000540:	b480      	push	{r7}
 8000542:	b087      	sub	sp, #28
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	  unsigned int Delitel;
	  unsigned int DelitelH;
	  unsigned int DelitelL;

      Delitel=(Freguency -479)/2 ;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f2a3 13df 	subw	r3, r3, #479	; 0x1df
 800054e:	085b      	lsrs	r3, r3, #1
 8000550:	617b      	str	r3, [r7, #20]
      DelitelH=Delitel>>5 ;
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	095b      	lsrs	r3, r3, #5
 8000556:	613b      	str	r3, [r7, #16]
      DelitelL=Delitel &0x1F;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	f003 031f 	and.w	r3, r3, #31
 800055e:	60fb      	str	r3, [r7, #12]
      SPI_WriteByte(DelitelH *16 + DelitelL /8);
      SPI_WriteByte(DelitelH /16);
      SPI_WriteByte(0x00);
      SET(RX5808_PORTX, RX5808_SS);
*/
	SPI1_OUT[0] = (DelitelL *32 +17 );
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	015b      	lsls	r3, r3, #5
 8000566:	b2db      	uxtb	r3, r3
 8000568:	3311      	adds	r3, #17
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <prog_freg+0x64>)
 800056e:	701a      	strb	r2, [r3, #0]
	SPI1_OUT[1] = (DelitelH *16 + DelitelL /8);
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	b2da      	uxtb	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4413      	add	r3, r2
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <prog_freg+0x64>)
 8000584:	705a      	strb	r2, [r3, #1]
	SPI1_OUT[2] = (DelitelH /16);
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <prog_freg+0x64>)
 800058e:	709a      	strb	r2, [r3, #2]
	SPI1_OUT[3] = 0x00;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <prog_freg+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	70da      	strb	r2, [r3, #3]
}
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <MX_ADC1_Init+0xb4>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e6:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <MX_ADC1_Init+0xb8>)
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_ADC1_Init+0xb0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_ADC1_Init+0xb0>)
 8000602:	2201      	movs	r2, #1
 8000604:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <MX_ADC1_Init+0xb0>)
 8000608:	f001 ff36 	bl	8002478 <HAL_ADC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000612:	f000 fdbd 	bl	8001190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000616:	2308      	movs	r3, #8
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_ADC1_Init+0xb0>)
 8000628:	f002 f964 	bl	80028f4 <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000632:	f000 fdad 	bl	8001190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0xb0>)
 8000640:	f002 f958 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800064a:	f000 fda1 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000015c 	.word	0x2000015c
 800065c:	40012000 	.word	0x40012000
 8000660:	0f000001 	.word	0x0f000001

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a33      	ldr	r2, [pc, #204]	; (8000750 <HAL_ADC_MspInit+0xec>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d15f      	bne.n	8000746 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a31      	ldr	r2, [pc, #196]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 8000690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000694:	6453      	str	r3, [r2, #68]	; 0x44
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <HAL_ADC_MspInit+0xf0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006be:	2303      	movs	r3, #3
 80006c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4821      	ldr	r0, [pc, #132]	; (8000758 <HAL_ADC_MspInit+0xf4>)
 80006d2:	f002 ffff 	bl	80036d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <HAL_ADC_MspInit+0xfc>)
 80006da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_ADC_MspInit+0xf8>)
 80006f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_ADC_MspInit+0xf8>)
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_ADC_MspInit+0xf8>)
 8000708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <HAL_ADC_MspInit+0xf8>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_ADC_MspInit+0xf8>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <HAL_ADC_MspInit+0xf8>)
 800071c:	f002 fc50 	bl	8002fc0 <HAL_DMA_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000726:	f000 fd33 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a0b      	ldr	r2, [pc, #44]	; (800075c <HAL_ADC_MspInit+0xf8>)
 800072e:	639a      	str	r2, [r3, #56]	; 0x38
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <HAL_ADC_MspInit+0xf8>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2012      	movs	r0, #18
 800073c:	f002 fbed 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000740:	2012      	movs	r0, #18
 8000742:	f002 fc06 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400
 800075c:	200001a4 	.word	0x200001a4
 8000760:	40026410 	.word	0x40026410

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CRC_Init+0x20>)
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <MX_CRC_Init+0x24>)
 800076c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_CRC_Init+0x20>)
 8000770:	f002 fc09 	bl	8002f86 <HAL_CRC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800077a:	f000 fd09 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000204 	.word	0x20000204
 8000788:	40023000 	.word	0x40023000

0800078c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <HAL_CRC_MspInit+0x3c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d10d      	bne.n	80007ba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_CRC_MspInit+0x40>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_CRC_MspInit+0x40>)
 80007a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <HAL_CRC_MspInit+0x40>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023000 	.word	0x40023000
 80007cc:	40023800 	.word	0x40023800

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x3c>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x3c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2038      	movs	r0, #56	; 0x38
 80007f8:	f002 fb8f 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007fc:	2038      	movs	r0, #56	; 0x38
 80007fe:	f002 fba8 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a61      	ldr	r2, [pc, #388]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a5a      	ldr	r2, [pc, #360]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a53      	ldr	r2, [pc, #332]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a4c      	ldr	r2, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <MX_GPIO_Init+0x1a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	4846      	ldr	r0, [pc, #280]	; (80009b8 <MX_GPIO_Init+0x1a8>)
 800089e:	f003 f89d 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_15, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f248 0101 	movw	r1, #32769	; 0x8001
 80008a8:	4844      	ldr	r0, [pc, #272]	; (80009bc <MX_GPIO_Init+0x1ac>)
 80008aa:	f003 f897 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VTX1_PWR_Pin|SPI1_SS_Pin|VTX2_PWR_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80008b4:	4841      	ldr	r0, [pc, #260]	; (80009bc <MX_GPIO_Init+0x1ac>)
 80008b6:	f003 f891 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|I2C1_RST_Pin|I2C1_LED_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2134      	movs	r1, #52	; 0x34
 80008be:	4840      	ldr	r0, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x1b0>)
 80008c0:	f003 f88c 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ca:	483d      	ldr	r0, [pc, #244]	; (80009c0 <MX_GPIO_Init+0x1b0>)
 80008cc:	f003 f886 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BlueLed_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008d6:	2311      	movs	r3, #17
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BlueLed_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4833      	ldr	r0, [pc, #204]	; (80009b8 <MX_GPIO_Init+0x1a8>)
 80008ea:	f002 fef3 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ee:	2301      	movs	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x1ac>)
 8000906:	f002 fee5 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VTX1_PWR_Pin|VTX2_PWR_Pin;
 800090a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000910:	2311      	movs	r3, #17
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4826      	ldr	r0, [pc, #152]	; (80009bc <MX_GPIO_Init+0x1ac>)
 8000924:	f002 fed6 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000928:	2310      	movs	r3, #16
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	481f      	ldr	r0, [pc, #124]	; (80009bc <MX_GPIO_Init+0x1ac>)
 800093e:	f002 fec9 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = SPI1_SS_Pin|GPIO_PIN_15;
 8000942:	f248 0340 	movw	r3, #32832	; 0x8040
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_GPIO_Init+0x1ac>)
 800095c:	f002 feba 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SPI2_SS_Pin;
 8000960:	f244 0304 	movw	r3, #16388	; 0x4004
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_GPIO_Init+0x1b0>)
 800097a:	f002 feab 	bl	80036d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_RST_Pin|I2C1_LED_Pin;
 800097e:	2330      	movs	r3, #48	; 0x30
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	480a      	ldr	r0, [pc, #40]	; (80009c0 <MX_GPIO_Init+0x1b0>)
 8000996:	f002 fe9d 	bl	80036d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 fabb 	bl	8002f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f002 fad4 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020400 	.word	0x40020400

080009c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_I2C1_Init+0x54>)
 80009cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MX_I2C1_Init+0x58>)
 80009d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_I2C1_Init+0x50>)
 8000a02:	f003 f843 	bl	8003a8c <HAL_I2C_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a0c:	f000 fbc0 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000020c 	.word	0x2000020c
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	000186a0 	.word	0x000186a0

08000a20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_I2C2_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <MX_I2C2_Init+0x58>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_I2C2_Init+0x50>)
 8000a5e:	f003 f815 	bl	8003a8c <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fb92 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000260 	.word	0x20000260
 8000a74:	40005800 	.word	0x40005800
 8000a78:	000186a0 	.word	0x000186a0

08000a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <HAL_I2C_MspInit+0x14c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d13d      	bne.n	8000b1a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac0:	2312      	movs	r3, #18
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000acc:	2304      	movs	r3, #4
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483e      	ldr	r0, [pc, #248]	; (8000bd0 <HAL_I2C_MspInit+0x154>)
 8000ad8:	f002 fdfc 	bl	80036d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	201f      	movs	r0, #31
 8000afe:	f002 fa0c 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b02:	201f      	movs	r0, #31
 8000b04:	f002 fa25 	bl	8002f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f002 fa04 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b12:	2020      	movs	r0, #32
 8000b14:	f002 fa1d 	bl	8002f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b18:	e051      	b.n	8000bbe <HAL_I2C_MspInit+0x142>
  else if(i2cHandle->Instance==I2C2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	; (8000bd4 <HAL_I2C_MspInit+0x158>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d14c      	bne.n	8000bbe <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	6313      	str	r3, [r2, #48]	; 0x30
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b52:	2304      	movs	r3, #4
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <HAL_I2C_MspInit+0x154>)
 8000b5e:	f002 fdb9 	bl	80036d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b62:	2308      	movs	r3, #8
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000b72:	2309      	movs	r3, #9
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <HAL_I2C_MspInit+0x154>)
 8000b7e:	f002 fda9 	bl	80036d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_I2C_MspInit+0x150>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2021      	movs	r0, #33	; 0x21
 8000ba4:	f002 f9b9 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ba8:	2021      	movs	r0, #33	; 0x21
 8000baa:	f002 f9d2 	bl	8002f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2022      	movs	r0, #34	; 0x22
 8000bb4:	f002 f9b1 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000bb8:	2022      	movs	r0, #34	; 0x22
 8000bba:	f002 f9ca 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	; 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40005800 	.word	0x40005800

08000bd8 <InputTx2Pin>:
   PB6_Set;
} //

// ТХ2 pin INPUT PA2 -> USART2
void InputTx2Pin(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

   GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <InputTx2Pin+0x3c>)
 8000bfe:	f002 fd69 	bl	80036d4 <HAL_GPIO_Init>
   PA2_Set;
 8000c02:	2201      	movs	r2, #1
 8000c04:	2104      	movs	r1, #4
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <InputTx2Pin+0x3c>)
 8000c08:	f002 fee8 	bl	80039dc <HAL_GPIO_WritePin>
} //
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40020000 	.word	0x40020000

08000c18 <Fill_Cmd_freq>:

  return cksum;
}

void Fill_Cmd_freq(uint16_t freq)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	81fb      	strh	r3, [r7, #14]
	for(i = 0; i < 16; i++){command_start_freq[i] = 0x00;}
 8000c26:	2300      	movs	r3, #0
 8000c28:	81fb      	strh	r3, [r7, #14]
 8000c2a:	e006      	b.n	8000c3a <Fill_Cmd_freq+0x22>
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	54d1      	strb	r1, [r2, r3]
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	3301      	adds	r3, #1
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d9f5      	bls.n	8000c2c <Fill_Cmd_freq+0x14>
	command_start_freq[0] = TRAMP_SYNC_START;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c42:	220f      	movs	r2, #15
 8000c44:	701a      	strb	r2, [r3, #0]
	command_start_freq[1] = 0x46;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c48:	2246      	movs	r2, #70	; 0x46
 8000c4a:	705a      	strb	r2, [r3, #1]
	command_start_freq[2] = freq%256;
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c52:	709a      	strb	r2, [r3, #2]
	command_start_freq[3] = freq/256;
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	0a1b      	lsrs	r3, r3, #8
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c5e:	70da      	strb	r2, [r3, #3]
	command_start_freq[14] = command_start_freq[1] + command_start_freq[2] + command_start_freq[3];
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c62:	785a      	ldrb	r2, [r3, #1]
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c66:	789b      	ldrb	r3, [r3, #2]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c6e:	78db      	ldrb	r3, [r3, #3]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c76:	739a      	strb	r2, [r3, #14]
	command_start_freq[15] = TRAMP_SYNC_STOP;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <Fill_Cmd_freq+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	73da      	strb	r2, [r3, #15]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000001c 	.word	0x2000001c

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f001 fb5a 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c98:	f000 fa12 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f7ff fdb8 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca0:	f7ff fd96 	bl	80007d0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fc6e 	bl	8001584 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ca8:	f000 fd08 	bl	80016bc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000cac:	f000 fe52 	bl	8001954 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000cb0:	f7ff fd58 	bl	8000764 <MX_CRC_Init>
  MX_FATFS_Init();
 8000cb4:	f000 fdba 	bl	800182c <MX_FATFS_Init>
  MX_I2C2_Init();
 8000cb8:	f7ff feb2 	bl	8000a20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000cbc:	f000 fa6e 	bl	800119c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cc0:	f000 fcd2 	bl	8001668 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000cc4:	f7ff fe7e 	bl	80009c4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000cc8:	f000 faa0 	bl	800120c <MX_SPI2_Init>
  MX_ADC1_Init();
 8000ccc:	f7ff fc6c 	bl	80005a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);	// задержка для старта USB
 8000cd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cd4:	f001 fbac 	bl	8002430 <HAL_Delay>

//  HAL_ADCEx_Calibration_Start(&hadc1);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, 2);
  i = 0;
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <main+0x218>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
  j = 0;
 8000cde:	4b73      	ldr	r3, [pc, #460]	; (8000eac <main+0x21c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
  k = 0;
 8000ce4:	4b72      	ldr	r3, [pc, #456]	; (8000eb0 <main+0x220>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
  l = 0;
 8000cea:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <main+0x224>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	801a      	strh	r2, [r3, #0]

  //Packs[0].RX_Freq = Start_Fix_freq;

/* Формируем таблицы частот */
  for(l = 0; l < 40; l++)
 8000cf0:	4b70      	ldr	r3, [pc, #448]	; (8000eb4 <main+0x224>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	e01d      	b.n	8000d34 <main+0xa4>
  {
	  Fix_freqs[l] = freqs[l];
 8000cf8:	4b6e      	ldr	r3, [pc, #440]	; (8000eb4 <main+0x224>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4b6d      	ldr	r3, [pc, #436]	; (8000eb4 <main+0x224>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <main+0x228>)
 8000d06:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <main+0x22c>)
 8000d0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  Fix_Norm_freqs[l] = Norm_freqs[l];
 8000d10:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <main+0x224>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4b67      	ldr	r3, [pc, #412]	; (8000eb4 <main+0x224>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <main+0x230>)
 8000d1e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8000d22:	4b68      	ldr	r3, [pc, #416]	; (8000ec4 <main+0x234>)
 8000d24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(l = 0; l < 40; l++)
 8000d28:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <main+0x224>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <main+0x224>)
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <main+0x224>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	2b27      	cmp	r3, #39	; 0x27
 8000d3a:	d9dd      	bls.n	8000cf8 <main+0x68>
  }
  for(l = 0; l < 122; l++){Full_Freqs[l] = Full_Freqs_Lst[l];}
 8000d3c:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <main+0x224>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	e011      	b.n	8000d68 <main+0xd8>
 8000d44:	4b5b      	ldr	r3, [pc, #364]	; (8000eb4 <main+0x224>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <main+0x224>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <main+0x238>)
 8000d52:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <main+0x23c>)
 8000d58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000d5c:	4b55      	ldr	r3, [pc, #340]	; (8000eb4 <main+0x224>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <main+0x224>)
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	4b52      	ldr	r3, [pc, #328]	; (8000eb4 <main+0x224>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	2b79      	cmp	r3, #121	; 0x79
 8000d6e:	d9e9      	bls.n	8000d44 <main+0xb4>

  VTX1_PWR_ON;		// Включаем передатчик
 8000d70:	2200      	movs	r2, #0
 8000d72:	2102      	movs	r1, #2
 8000d74:	4856      	ldr	r0, [pc, #344]	; (8000ed0 <main+0x240>)
 8000d76:	f002 fe31 	bl	80039dc <HAL_GPIO_WritePin>
  HAL_Delay(500);	// задержка
 8000d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7e:	f001 fb57 	bl	8002430 <HAL_Delay>

  RX5808_Init();
 8000d82:	f7ff fbc7 	bl	8000514 <RX5808_Init>

  SPI1_SS_En;
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4851      	ldr	r0, [pc, #324]	; (8000ed0 <main+0x240>)
 8000d8c:	f002 fe26 	bl	80039dc <HAL_GPIO_WritePin>
  CLK1_CNT = 0;
 8000d90:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <main+0x244>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
 8000d96:	2301      	movs	r3, #1
 8000d98:	2204      	movs	r2, #4
 8000d9a:	494f      	ldr	r1, [pc, #316]	; (8000ed8 <main+0x248>)
 8000d9c:	484f      	ldr	r0, [pc, #316]	; (8000edc <main+0x24c>)
 8000d9e:	f006 fbca 	bl	8007536 <HAL_SPI_Transmit>
  SPI1_SS_Dis;
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	484a      	ldr	r0, [pc, #296]	; (8000ed0 <main+0x240>)
 8000da8:	f002 fe18 	bl	80039dc <HAL_GPIO_WritePin>

  HAL_UART_MspInit(&huart2);
 8000dac:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <main+0x250>)
 8000dae:	f000 fcaf 	bl	8001710 <HAL_UART_MspInit>
//	UART_Tx2Pin();
  HAL_Delay(1);	// задержка
 8000db2:	2001      	movs	r0, #1
 8000db4:	f001 fb3c 	bl	8002430 <HAL_Delay>
  HAL_UART_Transmit(&huart2,command_word1,16,20);
 8000db8:	2314      	movs	r3, #20
 8000dba:	2210      	movs	r2, #16
 8000dbc:	4949      	ldr	r1, [pc, #292]	; (8000ee4 <main+0x254>)
 8000dbe:	4848      	ldr	r0, [pc, #288]	; (8000ee0 <main+0x250>)
 8000dc0:	f007 fb0b 	bl	80083da <HAL_UART_Transmit>
  HAL_Delay(1);	// задержка
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f001 fb33 	bl	8002430 <HAL_Delay>
  InputTx2Pin();
 8000dca:	f7ff ff05 	bl	8000bd8 <InputTx2Pin>
  HAL_Delay(1);	// задержка
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f001 fb2e 	bl	8002430 <HAL_Delay>
  HAL_UART_Receive(&huart2, receiveBuffer, 16, 30);
 8000dd4:	231e      	movs	r3, #30
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	4943      	ldr	r1, [pc, #268]	; (8000ee8 <main+0x258>)
 8000dda:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <main+0x250>)
 8000ddc:	f007 fb8f 	bl	80084fe <HAL_UART_Receive>
  HAL_Delay(50);	// задержка
 8000de0:	2032      	movs	r0, #50	; 0x32
 8000de2:	f001 fb25 	bl	8002430 <HAL_Delay>
		adcData[i] = TmpADC;
	}	// scaning
#endif
#ifdef Fix_Scan
//	if(i < 500)
	if(i < 40)
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <main+0x218>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	2b27      	cmp	r3, #39	; 0x27
 8000dec:	d857      	bhi.n	8000e9e <main+0x20e>
	{
//		prog_freg(5500+1*i);       // диапазон сканирования 5500 - 6000 МГц
		prog_freg(Fix_Norm_freqs[i]);       // диапазон сканирования 5500 - 6000 МГц
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <main+0x218>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <main+0x234>)
 8000df6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fba0 	bl	8000540 <prog_freg>
		Packs[i].RX_Freq = (Fix_Norm_freqs[i]);
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <main+0x218>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <main+0x218>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <main+0x234>)
 8000e0e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000e12:	4a36      	ldr	r2, [pc, #216]	; (8000eec <main+0x25c>)
 8000e14:	460b      	mov	r3, r1
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	4602      	mov	r2, r0
 8000e22:	801a      	strh	r2, [r3, #0]
		Packs[i].SendIdx = i;
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <main+0x218>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <main+0x218>)
 8000e2c:	8818      	ldrh	r0, [r3, #0]
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <main+0x25c>)
 8000e30:	460b      	mov	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	801a      	strh	r2, [r3, #0]

		i++;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <main+0x218>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <main+0x218>)
 8000e4a:	801a      	strh	r2, [r3, #0]
//		prog_freg(5823);       // диапазон сканирования 5500 - 6000 МГц

		HAL_SPI_MspInit(&hspi1);
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <main+0x24c>)
 8000e4e:	f000 fa15 	bl	800127c <HAL_SPI_MspInit>
		HAL_Delay(1);	// задержка
 8000e52:	2001      	movs	r0, #1
 8000e54:	f001 faec 	bl	8002430 <HAL_Delay>

		SPI1_SS_En;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	481c      	ldr	r0, [pc, #112]	; (8000ed0 <main+0x240>)
 8000e5e:	f002 fdbd 	bl	80039dc <HAL_GPIO_WritePin>
		CLK1_CNT = 0;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <main+0x244>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, SPI1_OUT, 4, 0x01);
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	491a      	ldr	r1, [pc, #104]	; (8000ed8 <main+0x248>)
 8000e6e:	481b      	ldr	r0, [pc, #108]	; (8000edc <main+0x24c>)
 8000e70:	f006 fb61 	bl	8007536 <HAL_SPI_Transmit>
		SPI1_SS_Dis;
 8000e74:	2201      	movs	r2, #1
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <main+0x240>)
 8000e7a:	f002 fdaf 	bl	80039dc <HAL_GPIO_WritePin>

		HAL_ADC_Start_IT(&hadc1);
 8000e7e:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <main+0x260>)
 8000e80:	f001 fb3e 	bl	8002500 <HAL_ADC_Start_IT>
		HAL_Delay(1);	// задержка
 8000e84:	2001      	movs	r0, #1
 8000e86:	f001 fad3 	bl	8002430 <HAL_Delay>

		adcData[i] = TmpADC;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <main+0x264>)
 8000e8c:	6819      	ldr	r1, [r3, #0]
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <main+0x218>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	b289      	uxth	r1, r1
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <main+0x268>)
 8000e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000e9c:	e7a3      	b.n	8000de6 <main+0x156>
		adcData[i] = TmpADC;
	}	// scaning
#endif
	else
	{
		for(j = 0; j < i; j++)
 8000e9e:	4b03      	ldr	r3, [pc, #12]	; (8000eac <main+0x21c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	801a      	strh	r2, [r3, #0]
 8000ea4:	e089      	b.n	8000fba <main+0x32a>
 8000ea6:	bf00      	nop
 8000ea8:	20000592 	.word	0x20000592
 8000eac:	20000594 	.word	0x20000594
 8000eb0:	20000596 	.word	0x20000596
 8000eb4:	20000598 	.word	0x20000598
 8000eb8:	0800cdbc 	.word	0x0800cdbc
 8000ebc:	20000678 	.word	0x20000678
 8000ec0:	0800ce0c 	.word	0x0800ce0c
 8000ec4:	200006c8 	.word	0x200006c8
 8000ec8:	0800ce5c 	.word	0x0800ce5c
 8000ecc:	20000718 	.word	0x20000718
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	20000590 	.word	0x20000590
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000828 	.word	0x20000828
 8000ee0:	20000964 	.word	0x20000964
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	2000080c 	.word	0x2000080c
 8000eec:	200002b4 	.word	0x200002b4
 8000ef0:	2000015c 	.word	0x2000015c
 8000ef4:	20000664 	.word	0x20000664
 8000ef8:	2000059c 	.word	0x2000059c
		{
			Packs[j].RSSI = adcData[j];
 8000efc:	4b5f      	ldr	r3, [pc, #380]	; (800107c <main+0x3ec>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b5e      	ldr	r3, [pc, #376]	; (800107c <main+0x3ec>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <main+0x3f0>)
 8000f0a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8000f0e:	4a5d      	ldr	r2, [pc, #372]	; (8001084 <main+0x3f4>)
 8000f10:	460b      	mov	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	440b      	add	r3, r1
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	801a      	strh	r2, [r3, #0]
			SummRSSI += Packs[j].RSSI;
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <main+0x3ec>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <main+0x3f4>)
 8000f26:	460b      	mov	r3, r1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b54      	ldr	r3, [pc, #336]	; (8001088 <main+0x3f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a53      	ldr	r2, [pc, #332]	; (8001088 <main+0x3f8>)
 8000f3c:	6013      	str	r3, [r2, #0]

//			if(Packs[j].RSSI > maxRSSI + LvlRSSI)
			if(Packs[j].RSSI > AvgRSSI + LvlRSSI)
 8000f3e:	4b4f      	ldr	r3, [pc, #316]	; (800107c <main+0x3ec>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <main+0x3f4>)
 8000f46:	460b      	mov	r3, r1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	440b      	add	r3, r1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b4d      	ldr	r3, [pc, #308]	; (800108c <main+0x3fc>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <main+0x400>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	440b      	add	r3, r1
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dd24      	ble.n	8000fae <main+0x31e>
//					Fnd_Idx = j;
//					Fnd_RSSI = maxRSSI;
//				}
//				else
//				{
					maxRSSI = Packs[j].RSSI;
 8000f64:	4b45      	ldr	r3, [pc, #276]	; (800107c <main+0x3ec>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4a46      	ldr	r2, [pc, #280]	; (8001084 <main+0x3f4>)
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	440b      	add	r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <main+0x404>)
 8000f7a:	801a      	strh	r2, [r3, #0]
					RX_Freq = Packs[j].RX_Freq;
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <main+0x3ec>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4a40      	ldr	r2, [pc, #256]	; (8001084 <main+0x3f4>)
 8000f84:	460b      	mov	r3, r1
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	440b      	add	r3, r1
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <main+0x408>)
 8000f94:	801a      	strh	r2, [r3, #0]
					Fnd_Idx = j;
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <main+0x3ec>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b3f      	ldr	r3, [pc, #252]	; (800109c <main+0x40c>)
 8000f9e:	701a      	strb	r2, [r3, #0]
					Fnd_Flag = 1;
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <main+0x410>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
					Fnd_RSSI = maxRSSI;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <main+0x404>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <main+0x414>)
 8000fac:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < i; j++)
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <main+0x3ec>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <main+0x3ec>)
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <main+0x3ec>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <main+0x418>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d39a      	bcc.n	8000efc <main+0x26c>
//				}
			}
		}

		AvgRSSI = SummRSSI/(i + 1);
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <main+0x3f8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <main+0x418>)
 8000fcc:	8812      	ldrh	r2, [r2, #0]
 8000fce:	3201      	adds	r2, #1
 8000fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <main+0x3fc>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		SummRSSI = AvgRSSI;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <main+0x3fc>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <main+0x3f8>)
 8000fe2:	601a      	str	r2, [r3, #0]
/*
	Тут имеем частоту RX_Freq которую надо подавить.
*/
		if(Fnd_Flag)
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <main+0x410>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03b      	beq.n	8001064 <main+0x3d4>
		{
			VTX1_PWR_ON;		// Включаем передатчик
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	482e      	ldr	r0, [pc, #184]	; (80010ac <main+0x41c>)
 8000ff2:	f002 fcf3 	bl	80039dc <HAL_GPIO_WritePin>

			PC13_Clr;
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffc:	482c      	ldr	r0, [pc, #176]	; (80010b0 <main+0x420>)
 8000ffe:	f002 fced 	bl	80039dc <HAL_GPIO_WritePin>

			HAL_Delay(750);	// задержка
 8001002:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001006:	f001 fa13 	bl	8002430 <HAL_Delay>
			}
		}
		else k = 0;
*/

			HAL_UART_MspInit(&huart2);
 800100a:	482a      	ldr	r0, [pc, #168]	; (80010b4 <main+0x424>)
 800100c:	f000 fb80 	bl	8001710 <HAL_UART_MspInit>
//		UART_Tx2Pin();
			HAL_Delay(1);	// задержка
 8001010:	2001      	movs	r0, #1
 8001012:	f001 fa0d 	bl	8002430 <HAL_Delay>
		InputTx2Pin();
		HAL_Delay(1);	// задержка
		HAL_UART_Receive(&huart2, receiveBuffer, 16, 30);
		HAL_Delay(10);	// задержка
*/
			HAL_UART_MspInit(&huart2);
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <main+0x424>)
 8001018:	f000 fb7a 	bl	8001710 <HAL_UART_MspInit>

//	    UART_Tx2Pin();
			HAL_Delay(1);	// задержка
 800101c:	2001      	movs	r0, #1
 800101e:	f001 fa07 	bl	8002430 <HAL_Delay>
//		HAL_UART_Transmit(&huart2,New_freq,16,5);
#ifdef Line_Scan
			Fill_Cmd_freq(RX_Freq);
#endif
#ifdef Fix_Scan
			Fill_Cmd_freq(Fix_Norm_freqs[Fnd_Idx]);
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <main+0x40c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <main+0x428>)
 800102a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fdf2 	bl	8000c18 <Fill_Cmd_freq>
#endif
#ifdef Full_Scan
			Fill_Cmd_freq(Full_Freqs[Fnd_Idx]);
#endif

			HAL_UART_Transmit(&huart2,command_start_freq,16,30);
 8001034:	231e      	movs	r3, #30
 8001036:	2210      	movs	r2, #16
 8001038:	4920      	ldr	r1, [pc, #128]	; (80010bc <main+0x42c>)
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <main+0x424>)
 800103c:	f007 f9cd 	bl	80083da <HAL_UART_Transmit>

// Тут влепить запуск сканера, оптрон на кнопку

			HAL_Delay(5000);	// задержка на работу глушилки
 8001040:	f241 3088 	movw	r0, #5000	; 0x1388
 8001044:	f001 f9f4 	bl	8002430 <HAL_Delay>
//			HAL_Delay(18000);	// задержка на работу глушилки



			PC13_Set;
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <main+0x420>)
 8001050:	f002 fcc4 	bl	80039dc <HAL_GPIO_WritePin>

			VTX1_PWR_OFF;		// Выключаем передатчик
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4814      	ldr	r0, [pc, #80]	; (80010ac <main+0x41c>)
 800105a:	f002 fcbf 	bl	80039dc <HAL_GPIO_WritePin>

			Fnd_Flag = 0;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <main+0x410>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(1);	// задержка
 8001064:	2001      	movs	r0, #1
 8001066:	f001 f9e3 	bl	8002430 <HAL_Delay>

		maxRSSI = AvgRSSI;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <main+0x3fc>)
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <main+0x404>)
 8001070:	801a      	strh	r2, [r3, #0]
		i = 0;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <main+0x418>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
	if(i < 40)
 8001078:	e6b5      	b.n	8000de6 <main+0x156>
 800107a:	bf00      	nop
 800107c:	20000594 	.word	0x20000594
 8001080:	2000059c 	.word	0x2000059c
 8001084:	200002b4 	.word	0x200002b4
 8001088:	20000670 	.word	0x20000670
 800108c:	20000008 	.word	0x20000008
 8001090:	2000000a 	.word	0x2000000a
 8001094:	2000066c 	.word	0x2000066c
 8001098:	20000674 	.word	0x20000674
 800109c:	2000066a 	.word	0x2000066a
 80010a0:	2000066b 	.word	0x2000066b
 80010a4:	20000668 	.word	0x20000668
 80010a8:	20000592 	.word	0x20000592
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020800 	.word	0x40020800
 80010b4:	20000964 	.word	0x20000964
 80010b8:	200006c8 	.word	0x200006c8
 80010bc:	2000001c 	.word	0x2000001c

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00b fe18 	bl	800cd04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <SystemClock_Config+0xc8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a26      	ldr	r2, [pc, #152]	; (8001188 <SystemClock_Config+0xc8>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <SystemClock_Config+0xc8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <SystemClock_Config+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a20      	ldr	r2, [pc, #128]	; (800118c <SystemClock_Config+0xcc>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <SystemClock_Config+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001126:	2302      	movs	r3, #2
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001130:	2319      	movs	r3, #25
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001134:	23c0      	movs	r3, #192	; 0xc0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800113c:	2304      	movs	r3, #4
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	4618      	mov	r0, r3
 8001146:	f005 fd15 	bl	8006b74 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001150:	f000 f81e 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001158:	2302      	movs	r3, #2
 800115a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800115c:	2390      	movs	r3, #144	; 0x90
 800115e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f005 ff77 	bl	8007064 <HAL_RCC_ClockConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800117c:	f000 f808 	bl	8001190 <Error_Handler>
  }
}
 8001180:	bf00      	nop
 8001182:	3750      	adds	r7, #80	; 0x50
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */
//  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
//  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <MX_SPI1_Init+0x6c>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_SPI1_Init+0x68>)
 80011b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_SPI1_Init+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_SPI1_Init+0x68>)
 80011be:	2202      	movs	r2, #2
 80011c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_SPI1_Init+0x68>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_SPI1_Init+0x68>)
 80011ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_SPI1_Init+0x68>)
 80011d2:	2230      	movs	r2, #48	; 0x30
 80011d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_SPI1_Init+0x68>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_SPI1_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_SPI1_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_SPI1_Init+0x68>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_SPI1_Init+0x68>)
 80011f0:	f006 f918 	bl	8007424 <HAL_SPI_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011fa:	f7ff ffc9 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000828 	.word	0x20000828
 8001208:	40013000 	.word	0x40013000

0800120c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_SPI2_Init+0x68>)
 8001212:	4a19      	ldr	r2, [pc, #100]	; (8001278 <MX_SPI2_Init+0x6c>)
 8001214:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_SPI2_Init+0x68>)
 8001218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800121c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_SPI2_Init+0x68>)
 8001220:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001224:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_SPI2_Init+0x68>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_SPI2_Init+0x68>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_SPI2_Init+0x68>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_SPI2_Init+0x68>)
 800123a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_SPI2_Init+0x68>)
 8001242:	2238      	movs	r2, #56	; 0x38
 8001244:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_SPI2_Init+0x68>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_SPI2_Init+0x68>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_SPI2_Init+0x68>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_SPI2_Init+0x68>)
 800125a:	220a      	movs	r2, #10
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_SPI2_Init+0x68>)
 8001260:	f006 f8e0 	bl	8007424 <HAL_SPI_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800126a:	f7ff ff91 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000880 	.word	0x20000880
 8001278:	40003800 	.word	0x40003800

0800127c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a3a      	ldr	r2, [pc, #232]	; (8001384 <HAL_SPI_MspInit+0x108>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d134      	bne.n	8001308 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e6:	2305      	movs	r3, #5
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4826      	ldr	r0, [pc, #152]	; (800138c <HAL_SPI_MspInit+0x110>)
 80012f2:	f002 f9ef 	bl	80036d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2023      	movs	r0, #35	; 0x23
 80012fc:	f001 fe0d 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001300:	2023      	movs	r0, #35	; 0x23
 8001302:	f001 fe26 	bl	8002f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001306:	e039      	b.n	800137c <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <HAL_SPI_MspInit+0x114>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d134      	bne.n	800137c <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_SPI_MspInit+0x10c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800134a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <HAL_SPI_MspInit+0x118>)
 8001368:	f002 f9b4 	bl	80036d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2024      	movs	r0, #36	; 0x24
 8001372:	f001 fdd2 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001376:	2024      	movs	r0, #36	; 0x24
 8001378:	f001 fdeb 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013000 	.word	0x40013000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40003800 	.word	0x40003800
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_MspInit+0x4c>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x4c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 ffdc 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  PC13_Xor;
  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001440:	2010      	movs	r0, #16
 8001442:	f002 faff 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
	I2C1_LED_Xor;
 8001446:	2120      	movs	r1, #32
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <EXTI4_IRQHandler+0x3c>)
 800144a:	f002 fae0 	bl	8003a0e <HAL_GPIO_TogglePin>
	if(CLK1_CNT < 24 ) CLK1_CNT++;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <EXTI4_IRQHandler+0x40>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b17      	cmp	r3, #23
 8001454:	d806      	bhi.n	8001464 <EXTI4_IRQHandler+0x28>
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <EXTI4_IRQHandler+0x40>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <EXTI4_IRQHandler+0x40>)
 8001460:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_MspDeInit(&hspi1);
		OutSPI1Pin();
		SPI1_SS_Dis;
	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001462:	e006      	b.n	8001472 <EXTI4_IRQHandler+0x36>
		OutSPI1Pin();
 8001464:	f7ff f836 	bl	80004d4 <OutSPI1Pin>
		SPI1_SS_Dis;
 8001468:	2201      	movs	r2, #1
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <EXTI4_IRQHandler+0x44>)
 800146e:	f002 fab5 	bl	80039dc <HAL_GPIO_WritePin>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020400 	.word	0x40020400
 800147c:	20000590 	.word	0x20000590
 8001480:	40020000 	.word	0x40020000

08001484 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <ADC_IRQHandler+0x1c>)
 800148a:	f001 f8f7 	bl	800267c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  TmpADC = HAL_ADC_GetValue(&hadc1);
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <ADC_IRQHandler+0x1c>)
 8001490:	f001 fa04 	bl	800289c <HAL_ADC_GetValue>
 8001494:	4603      	mov	r3, r0
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <ADC_IRQHandler+0x20>)
 8001498:	6013      	str	r3, [r2, #0]

  /* USER CODE END ADC_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000015c 	.word	0x2000015c
 80014a4:	20000664 	.word	0x20000664

080014a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <TIM2_IRQHandler+0x10>)
 80014ae:	f006 fbaa 	bl	8007c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200008d8 	.word	0x200008d8

080014bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <I2C1_EV_IRQHandler+0x10>)
 80014c2:	f002 fc27 	bl	8003d14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000020c 	.word	0x2000020c

080014d0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <I2C1_ER_IRQHandler+0x10>)
 80014d6:	f002 fd70 	bl	8003fba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000020c 	.word	0x2000020c

080014e4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <I2C2_EV_IRQHandler+0x10>)
 80014ea:	f002 fc13 	bl	8003d14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000260 	.word	0x20000260

080014f8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <I2C2_ER_IRQHandler+0x10>)
 80014fe:	f002 fd5c 	bl	8003fba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000260 	.word	0x20000260

0800150c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <SPI1_IRQHandler+0x10>)
 8001512:	f006 f94d 	bl	80077b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000828 	.word	0x20000828

08001520 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <SPI2_IRQHandler+0x10>)
 8001526:	f006 f943 	bl	80077b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000880 	.word	0x20000880

08001534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <USART1_IRQHandler+0x10>)
 800153a:	f007 f883 	bl	8008644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000920 	.word	0x20000920

08001548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <USART2_IRQHandler+0x10>)
 800154e:	f007 f879 	bl	8008644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000964 	.word	0x20000964

0800155c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA2_Stream0_IRQHandler+0x10>)
 8001562:	f001 fe6d 	bl	8003240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001a4 	.word	0x200001a4

08001570 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <OTG_FS_IRQHandler+0x10>)
 8001576:	f004 f9d0 	bl	800591a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20001e8c 	.word	0x20001e8c

08001584 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM2_Init+0x94>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM2_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM2_Init+0x94>)
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <MX_TIM2_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_TIM2_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <MX_TIM2_Init+0x94>)
 80015ca:	f006 facd 	bl	8007b68 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015d4:	f7ff fddc 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM2_Init+0x94>)
 80015e6:	f006 fc16 	bl	8007e16 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015f0:	f7ff fdce 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM2_Init+0x94>)
 8001602:	f006 fe1b 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800160c:	f7ff fdc0 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200008d8 	.word	0x200008d8

0800161c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d115      	bne.n	800165a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_TIM_Base_MspInit+0x48>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_TIM_Base_MspInit+0x48>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	201c      	movs	r0, #28
 8001650:	f001 fc63 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001654:	201c      	movs	r0, #28
 8001656:	f001 fc7c 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_USART1_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001674:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001690:	220c      	movs	r2, #12
 8001692:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_USART1_UART_Init+0x4c>)
 80016a2:	f006 fe4d 	bl	8008340 <HAL_UART_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80016ac:	f7ff fd70 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000920 	.word	0x20000920
 80016b8:	40011000 	.word	0x40011000

080016bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f006 fe24 	bl	8008340 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f7ff fd47 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000964 	.word	0x20000964
 800170c:	40004400 	.word	0x40004400

08001710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <HAL_UART_MspInit+0x108>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d134      	bne.n	800179c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_UART_MspInit+0x10c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_UART_MspInit+0x10c>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_UART_MspInit+0x10c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_UART_MspInit+0x10c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_UART_MspInit+0x10c>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_UART_MspInit+0x10c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177a:	2307      	movs	r3, #7
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4826      	ldr	r0, [pc, #152]	; (8001820 <HAL_UART_MspInit+0x110>)
 8001786:	f001 ffa5 	bl	80036d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2025      	movs	r0, #37	; 0x25
 8001790:	f001 fbc3 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001794:	2025      	movs	r0, #37	; 0x25
 8001796:	f001 fbdc 	bl	8002f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800179a:	e038      	b.n	800180e <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_UART_MspInit+0x114>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d133      	bne.n	800180e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a1b      	ldr	r2, [pc, #108]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_UART_MspInit+0x10c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017de:	230c      	movs	r3, #12
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ee:	2307      	movs	r3, #7
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_UART_MspInit+0x118>)
 80017fa:	f001 ff6b 	bl	80036d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2026      	movs	r0, #38	; 0x26
 8001804:	f001 fb89 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001808:	2026      	movs	r0, #38	; 0x26
 800180a:	f001 fba2 	bl	8002f52 <HAL_NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3730      	adds	r7, #48	; 0x30
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40011000 	.word	0x40011000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40004400 	.word	0x40004400
 8001828:	40020000 	.word	0x40020000

0800182c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <MX_FATFS_Init+0x18>)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_FATFS_Init+0x1c>)
 8001834:	f009 fad4 	bl	800ade0 <FATFS_LinkDriver>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <MX_FATFS_Init+0x20>)
 800183e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200009ac 	.word	0x200009ac
 8001848:	20000030 	.word	0x20000030
 800184c:	200009a8 	.word	0x200009a8

08001850 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <USER_initialize+0x24>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <USER_initialize+0x24>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000002c 	.word	0x2000002c

08001878 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <USER_status+0x24>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
    return Stat;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <USER_status+0x24>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000002c 	.word	0x2000002c

080018a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80018b0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80018ce:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	603a      	str	r2, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	460b      	mov	r3, r1
 80018ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
    return res;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192a:	f000 fcfd 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f00b f9f1 	bl	800cd14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff f9ad 	bl	8000c90 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8001944:	0800cf80 	.word	0x0800cf80
  ldr r2, =_sbss
 8001948:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 800194c:	200025cc 	.word	0x200025cc

08001950 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <DMA1_Stream0_IRQHandler>
	...

08001954 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8001958:	2200      	movs	r2, #0
 800195a:	4912      	ldr	r1, [pc, #72]	; (80019a4 <MX_USB_DEVICE_Init+0x50>)
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_USB_DEVICE_Init+0x54>)
 800195e:	f009 fedf 	bl	800b720 <USBD_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8001968:	f7ff fc12 	bl	8001190 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800196c:	490f      	ldr	r1, [pc, #60]	; (80019ac <MX_USB_DEVICE_Init+0x58>)
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MX_USB_DEVICE_Init+0x54>)
 8001970:	f009 ff06 	bl	800b780 <USBD_RegisterClass>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800197a:	f7ff fc09 	bl	8001190 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800197e:	490c      	ldr	r1, [pc, #48]	; (80019b0 <MX_USB_DEVICE_Init+0x5c>)
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <MX_USB_DEVICE_Init+0x54>)
 8001982:	f009 fe3d 	bl	800b600 <USBD_CDC_RegisterInterface>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800198c:	f7ff fc00 	bl	8001190 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USB_DEVICE_Init+0x54>)
 8001992:	f009 ff2b 	bl	800b7ec <USBD_Start>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800199c:	f7ff fbf8 	bl	8001190 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000058 	.word	0x20000058
 80019a8:	200009b0 	.word	0x200009b0
 80019ac:	200000c0 	.word	0x200000c0
 80019b0:	20000044 	.word	0x20000044

080019b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	4905      	ldr	r1, [pc, #20]	; (80019d0 <CDC_Init_FS+0x1c>)
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <CDC_Init_FS+0x20>)
 80019be:	f009 fe39 	bl	800b634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80019c2:	4905      	ldr	r1, [pc, #20]	; (80019d8 <CDC_Init_FS+0x24>)
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <CDC_Init_FS+0x20>)
 80019c6:	f009 fe57 	bl	800b678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80019ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000148c 	.word	0x2000148c
 80019d4:	200009b0 	.word	0x200009b0
 80019d8:	20000c8c 	.word	0x20000c8c

080019dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80019e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b23      	cmp	r3, #35	; 0x23
 8001a00:	d84a      	bhi.n	8001a98 <CDC_Control_FS+0xac>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <CDC_Control_FS+0x1c>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a99 	.word	0x08001a99
 8001a0c:	08001a99 	.word	0x08001a99
 8001a10:	08001a99 	.word	0x08001a99
 8001a14:	08001a99 	.word	0x08001a99
 8001a18:	08001a99 	.word	0x08001a99
 8001a1c:	08001a99 	.word	0x08001a99
 8001a20:	08001a99 	.word	0x08001a99
 8001a24:	08001a99 	.word	0x08001a99
 8001a28:	08001a99 	.word	0x08001a99
 8001a2c:	08001a99 	.word	0x08001a99
 8001a30:	08001a99 	.word	0x08001a99
 8001a34:	08001a99 	.word	0x08001a99
 8001a38:	08001a99 	.word	0x08001a99
 8001a3c:	08001a99 	.word	0x08001a99
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001a99 	.word	0x08001a99
 8001a48:	08001a99 	.word	0x08001a99
 8001a4c:	08001a99 	.word	0x08001a99
 8001a50:	08001a99 	.word	0x08001a99
 8001a54:	08001a99 	.word	0x08001a99
 8001a58:	08001a99 	.word	0x08001a99
 8001a5c:	08001a99 	.word	0x08001a99
 8001a60:	08001a99 	.word	0x08001a99
 8001a64:	08001a99 	.word	0x08001a99
 8001a68:	08001a99 	.word	0x08001a99
 8001a6c:	08001a99 	.word	0x08001a99
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	08001a99 	.word	0x08001a99
 8001a78:	08001a99 	.word	0x08001a99
 8001a7c:	08001a99 	.word	0x08001a99
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001a99 	.word	0x08001a99
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001a99 	.word	0x08001a99
 8001a90:	08001a99 	.word	0x08001a99
 8001a94:	08001a99 	.word	0x08001a99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8001a98:	bf00      	nop
  }

  return (USBD_OK);
 8001a9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <CDC_Receive_FS+0x24>)
 8001ab6:	f009 fddf 	bl	800b678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001aba:	4804      	ldr	r0, [pc, #16]	; (8001acc <CDC_Receive_FS+0x24>)
 8001abc:	f009 fdfa 	bl	800b6b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8001ac0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200009b0 	.word	0x200009b0

08001ad0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8001ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2212      	movs	r2, #18
 8001b04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001b06:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	20000074 	.word	0x20000074

08001b18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000088 	.word	0x20000088

08001b3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <USBD_FS_ProductStrDescriptor+0x34>)
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <USBD_FS_ProductStrDescriptor+0x38>)
 8001b54:	f00a fff6 	bl	800cb44 <USBD_GetString>
 8001b58:	e004      	b.n	8001b64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <USBD_FS_ProductStrDescriptor+0x34>)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <USBD_FS_ProductStrDescriptor+0x38>)
 8001b60:	f00a fff0 	bl	800cb44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20001c8c 	.word	0x20001c8c
 8001b74:	0800cd74 	.word	0x0800cd74

08001b78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4904      	ldr	r1, [pc, #16]	; (8001b98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8001b8a:	f00a ffdb 	bl	800cb44 <USBD_GetString>
  return USBD_StrDesc;
 8001b8e:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20001c8c 	.word	0x20001c8c
 8001b9c:	0800cd8c 	.word	0x0800cd8c

08001ba0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	221a      	movs	r2, #26
 8001bb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001bb2:	f000 f843 	bl	8001c3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001bb6:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000008c 	.word	0x2000008c

08001bc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001bda:	4808      	ldr	r0, [pc, #32]	; (8001bfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8001bdc:	f00a ffb2 	bl	800cb44 <USBD_GetString>
 8001be0:	e004      	b.n	8001bec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8001be8:	f00a ffac 	bl	800cb44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001c8c 	.word	0x20001c8c
 8001bfc:	0800cda0 	.word	0x0800cda0

08001c00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001c18:	f00a ff94 	bl	800cb44 <USBD_GetString>
 8001c1c:	e004      	b.n	8001c28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4904      	ldr	r1, [pc, #16]	; (8001c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001c24:	f00a ff8e 	bl	800cb44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001c8c 	.word	0x20001c8c
 8001c38:	0800cdac 	.word	0x0800cdac

08001c3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <Get_SerialNum+0x44>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <Get_SerialNum+0x48>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <Get_SerialNum+0x4c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001c62:	2208      	movs	r2, #8
 8001c64:	4909      	ldr	r1, [pc, #36]	; (8001c8c <Get_SerialNum+0x50>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f814 	bl	8001c94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <Get_SerialNum+0x54>)
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f000 f80f 	bl	8001c94 <IntToUnicode>
  }
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	1fff7a10 	.word	0x1fff7a10
 8001c84:	1fff7a14 	.word	0x1fff7a14
 8001c88:	1fff7a18 	.word	0x1fff7a18
 8001c8c:	2000008e 	.word	0x2000008e
 8001c90:	2000009e 	.word	0x2000009e

08001c94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]
 8001caa:	e027      	b.n	8001cfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	0f1b      	lsrs	r3, r3, #28
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d80b      	bhi.n	8001ccc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	0f1b      	lsrs	r3, r3, #28
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3230      	adds	r2, #48	; 0x30
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e00a      	b.n	8001ce2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	0f1b      	lsrs	r3, r3, #28
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	440b      	add	r3, r1
 8001cdc:	3237      	adds	r2, #55	; 0x37
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3301      	adds	r3, #1
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	7dfa      	ldrb	r2, [r7, #23]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3d3      	bcc.n	8001cac <IntToUnicode+0x18>
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d34:	d13a      	bne.n	8001dac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d64:	230a      	movs	r3, #10
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4812      	ldr	r0, [pc, #72]	; (8001db8 <HAL_PCD_MspInit+0xa4>)
 8001d70:	f001 fcb0 	bl	80036d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7e:	6353      	str	r3, [r2, #52]	; 0x34
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_PCD_MspInit+0xa0>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2043      	movs	r0, #67	; 0x43
 8001da2:	f001 f8ba 	bl	8002f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001da6:	2043      	movs	r0, #67	; 0x43
 8001da8:	f001 f8d3 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f009 fd57 	bl	800b886 <USBD_LL_SetupStage>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f009 fd91 	bl	800b930 <USBD_LL_DataOutStage>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	334c      	adds	r3, #76	; 0x4c
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f009 fe2a 	bl	800ba96 <USBD_LL_DataInStage>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f009 ff5e 	bl	800bd1a <USBD_LL_SOF>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d001      	beq.n	8001e7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001e7a:	f7ff f989 	bl	8001190 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f009 ff08 	bl	800bc9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001e94:	4618      	mov	r0, r3
 8001e96:	f009 feb0 	bl	800bbfa <USBD_LL_Reset>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f009 ff03 	bl	800bcbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_PCD_SuspendCallback+0x48>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_PCD_SuspendCallback+0x48>)
 8001ede:	f043 0306 	orr.w	r3, r3, #6
 8001ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001efe:	4618      	mov	r0, r3
 8001f00:	f009 fef3 	bl	800bcea <USBD_LL_Resume>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f009 ff4b 	bl	800bdbe <USBD_LL_IsoOUTIncomplete>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f009 ff07 	bl	800bd5a <USBD_LL_IsoINIncomplete>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001f62:	4618      	mov	r0, r3
 8001f64:	f009 ff5d 	bl	800be22 <USBD_LL_DevConnected>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f009 ff5a 	bl	800be38 <USBD_LL_DevDisconnected>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d13c      	bne.n	8002016 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001f9c:	4a20      	ldr	r2, [pc, #128]	; (8002020 <USBD_LL_Init+0x94>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <USBD_LL_Init+0x94>)
 8001fa8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <USBD_LL_Init+0x94>)
 8001fae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001fb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <USBD_LL_Init+0x94>)
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <USBD_LL_Init+0x94>)
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <USBD_LL_Init+0x94>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <USBD_LL_Init+0x94>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <USBD_LL_Init+0x94>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <USBD_LL_Init+0x94>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <USBD_LL_Init+0x94>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <USBD_LL_Init+0x94>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <USBD_LL_Init+0x94>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <USBD_LL_Init+0x94>)
 8001fec:	f003 fb45 	bl	800567a <HAL_PCD_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8001ff6:	f7ff f8cb 	bl	8001190 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	4808      	ldr	r0, [pc, #32]	; (8002020 <USBD_LL_Init+0x94>)
 8001ffe:	f004 fd9c 	bl	8006b3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	2100      	movs	r1, #0
 8002006:	4806      	ldr	r0, [pc, #24]	; (8002020 <USBD_LL_Init+0x94>)
 8002008:	f004 fd50 	bl	8006aac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	2101      	movs	r1, #1
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <USBD_LL_Init+0x94>)
 8002012:	f004 fd4b 	bl	8006aac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20001e8c 	.word	0x20001e8c

08002024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fc3a 	bl	80058b4 <HAL_PCD_Start>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f942 	bl	80022d0 <USBD_Get_USB_Status>
 800204c:	4603      	mov	r3, r0
 800204e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002050:	7bbb      	ldrb	r3, [r7, #14]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4603      	mov	r3, r0
 800206a:	70fb      	strb	r3, [r7, #3]
 800206c:	460b      	mov	r3, r1
 800206e:	70bb      	strb	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8002082:	78bb      	ldrb	r3, [r7, #2]
 8002084:	883a      	ldrh	r2, [r7, #0]
 8002086:	78f9      	ldrb	r1, [r7, #3]
 8002088:	f004 f90b 	bl	80062a2 <HAL_PCD_EP_Open>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f91c 	bl	80022d0 <USBD_Get_USB_Status>
 8002098:	4603      	mov	r3, r0
 800209a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800209c:	7bbb      	ldrb	r3, [r7, #14]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 f954 	bl	8006372 <HAL_PCD_EP_Close>
 80020ca:	4603      	mov	r3, r0
 80020cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f8fd 	bl	80022d0 <USBD_Get_USB_Status>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80020da:	7bbb      	ldrb	r3, [r7, #14]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f004 fa2c 	bl	8006560 <HAL_PCD_EP_SetStall>
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f8de 	bl	80022d0 <USBD_Get_USB_Status>
 8002114:	4603      	mov	r3, r0
 8002116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002118:	7bbb      	ldrb	r3, [r7, #14]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fa71 	bl	8006628 <HAL_PCD_EP_ClrStall>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f8bf 	bl	80022d0 <USBD_Get_USB_Status>
 8002152:	4603      	mov	r3, r0
 8002154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002156:	7bbb      	ldrb	r3, [r7, #14]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8002172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0b      	bge.n	8002194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	333e      	adds	r3, #62	; 0x3e
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	e00b      	b.n	80021ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80021aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f83e 	bl	8006258 <HAL_PCD_SetAddress>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f874 	bl	80022d0 <USBD_Get_USB_Status>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	460b      	mov	r3, r1
 8002204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8002214:	7af9      	ldrb	r1, [r7, #11]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	f004 f957 	bl	80064cc <HAL_PCD_EP_Transmit>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f853 	bl	80022d0 <USBD_Get_USB_Status>
 800222a:	4603      	mov	r3, r0
 800222c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800222e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8002256:	7af9      	ldrb	r1, [r7, #11]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	f004 f8d3 	bl	8006406 <HAL_PCD_EP_Receive>
 8002260:	4603      	mov	r3, r0
 8002262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f832 	bl	80022d0 <USBD_Get_USB_Status>
 800226c:	4603      	mov	r3, r0
 800226e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002270:	7dbb      	ldrb	r3, [r7, #22]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f004 f903 	bl	800649c <HAL_PCD_EP_GetRxCount>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <USBD_static_malloc+0x18>)
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20002398 	.word	0x20002398

080022bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d817      	bhi.n	8002314 <USBD_Get_USB_Status+0x44>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <USBD_Get_USB_Status+0x1c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	08002309 	.word	0x08002309
 80022f8:	0800230f 	.word	0x0800230f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
    break;
 8002300:	e00b      	b.n	800231a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8002302:	2303      	movs	r3, #3
 8002304:	73fb      	strb	r3, [r7, #15]
    break;
 8002306:	e008      	b.n	800231a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
    break;
 800230c:	e005      	b.n	800231a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800230e:	2303      	movs	r3, #3
 8002310:	73fb      	strb	r3, [r7, #15]
    break;
 8002312:	e002      	b.n	800231a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002314:	2303      	movs	r3, #3
 8002316:	73fb      	strb	r3, [r7, #15]
    break;
 8002318:	bf00      	nop
  }
  return usb_status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 fdc5 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	200f      	movs	r0, #15
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff f80a 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fddd 	bl	8002f6e <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 fda5 	bl	8002f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200000a8 	.word	0x200000a8
 80023e8:	200000b0 	.word	0x200000b0
 80023ec:	200000ac 	.word	0x200000ac

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200000b0 	.word	0x200000b0
 8002414:	200025b8 	.word	0x200025b8

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200025b8 	.word	0x200025b8

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200000b0 	.word	0x200000b0

08002478 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e033      	b.n	80024f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe f8e4 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fb44 	bl	8002b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
 80024e6:	e001      	b.n	80024ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_Start_IT+0x1a>
 8002516:	2302      	movs	r3, #2
 8002518:	e0a1      	b.n	800265e <HAL_ADC_Start_IT+0x15e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d018      	beq.n	8002562 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002540:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_ADC_Start_IT+0x16c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_ADC_Start_IT+0x170>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9a      	lsrs	r2, r3, #18
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002554:	e002      	b.n	800255c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	3b01      	subs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d169      	bne.n	8002644 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d106      	bne.n	80025be <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f023 0206 	bic.w	r2, r3, #6
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_ADC_Start_IT+0x174>)
 80025ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025d8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e8:	f043 0320 	orr.w	r3, r3, #32
 80025ec:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d129      	bne.n	800265c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e020      	b.n	800265c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_ADC_Start_IT+0x178>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d11b      	bne.n	800265c <HAL_ADC_Start_IT+0x15c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d114      	bne.n	800265c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	e00b      	b.n	800265c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	200000a8 	.word	0x200000a8
 8002670:	431bde83 	.word	0x431bde83
 8002674:	40012300 	.word	0x40012300
 8002678:	40012000 	.word	0x40012000

0800267c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d049      	beq.n	8002746 <HAL_ADC_IRQHandler+0xca>
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d046      	beq.n	8002746 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d12b      	bne.n	8002736 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d127      	bne.n	8002736 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d119      	bne.n	8002736 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0220 	bic.w	r2, r2, #32
 8002710:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8bd 	bl	80028b6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0212 	mvn.w	r2, #18
 8002744:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d057      	beq.n	800280c <HAL_ADC_IRQHandler+0x190>
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d054      	beq.n	800280c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d139      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d12b      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d124      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d119      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 faa7 	bl	8002d50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 020c 	mvn.w	r2, #12
 800280a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <HAL_ADC_IRQHandler+0x1d6>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d014      	beq.n	8002852 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f841 	bl	80028ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0201 	mvn.w	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002860:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_ADC_IRQHandler+0x218>
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0220 	mvn.w	r2, #32
 8002882:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f82a 	bl	80028de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0220 	mvn.w	r2, #32
 8002892:	601a      	str	r2, [r3, #0]
  }
}
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e113      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x244>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b09      	cmp	r3, #9
 800291e:	d925      	bls.n	800296c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68d9      	ldr	r1, [r3, #12]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	3b1e      	subs	r3, #30
 8002936:	2207      	movs	r2, #7
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43da      	mvns	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	400a      	ands	r2, r1
 8002944:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68d9      	ldr	r1, [r3, #12]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	4603      	mov	r3, r0
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4403      	add	r3, r0
 800295e:	3b1e      	subs	r3, #30
 8002960:	409a      	lsls	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	e022      	b.n	80029b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6919      	ldr	r1, [r3, #16]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	2207      	movs	r2, #7
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	400a      	ands	r2, r1
 800298e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4403      	add	r3, r0
 80029a8:	409a      	lsls	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b06      	cmp	r3, #6
 80029b8:	d824      	bhi.n	8002a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b05      	subs	r3, #5
 80029cc:	221f      	movs	r2, #31
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	400a      	ands	r2, r1
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	3b05      	subs	r3, #5
 80029f6:	fa00 f203 	lsl.w	r2, r0, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34
 8002a02:	e04c      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	d824      	bhi.n	8002a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b23      	subs	r3, #35	; 0x23
 8002a1e:	221f      	movs	r2, #31
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b23      	subs	r3, #35	; 0x23
 8002a48:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
 8002a54:	e023      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b41      	subs	r3, #65	; 0x41
 8002a68:	221f      	movs	r2, #31
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b41      	subs	r3, #65	; 0x41
 8002a92:	fa00 f203 	lsl.w	r2, r0, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_ADC_ConfigChannel+0x250>)
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <HAL_ADC_ConfigChannel+0x254>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10f      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d8>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b12      	cmp	r3, #18
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_ADC_ConfigChannel+0x254>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12b      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x23a>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_ADC_ConfigChannel+0x258>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b11      	cmp	r3, #17
 8002ae6:	d122      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_ADC_ConfigChannel+0x258>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d111      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_ADC_ConfigChannel+0x25c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_ADC_ConfigChannel+0x260>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9a      	lsrs	r2, r3, #18
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012300 	.word	0x40012300
 8002b48:	40012000 	.word	0x40012000
 8002b4c:	10000012 	.word	0x10000012
 8002b50:	200000a8 	.word	0x200000a8
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b60:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <ADC_Init+0x1f0>)
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <ADC_Init+0x1f4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e00f      	b.n	8002c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0202 	bic.w	r2, r2, #2
 8002c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7e1b      	ldrb	r3, [r3, #24]
 8002c70:	005a      	lsls	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	035a      	lsls	r2, r3, #13
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e007      	b.n	8002ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	051a      	lsls	r2, r3, #20
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0e:	025a      	lsls	r2, r3, #9
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	029a      	lsls	r2, r3, #10
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40012300 	.word	0x40012300
 8002d4c:	0f000001 	.word	0x0f000001

08002d50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed0:	d301      	bcc.n	8002ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e00f      	b.n	8002ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <SysTick_Config+0x40>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ede:	210f      	movs	r1, #15
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee4:	f7ff ff8e 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <SysTick_Config+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <SysTick_Config+0x40>)
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	e000e010 	.word	0xe000e010

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff29 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff3e 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff8e 	bl	8002e58 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff31 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa2 	bl	8002ec0 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e00e      	b.n	8002fb6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	795b      	ldrb	r3, [r3, #5]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d105      	bne.n	8002fae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fbef 	bl	800078c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fa24 	bl	8002418 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e099      	b.n	8003110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ffc:	e00f      	b.n	800301e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffe:	f7ff fa0b 	bl	8002418 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b05      	cmp	r3, #5
 800300a:	d908      	bls.n	800301e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e078      	b.n	8003110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e8      	bne.n	8002ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_DMA_Init+0x158>)
 8003038:	4013      	ands	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d117      	bne.n	80030e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa89 	bl	80035dc <DMA_CheckFifoParam>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030de:	2301      	movs	r3, #1
 80030e0:	e016      	b.n	8003110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa40 	bl	8003570 <DMA_CalcBaseAndBitshift>
 80030f0:	4603      	mov	r3, r0
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f8:	223f      	movs	r2, #63	; 0x3f
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	f010803f 	.word	0xf010803f

0800311c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7ff f975 	bl	8002418 <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e052      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_Abort+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0201 	bic.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319e:	e013      	b.n	80031c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a0:	f7ff f93a 	bl	8002418 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d90c      	bls.n	80031c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e015      	b.n	80031f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	223f      	movs	r2, #63	; 0x3f
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d004      	beq.n	800321a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00c      	b.n	8003234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800324c:	4b8e      	ldr	r3, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x248>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a8e      	ldr	r2, [pc, #568]	; (800348c <HAL_DMA_IRQHandler+0x24c>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0a9b      	lsrs	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2208      	movs	r2, #8
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01a      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2208      	movs	r2, #8
 800329a:	409a      	lsls	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2201      	movs	r2, #1
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0202 	orr.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2204      	movs	r2, #4
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2204      	movs	r2, #4
 8003306:	409a      	lsls	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2210      	movs	r2, #16
 800331e:	409a      	lsls	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d043      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03c      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2210      	movs	r2, #16
 800333c:	409a      	lsls	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
 800336e:	e01f      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
 8003380:	e016      	b.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d107      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0208 	bic.w	r2, r2, #8
 800339e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2220      	movs	r2, #32
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 808f 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8087 	beq.w	80034e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	2220      	movs	r2, #32
 80033d8:	409a      	lsls	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	d136      	bne.n	8003458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0216 	bic.w	r2, r2, #22
 80033f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_DMA_IRQHandler+0x1da>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0208 	bic.w	r2, r2, #8
 8003428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	223f      	movs	r2, #63	; 0x3f
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d07e      	beq.n	800354c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
        }
        return;
 8003456:	e079      	b.n	800354c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01d      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10d      	bne.n	8003490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	2b00      	cmp	r3, #0
 800347a:	d031      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e02c      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
 8003486:	bf00      	nop
 8003488:	200000a8 	.word	0x200000a8
 800348c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e01e      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10f      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0210 	bic.w	r2, r2, #16
 80034be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d032      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d307      	bcc.n	8003528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f2      	bne.n	800350c <HAL_DMA_IRQHandler+0x2cc>
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
 800354a:	e000      	b.n	800354e <HAL_DMA_IRQHandler+0x30e>
        return;
 800354c:	bf00      	nop
    }
  }
}
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003562:	b2db      	uxtb	r3, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	3b10      	subs	r3, #16
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <DMA_CalcBaseAndBitshift+0x68>)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d909      	bls.n	80035b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58
 80035b0:	e007      	b.n	80035c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	aaaaaaab 	.word	0xaaaaaaab
 80035d8:	0800cf68 	.word	0x0800cf68

080035dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d856      	bhi.n	80036aa <DMA_CheckFifoParam+0xce>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <DMA_CheckFifoParam+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003627 	.word	0x08003627
 800360c:	08003615 	.word	0x08003615
 8003610:	080036ab 	.word	0x080036ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d046      	beq.n	80036ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003624:	e043      	b.n	80036ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362e:	d140      	bne.n	80036b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e03d      	b.n	80036b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363e:	d121      	bne.n	8003684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d837      	bhi.n	80036b6 <DMA_CheckFifoParam+0xda>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <DMA_CheckFifoParam+0x70>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	0800365d 	.word	0x0800365d
 8003650:	08003663 	.word	0x08003663
 8003654:	0800365d 	.word	0x0800365d
 8003658:	08003675 	.word	0x08003675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e030      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003672:	e022      	b.n	80036ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003682:	e01c      	b.n	80036be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d903      	bls.n	8003692 <DMA_CheckFifoParam+0xb6>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d003      	beq.n	8003698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003690:	e018      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      break;
 8003696:	e015      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e00b      	b.n	80036c2 <DMA_CheckFifoParam+0xe6>
      break;
 80036aa:	bf00      	nop
 80036ac:	e00a      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e008      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e006      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036b6:	bf00      	nop
 80036b8:	e004      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e002      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036be:	bf00      	nop
 80036c0:	e000      	b.n	80036c4 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
    }
  } 
  
  return status; 
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop

080036d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e159      	b.n	80039a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f0:	2201      	movs	r2, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	f040 8148 	bne.w	800399e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d005      	beq.n	8003726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	2b02      	cmp	r3, #2
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a2 	beq.w	800399e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	4b57      	ldr	r3, [pc, #348]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 8003864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003868:	6453      	str	r3, [r2, #68]	; 0x44
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <HAL_GPIO_Init+0x2e8>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a52      	ldr	r2, [pc, #328]	; (80039c0 <HAL_GPIO_Init+0x2ec>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <HAL_GPIO_Init+0x2f0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d019      	beq.n	80038d6 <HAL_GPIO_Init+0x202>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_GPIO_Init+0x2f4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d013      	beq.n	80038d2 <HAL_GPIO_Init+0x1fe>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_GPIO_Init+0x2f8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_GPIO_Init+0x1fa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_GPIO_Init+0x2fc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d007      	beq.n	80038ca <HAL_GPIO_Init+0x1f6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <HAL_GPIO_Init+0x300>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_GPIO_Init+0x1f2>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038c6:	2307      	movs	r3, #7
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x204>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_GPIO_Init+0x2ec>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f6:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <HAL_GPIO_Init+0x304>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003944:	4a24      	ldr	r2, [pc, #144]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_GPIO_Init+0x304>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003998:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <HAL_GPIO_Init+0x304>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f aea2 	bls.w	80036f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f8:	e003      	b.n	8003a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	041a      	lsls	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a20:	887a      	ldrh	r2, [r7, #2]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4013      	ands	r3, r2
 8003a26:	041a      	lsls	r2, r3, #16
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43d9      	mvns	r1, r3
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	400b      	ands	r3, r1
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	619a      	str	r2, [r3, #24]
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f806 	bl	8003a74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40013c00 	.word	0x40013c00

08003a74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12b      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fc ffe2 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af0:	f003 fc70 	bl	80073d4 <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a81      	ldr	r2, [pc, #516]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d807      	bhi.n	8003b10 <HAL_I2C_Init+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_I2C_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e006      	b.n	8003b1e <HAL_I2C_Init+0x92>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_I2C_Init+0x27c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a78      	ldr	r2, [pc, #480]	; (8003d0c <HAL_I2C_Init+0x280>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <HAL_I2C_Init+0xd4>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <HAL_I2C_Init+0xe8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_I2C_Init+0x284>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495c      	ldr	r1, [pc, #368]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d819      	bhi.n	8003bc8 <HAL_I2C_Init+0x13c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e59      	subs	r1, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba8:	400b      	ands	r3, r1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_I2C_Init+0x138>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	e051      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e04f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_I2C_Init+0x168>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e012      	b.n	8003c1a <HAL_I2C_Init+0x18e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x196>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_I2C_Init+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e58      	subs	r0, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6809      	ldr	r1, [r1, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6911      	ldr	r1, [r2, #16]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	001e847f 	.word	0x001e847f
 8003d08:	003d08ff 	.word	0x003d08ff
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d003      	beq.n	8003d4c <HAL_I2C_EV_IRQHandler+0x38>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b40      	cmp	r3, #64	; 0x40
 8003d48:	f040 80b1 	bne.w	8003eae <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d6c:	d003      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x62>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d74:	d101      	bne.n	8003d7a <HAL_I2C_EV_IRQHandler+0x66>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_I2C_EV_IRQHandler+0x68>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f000 8114 	beq.w	8003faa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_I2C_EV_IRQHandler+0x90>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 fc54 	bl	8005644 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fd5e 	bl	800485e <I2C_Master_SB>
 8003da2:	e083      	b.n	8003eac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <HAL_I2C_EV_IRQHandler+0xac>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fdd6 	bl	800496a <I2C_Master_ADD10>
 8003dbe:	e075      	b.n	8003eac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0xc8>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fdf2 	bl	80049be <I2C_Master_ADDR>
 8003dda:	e067      	b.n	8003eac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d036      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df4:	f000 80db 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x10a>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_I2C_EV_IRQHandler+0x10a>
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d103      	bne.n	8003e1e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9d6 	bl	80041c8 <I2C_MasterTransmit_TXE>
 8003e1c:	e046      	b.n	8003eac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80c2 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80bc 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e36:	7bbb      	ldrb	r3, [r7, #14]
 8003e38:	2b21      	cmp	r3, #33	; 0x21
 8003e3a:	d103      	bne.n	8003e44 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa5f 	bl	8004300 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	e0b4      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	f040 80b1 	bne.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 facd 	bl	80043ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e52:	e0ac      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	f000 80a4 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_I2C_EV_IRQHandler+0x178>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_I2C_EV_IRQHandler+0x178>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fb45 	bl	8004514 <I2C_MasterReceive_RXNE>
 8003e8a:	e00f      	b.n	8003eac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 808b 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8085 	beq.w	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fbf0 	bl	800468a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eaa:	e080      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
 8003eac:	e07f      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e007      	b.n	8003ed0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x1ea>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 ffb0 	bl	8004e5c <I2C_Slave_ADDR>
 8003efc:	e05a      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x206>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 ffea 	bl	8004eec <I2C_Slave_STOPF>
 8003f18:	e04c      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f1a:	7bbb      	ldrb	r3, [r7, #14]
 8003f1c:	2b21      	cmp	r3, #33	; 0x21
 8003f1e:	d002      	beq.n	8003f26 <HAL_I2C_EV_IRQHandler+0x212>
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	2b29      	cmp	r3, #41	; 0x29
 8003f24:	d120      	bne.n	8003f68 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_I2C_EV_IRQHandler+0x238>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_I2C_EV_IRQHandler+0x238>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fecb 	bl	8004ce0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f4a:	e032      	b.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02d      	beq.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d028      	beq.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fefa 	bl	8004d5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f66:	e024      	b.n	8003fb2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00d      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x27a>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x27a>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 ff08 	bl	8004d9c <I2C_SlaveReceive_RXNE>
 8003f8c:	e012      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 ff38 	bl	8004e18 <I2C_SlaveReceive_BTF>
 8003fa8:	e004      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08a      	sub	sp, #40	; 0x28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fdc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_I2C_ER_IRQHandler+0x4a>
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004002:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_I2C_ER_IRQHandler+0x70>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004028:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d03e      	beq.n	80040b2 <HAL_I2C_ER_IRQHandler+0xf8>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d039      	beq.n	80040b2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800403e:	7efb      	ldrb	r3, [r7, #27]
 8004040:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004058:	7ebb      	ldrb	r3, [r7, #26]
 800405a:	2b20      	cmp	r3, #32
 800405c:	d112      	bne.n	8004084 <HAL_I2C_ER_IRQHandler+0xca>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10f      	bne.n	8004084 <HAL_I2C_ER_IRQHandler+0xca>
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b21      	cmp	r3, #33	; 0x21
 8004068:	d008      	beq.n	800407c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b29      	cmp	r3, #41	; 0x29
 800406e:	d005      	beq.n	800407c <HAL_I2C_ER_IRQHandler+0xc2>
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b28      	cmp	r3, #40	; 0x28
 8004074:	d106      	bne.n	8004084 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b21      	cmp	r3, #33	; 0x21
 800407a:	d103      	bne.n	8004084 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 f865 	bl	800514c <I2C_Slave_AF>
 8004082:	e016      	b.n	80040b2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004096:	7efb      	ldrb	r3, [r7, #27]
 8004098:	2b10      	cmp	r3, #16
 800409a:	d002      	beq.n	80040a2 <HAL_I2C_ER_IRQHandler+0xe8>
 800409c:	7efb      	ldrb	r3, [r7, #27]
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d107      	bne.n	80040b2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0x11e>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80040d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f001 f89e 	bl	800522c <I2C_ITError>
  }
}
 80040f0:	bf00      	nop
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
 8004154:	4613      	mov	r3, r2
 8004156:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d150      	bne.n	8004290 <I2C_MasterTransmit_TXE+0xc8>
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d14d      	bne.n	8004290 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d01d      	beq.n	8004236 <I2C_MasterTransmit_TXE+0x6e>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d01a      	beq.n	8004236 <I2C_MasterTransmit_TXE+0x6e>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004206:	d016      	beq.n	8004236 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004216:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2211      	movs	r2, #17
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ff62 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004234:	e060      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004244:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004254:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d107      	bne.n	8004280 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff7d 	bl	8004178 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800427e:	e03b      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff35 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800428e:	e033      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b21      	cmp	r3, #33	; 0x21
 8004294:	d005      	beq.n	80042a2 <I2C_MasterTransmit_TXE+0xda>
 8004296:	7bbb      	ldrb	r3, [r7, #14]
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d12d      	bne.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b22      	cmp	r3, #34	; 0x22
 80042a0:	d12a      	bne.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d108      	bne.n	80042be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042bc:	e01c      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d103      	bne.n	80042d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f88e 	bl	80043ec <I2C_MemoryTransmit_TXE_BTF>
}
 80042d0:	e012      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042f6:	e7ff      	b.n	80042f8 <I2C_MasterTransmit_TXE+0x130>
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b21      	cmp	r3, #33	; 0x21
 8004318:	d164      	bne.n	80043e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004348:	e04c      	b.n	80043e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d01d      	beq.n	800438c <I2C_MasterTransmit_BTF+0x8c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b20      	cmp	r3, #32
 8004354:	d01a      	beq.n	800438c <I2C_MasterTransmit_BTF+0x8c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800435c:	d016      	beq.n	800438c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800436c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2211      	movs	r2, #17
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff feb7 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
}
 800438a:	e02b      	b.n	80043e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800439a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d107      	bne.n	80043d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fed2 	bl	8004178 <HAL_I2C_MemTxCpltCallback>
}
 80043d4:	e006      	b.n	80043e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7ff fe8a 	bl	80040f8 <HAL_I2C_MasterTxCpltCallback>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11d      	bne.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10b      	bne.n	8004424 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	b2da      	uxtb	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004422:	e073      	b.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	b29b      	uxth	r3, r3
 800442a:	121b      	asrs	r3, r3, #8
 800442c:	b2da      	uxtb	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800443e:	e065      	b.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10b      	bne.n	8004460 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800445e:	e055      	b.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	2b02      	cmp	r3, #2
 8004466:	d151      	bne.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b22      	cmp	r3, #34	; 0x22
 800446c:	d10d      	bne.n	800448a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800447c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004488:	e040      	b.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b21      	cmp	r3, #33	; 0x21
 8004498:	d112      	bne.n	80044c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	781a      	ldrb	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044be:	e025      	b.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d120      	bne.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b21      	cmp	r3, #33	; 0x21
 80044ce:	d11d      	bne.n	800450c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff fe36 	bl	8004178 <HAL_I2C_MemTxCpltCallback>
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b22      	cmp	r3, #34	; 0x22
 8004526:	f040 80ac 	bne.w	8004682 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d921      	bls.n	800457c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b03      	cmp	r3, #3
 8004566:	f040 808c 	bne.w	8004682 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800457a:	e082      	b.n	8004682 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2b02      	cmp	r3, #2
 8004582:	d075      	beq.n	8004670 <I2C_MasterReceive_RXNE+0x15c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d002      	beq.n	8004590 <I2C_MasterReceive_RXNE+0x7c>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d16f      	bne.n	8004670 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f001 f825 	bl	80055e0 <I2C_WaitOnSTOPRequestThroughIT>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d142      	bne.n	8004622 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d10a      	bne.n	800460c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fdc1 	bl	800418c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800460a:	e03a      	b.n	8004682 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2212      	movs	r2, #18
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fd76 	bl	800410c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004620:	e02f      	b.n	8004682 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004630:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fd99 	bl	80041a0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800466e:	e008      	b.n	8004682 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	605a      	str	r2, [r3, #4]
}
 8004680:	e7ff      	b.n	8004682 <I2C_MasterReceive_RXNE+0x16e>
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d11b      	bne.n	80046da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046d8:	e0bd      	b.n	8004856 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d129      	bne.n	8004738 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d00a      	beq.n	8004710 <I2C_MasterReceive_BTF+0x86>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d007      	beq.n	8004710 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004736:	e08e      	b.n	8004856 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d176      	bne.n	8004830 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <I2C_MasterReceive_BTF+0xc4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b10      	cmp	r3, #16
 800474c:	d108      	bne.n	8004760 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e019      	b.n	8004794 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d002      	beq.n	800476c <I2C_MasterReceive_BTF+0xe2>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d108      	bne.n	800477e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e00a      	b.n	8004794 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b10      	cmp	r3, #16
 8004782:	d007      	beq.n	8004794 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004792:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d10a      	bne.n	800481a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fcba 	bl	800418c <HAL_I2C_MemRxCpltCallback>
}
 8004818:	e01d      	b.n	8004856 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2212      	movs	r2, #18
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fc6f 	bl	800410c <HAL_I2C_MasterRxCpltCallback>
}
 800482e:	e012      	b.n	8004856 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d117      	bne.n	80048a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800488a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800488c:	e067      	b.n	800495e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]
}
 80048a0:	e05d      	b.n	800495e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048aa:	d133      	bne.n	8004914 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b21      	cmp	r3, #33	; 0x21
 80048b6:	d109      	bne.n	80048cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	e008      	b.n	80048de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <I2C_Master_SB+0x92>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d032      	beq.n	800495e <I2C_Master_SB+0x100>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02d      	beq.n	800495e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004910:	605a      	str	r2, [r3, #4]
}
 8004912:	e024      	b.n	800495e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10e      	bne.n	800493a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	b29b      	uxth	r3, r3
 8004922:	11db      	asrs	r3, r3, #7
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f063 030f 	orn	r3, r3, #15
 8004930:	b2da      	uxtb	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	e011      	b.n	800495e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10d      	bne.n	800495e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	b29b      	uxth	r3, r3
 8004948:	11db      	asrs	r3, r3, #7
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0306 	and.w	r3, r3, #6
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f063 030e 	orn	r3, r3, #14
 8004956:	b2da      	uxtb	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	b2da      	uxtb	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <I2C_Master_ADD10+0x26>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d108      	bne.n	80049a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <I2C_Master_ADD10+0x48>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b0:	605a      	str	r2, [r3, #4]
  }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049be:	b480      	push	{r7}
 80049c0:	b091      	sub	sp, #68	; 0x44
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b22      	cmp	r3, #34	; 0x22
 80049e6:	f040 8169 	bne.w	8004cbc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <I2C_Master_ADDR+0x54>
 80049f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d10b      	bne.n	8004a12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	633b      	str	r3, [r7, #48]	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	e160      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <I2C_Master_ADDR+0x98>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a22:	d118      	bne.n	8004a56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	651a      	str	r2, [r3, #80]	; 0x50
 8004a54:	e13e      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e115      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f040 808a 	bne.w	8004ba8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a9a:	d137      	bne.n	8004b0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aba:	d113      	bne.n	8004ae4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	e0e7      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e0d3      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d02e      	beq.n	8004b70 <I2C_Master_ADDR+0x1b2>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d02b      	beq.n	8004b70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	2b12      	cmp	r3, #18
 8004b1c:	d102      	bne.n	8004b24 <I2C_Master_ADDR+0x166>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d125      	bne.n	8004b70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00e      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d00b      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d008      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e007      	b.n	8004b58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	e0a1      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e085      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d14d      	bne.n	8004c4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d016      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d013      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d010      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e007      	b.n	8004bf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d117      	bne.n	8004c36 <I2C_Master_ADDR+0x278>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c0c:	d00b      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d008      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d005      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d002      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d107      	bne.n	8004c36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e032      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6c:	d117      	bne.n	8004c9e <I2C_Master_ADDR+0x2e0>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c74:	d00b      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d008      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d005      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d002      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d107      	bne.n	8004c9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cba:	e00b      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	e7ff      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
 8004cd4:	bf00      	nop
 8004cd6:	3744      	adds	r7, #68	; 0x44
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02b      	beq.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b29      	cmp	r3, #41	; 0x29
 8004d2c:	d111      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2221      	movs	r2, #33	; 0x21
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2228      	movs	r2, #40	; 0x28
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff f9e7 	bl	8004120 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02c      	beq.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dea:	d111      	bne.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2222      	movs	r2, #34	; 0x22
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2228      	movs	r2, #40	; 0x28
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff f992 	bl	8004134 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d012      	beq.n	8004e50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e76:	2b28      	cmp	r3, #40	; 0x28
 8004e78:	d125      	bne.n	8004ec6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	81bb      	strh	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004eb8:	89ba      	ldrh	r2, [r7, #12]
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f942 	bl	8004148 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ec4:	e00e      	b.n	8004ee4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f48:	d172      	bne.n	8005030 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b22      	cmp	r3, #34	; 0x22
 8004f4e:	d002      	beq.n	8004f56 <I2C_Slave_STOPF+0x6a>
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b2a      	cmp	r3, #42	; 0x2a
 8004f54:	d135      	bne.n	8004fc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fae0 	bl	8003554 <HAL_DMA_GetState>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d049      	beq.n	800502e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	4a69      	ldr	r2, [pc, #420]	; (8005144 <I2C_Slave_STOPF+0x258>)
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f928 	bl	80031fc <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03d      	beq.n	800502e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc0:	e035      	b.n	800502e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe faaa 	bl	8003554 <HAL_DMA_GetState>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d014      	beq.n	8005030 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	4a4e      	ldr	r2, [pc, #312]	; (8005144 <I2C_Slave_STOPF+0x258>)
 800500c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe f8f2 	bl	80031fc <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	e000      	b.n	8005030 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800502e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d03e      	beq.n	80050b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d112      	bne.n	800506e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d112      	bne.n	80050a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f043 0204 	orr.w	r2, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8b3 	bl	800522c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050c6:	e039      	b.n	800513c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b2a      	cmp	r3, #42	; 0x2a
 80050cc:	d109      	bne.n	80050e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2228      	movs	r2, #40	; 0x28
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff f829 	bl	8004134 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b28      	cmp	r3, #40	; 0x28
 80050ec:	d111      	bne.n	8005112 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <I2C_Slave_STOPF+0x25c>)
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff f82a 	bl	8004164 <HAL_I2C_ListenCpltCallback>
}
 8005110:	e014      	b.n	800513c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	2b22      	cmp	r3, #34	; 0x22
 8005118:	d002      	beq.n	8005120 <I2C_Slave_STOPF+0x234>
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b22      	cmp	r3, #34	; 0x22
 800511e:	d10d      	bne.n	800513c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe fffc 	bl	8004134 <HAL_I2C_SlaveRxCpltCallback>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08005491 	.word	0x08005491
 8005148:	ffff0000 	.word	0xffff0000

0800514c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d002      	beq.n	800516e <I2C_Slave_AF+0x22>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b20      	cmp	r3, #32
 800516c:	d129      	bne.n	80051c2 <I2C_Slave_AF+0x76>
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b28      	cmp	r3, #40	; 0x28
 8005172:	d126      	bne.n	80051c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <I2C_Slave_AF+0xdc>)
 8005178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005188:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005192:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe ffd2 	bl	8004164 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80051c0:	e02e      	b.n	8005220 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d126      	bne.n	8005216 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <I2C_Slave_AF+0xdc>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2221      	movs	r2, #33	; 0x21
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fe ff86 	bl	8004120 <HAL_I2C_SlaveTxCpltCallback>
}
 8005214:	e004      	b.n	8005220 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800521e:	615a      	str	r2, [r3, #20]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	ffff0000 	.word	0xffff0000

0800522c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005242:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	2b10      	cmp	r3, #16
 8005248:	d002      	beq.n	8005250 <I2C_ITError+0x24>
 800524a:	7bbb      	ldrb	r3, [r7, #14]
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d10a      	bne.n	8005266 <I2C_ITError+0x3a>
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b22      	cmp	r3, #34	; 0x22
 8005254:	d107      	bne.n	8005266 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005264:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800526c:	2b28      	cmp	r3, #40	; 0x28
 800526e:	d107      	bne.n	8005280 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2228      	movs	r2, #40	; 0x28
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800527e:	e015      	b.n	80052ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528e:	d00a      	beq.n	80052a6 <I2C_ITError+0x7a>
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b60      	cmp	r3, #96	; 0x60
 8005294:	d007      	beq.n	80052a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d162      	bne.n	8005382 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d020      	beq.n	800531c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	4a6a      	ldr	r2, [pc, #424]	; (8005488 <I2C_ITError+0x25c>)
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd ff88 	bl	80031fc <HAL_DMA_Abort_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8089 	beq.w	8005406 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005316:	4610      	mov	r0, r2
 8005318:	4798      	blx	r3
 800531a:	e074      	b.n	8005406 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	4a59      	ldr	r2, [pc, #356]	; (8005488 <I2C_ITError+0x25c>)
 8005322:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd ff67 	bl	80031fc <HAL_DMA_Abort_IT>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d068      	beq.n	8005406 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d10b      	bne.n	800535a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
 8005380:	e041      	b.n	8005406 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b60      	cmp	r3, #96	; 0x60
 800538c:	d125      	bne.n	80053da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10b      	bne.n	80053c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fe feee 	bl	80041b4 <HAL_I2C_AbortCpltCallback>
 80053d8:	e015      	b.n	8005406 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d10b      	bne.n	8005400 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fe fecd 	bl	80041a0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005426:	2b00      	cmp	r3, #0
 8005428:	d104      	bne.n	8005434 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005442:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d113      	bne.n	8005480 <I2C_ITError+0x254>
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b28      	cmp	r3, #40	; 0x28
 800545c:	d110      	bne.n	8005480 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <I2C_ITError+0x260>)
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fe fe72 	bl	8004164 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	08005491 	.word	0x08005491
 800548c:	ffff0000 	.word	0xffff0000

08005490 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054aa:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <I2C_DMAAbort+0x148>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	08db      	lsrs	r3, r3, #3
 80054b0:	4a4a      	ldr	r2, [pc, #296]	; (80055dc <I2C_DMAAbort+0x14c>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0a1a      	lsrs	r2, r3, #8
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80054d6:	e00a      	b.n	80054ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d0ea      	beq.n	80054c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	2200      	movs	r2, #0
 80054fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	2200      	movs	r2, #0
 800550c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	2200      	movs	r2, #0
 8005532:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	2200      	movs	r2, #0
 8005542:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b60      	cmp	r3, #96	; 0x60
 800555e:	d10e      	bne.n	800557e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005576:	6978      	ldr	r0, [r7, #20]
 8005578:	f7fe fe1c 	bl	80041b4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800557c:	e027      	b.n	80055ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005584:	2b28      	cmp	r3, #40	; 0x28
 8005586:	d117      	bne.n	80055b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2228      	movs	r2, #40	; 0x28
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055b6:	e007      	b.n	80055c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055c8:	6978      	ldr	r0, [r7, #20]
 80055ca:	f7fe fde9 	bl	80041a0 <HAL_I2C_ErrorCallback>
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200000a8 	.word	0x200000a8
 80055dc:	14f8b589 	.word	0x14f8b589

080055e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	4a13      	ldr	r2, [pc, #76]	; (8005640 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	0a1a      	lsrs	r2, r3, #8
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b01      	subs	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d107      	bne.n	800561e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e008      	b.n	8005630 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d0e9      	beq.n	8005602 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	200000a8 	.word	0x200000a8
 8005640:	14f8b589 	.word	0x14f8b589

08005644 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005654:	d103      	bne.n	800565e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800565c:	e007      	b.n	800566e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005666:	d102      	bne.n	800566e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2208      	movs	r2, #8
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800567a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567c:	b08f      	sub	sp, #60	; 0x3c
 800567e:	af0a      	add	r7, sp, #40	; 0x28
 8005680:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e10f      	b.n	80058ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fc fb34 	bl	8001d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2203      	movs	r2, #3
 80056b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f004 f803 	bl	80096d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	687e      	ldr	r6, [r7, #4]
 80056d8:	466d      	mov	r5, sp
 80056da:	f106 0410 	add.w	r4, r6, #16
 80056de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80056ee:	1d33      	adds	r3, r6, #4
 80056f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f2:	6838      	ldr	r0, [r7, #0]
 80056f4:	f003 feda 	bl	80094ac <USB_CoreInit>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0d0      	b.n	80058ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f003 fff1 	bl	80096f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
 800571a:	e04a      	b.n	80057b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	333d      	adds	r3, #61	; 0x3d
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	333c      	adds	r3, #60	; 0x3c
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	b298      	uxth	r0, r3
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3344      	adds	r3, #68	; 0x44
 8005758:	4602      	mov	r2, r0
 800575a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3340      	adds	r3, #64	; 0x40
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3348      	adds	r3, #72	; 0x48
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005784:	7bfa      	ldrb	r2, [r7, #15]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	334c      	adds	r3, #76	; 0x4c
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3354      	adds	r3, #84	; 0x54
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	3301      	adds	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
 80057b2:	7bfa      	ldrb	r2, [r7, #15]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3af      	bcc.n	800571c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057bc:	2300      	movs	r3, #0
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e044      	b.n	800584c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057d8:	7bfa      	ldrb	r2, [r7, #15]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80057ea:	7bfa      	ldrb	r2, [r7, #15]
 80057ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800581a:	7bfa      	ldrb	r2, [r7, #15]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	3301      	adds	r3, #1
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	7bfa      	ldrb	r2, [r7, #15]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d3b5      	bcc.n	80057c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	687e      	ldr	r6, [r7, #4]
 800585e:	466d      	mov	r5, sp
 8005860:	f106 0410 	add.w	r4, r6, #16
 8005864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800586a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800586c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005870:	e885 0003 	stmia.w	r5, {r0, r1}
 8005874:	1d33      	adds	r3, r6, #4
 8005876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005878:	6838      	ldr	r0, [r7, #0]
 800587a:	f003 ff89 	bl	8009790 <USB_DevInit>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00d      	b.n	80058ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f005 f8d8 	bl	800aa5a <USB_DevDisconnect>

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_PCD_Start+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e020      	b.n	8005912 <HAL_PCD_Start+0x5e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d109      	bne.n	80058f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d005      	beq.n	80058f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f003 fedb 	bl	80096b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f005 f888 	bl	800aa18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800591a:	b590      	push	{r4, r7, lr}
 800591c:	b08d      	sub	sp, #52	; 0x34
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 f946 	bl	800abc2 <USB_GetMode>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 848a 	bne.w	8006252 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f005 f8aa 	bl	800aa9c <USB_ReadInterrupts>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8480 	beq.w	8006250 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f005 f897 	bl	800aa9c <USB_ReadInterrupts>
 800596e:	4603      	mov	r3, r0
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d107      	bne.n	8005988 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f002 0202 	and.w	r2, r2, #2
 8005986:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f005 f885 	bl	800aa9c <USB_ReadInterrupts>
 8005992:	4603      	mov	r3, r0
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d161      	bne.n	8005a60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0210 	bic.w	r2, r2, #16
 80059aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	3304      	adds	r3, #4
 80059ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	0c5b      	lsrs	r3, r3, #17
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d124      	bne.n	8005a22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80059de:	4013      	ands	r3, r2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d035      	beq.n	8005a50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	6a38      	ldr	r0, [r7, #32]
 80059f8:	f004 febc 	bl	800a774 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a08:	441a      	add	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a1a:	441a      	add	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
 8005a20:	e016      	b.n	8005a50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	0c5b      	lsrs	r3, r3, #17
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d110      	bne.n	8005a50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a34:	2208      	movs	r2, #8
 8005a36:	4619      	mov	r1, r3
 8005a38:	6a38      	ldr	r0, [r7, #32]
 8005a3a:	f004 fe9b 	bl	800a774 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a4a:	441a      	add	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0210 	orr.w	r2, r2, #16
 8005a5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f005 f819 	bl	800aa9c <USB_ReadInterrupts>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a74:	f040 80a7 	bne.w	8005bc6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f005 f81e 	bl	800aac2 <USB_ReadDevAllOutEpInterrupt>
 8005a86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a88:	e099      	b.n	8005bbe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 808e 	beq.w	8005bb2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f005 f842 	bl	800ab2a <USB_ReadDevOutEPInterrupt>
 8005aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fec2 	bl	8006850 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 ff98 	bl	8006a20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	461a      	mov	r2, r3
 8005b08:	2310      	movs	r3, #16
 8005b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d030      	beq.n	8005b78 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d109      	bne.n	8005b36 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b34:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	4413      	add	r3, r2
 8005b48:	3304      	adds	r3, #4
 8005b4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d108      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2200      	movs	r2, #0
 8005b58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc f9d3 	bl	8001f0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b72:	461a      	mov	r2, r3
 8005b74:	2302      	movs	r3, #2
 8005b76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d008      	beq.n	8005b94 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2320      	movs	r3, #32
 8005b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f af62 	bne.w	8005a8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 ff66 	bl	800aa9c <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bda:	f040 80db 	bne.w	8005d94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 ff87 	bl	800aaf6 <USB_ReadDevAllInEpInterrupt>
 8005be8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005bee:	e0cd      	b.n	8005d8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80c2 	beq.w	8005d80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 ffad 	bl	800ab66 <USB_ReadDevInEPInterrupt>
 8005c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d057      	beq.n	8005cc8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	2201      	movs	r2, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69f9      	ldr	r1, [r7, #28]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4013      	ands	r3, r2
 8005c3a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d132      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	334c      	adds	r3, #76	; 0x4c
 8005c66:	6819      	ldr	r1, [r3, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4403      	add	r3, r0
 8005c76:	3348      	adds	r3, #72	; 0x48
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4419      	add	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4403      	add	r3, r0
 8005c8a:	334c      	adds	r3, #76	; 0x4c
 8005c8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d113      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x3a2>
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	3354      	adds	r3, #84	; 0x54
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	f004 ffb4 	bl	800ac24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc f8a7 	bl	8001e16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	461a      	mov	r2, r3
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d023      	beq.n	8005d6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d28:	6a38      	ldr	r0, [r7, #32]
 8005d2a:	f003 fe95 	bl	8009a58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	3338      	adds	r3, #56	; 0x38
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3304      	adds	r3, #4
 8005d40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d108      	bne.n	8005d5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc f8ea 	bl	8001f30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fcdb 	bl	8006736 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	3301      	adds	r3, #1
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f47f af2e 	bne.w	8005bf0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 fe7f 	bl	800aa9c <USB_ReadInterrupts>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da8:	d122      	bne.n	8005df0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d108      	bne.n	8005dda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fec2 	bl	8006b5c <HAL_PCDEx_LPM_Callback>
 8005dd8:	e002      	b.n	8005de0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fc f888 	bl	8001ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 fe51 	bl	800aa9c <USB_ReadInterrupts>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e04:	d112      	bne.n	8005e2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc f844 	bl	8001ea4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695a      	ldr	r2, [r3, #20]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e2a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f004 fe33 	bl	800aa9c <USB_ReadInterrupts>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	f040 80b7 	bne.w	8005fb2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2110      	movs	r1, #16
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f003 fdfa 	bl	8009a58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e68:	e046      	b.n	8005ef8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	461a      	mov	r2, r3
 8005e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e7c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d3b3      	bcc.n	8005e6a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2e:	f043 030b 	orr.w	r3, r3, #11
 8005f32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f44:	f043 030b 	orr.w	r3, r3, #11
 8005f48:	6453      	str	r3, [r2, #68]	; 0x44
 8005f4a:	e015      	b.n	8005f78 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005f62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f72:	f043 030b 	orr.w	r3, r3, #11
 8005f76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f004 fe41 	bl	800ac24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f004 fd70 	bl	800aa9c <USB_ReadInterrupts>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc6:	d124      	bne.n	8006012 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f004 fe06 	bl	800abde <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f003 fdbb 	bl	8009b52 <USB_GetDevSpeed>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681c      	ldr	r4, [r3, #0]
 8005fe8:	f001 f9e8 	bl	80073bc <HAL_RCC_GetHCLKFreq>
 8005fec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f003 faba 	bl	8009570 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fb ff32 	bl	8001e66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006010:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f004 fd40 	bl	800aa9c <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10a      	bne.n	800603c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fb ff0f 	bl	8001e4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f002 0208 	and.w	r2, r2, #8
 800603a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f004 fd2b 	bl	800aa9c <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d122      	bne.n	8006096 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	e014      	b.n	800608c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	b2db      	uxtb	r3, r3
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb27 	bl	80066d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	3301      	adds	r3, #1
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	429a      	cmp	r2, r3
 8006094:	d3e5      	bcc.n	8006062 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f004 fcfe 	bl	800aa9c <USB_ReadInterrupts>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060aa:	d13b      	bne.n	8006124 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ac:	2301      	movs	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	e02b      	b.n	800610a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	3340      	adds	r3, #64	; 0x40
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d115      	bne.n	8006104 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da12      	bge.n	8006104 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	333f      	adds	r3, #63	; 0x3f
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fae8 	bl	80066d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	3301      	adds	r3, #1
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	429a      	cmp	r2, r3
 8006112:	d3ce      	bcc.n	80060b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f004 fcb7 	bl	800aa9c <USB_ReadInterrupts>
 800612e:	4603      	mov	r3, r0
 8006130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006138:	d155      	bne.n	80061e6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800613a:	2301      	movs	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	e045      	b.n	80061cc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d12e      	bne.n	80061c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006168:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800616a:	2b00      	cmp	r3, #0
 800616c:	da2b      	bge.n	80061c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800617a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800617e:	429a      	cmp	r2, r3
 8006180:	d121      	bne.n	80061c6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061c2:	6053      	str	r3, [r2, #4]
            break;
 80061c4:	e007      	b.n	80061d6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	3301      	adds	r3, #1
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3b4      	bcc.n	8006140 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80061e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 fc56 	bl	800aa9c <USB_ReadInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d10a      	bne.n	8006212 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fb fea9 	bl	8001f54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695a      	ldr	r2, [r3, #20]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f004 fc40 	bl	800aa9c <USB_ReadInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d115      	bne.n	8006252 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fb fe99 	bl	8001f70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
 800624e:	e000      	b.n	8006252 <HAL_PCD_IRQHandler+0x938>
      return;
 8006250:	bf00      	nop
    }
  }
}
 8006252:	3734      	adds	r7, #52	; 0x34
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}

08006258 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_PCD_SetAddress+0x1a>
 800626e:	2302      	movs	r3, #2
 8006270:	e013      	b.n	800629a <HAL_PCD_SetAddress+0x42>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f004 fb9e 	bl	800a9cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	461a      	mov	r2, r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	70fb      	strb	r3, [r7, #3]
 80062b4:	460b      	mov	r3, r1
 80062b6:	803b      	strh	r3, [r7, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da0f      	bge.n	80062e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	f003 020f 	and.w	r2, r3, #15
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	3338      	adds	r3, #56	; 0x38
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	705a      	strb	r2, [r3, #1]
 80062e6:	e00f      	b.n	8006308 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006314:	883a      	ldrh	r2, [r7, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	78ba      	ldrb	r2, [r7, #2]
 800631e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d102      	bne.n	800633e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_PCD_EP_Open+0xaa>
 8006348:	2302      	movs	r3, #2
 800634a:	e00e      	b.n	800636a <HAL_PCD_EP_Open+0xc8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68f9      	ldr	r1, [r7, #12]
 800635a:	4618      	mov	r0, r3
 800635c:	f003 fc1e 	bl	8009b9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006368:	7afb      	ldrb	r3, [r7, #11]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800637e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006382:	2b00      	cmp	r3, #0
 8006384:	da0f      	bge.n	80063a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	3338      	adds	r3, #56	; 0x38
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	705a      	strb	r2, [r3, #1]
 80063a4:	e00f      	b.n	80063c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 020f 	and.w	r2, r3, #15
 80063ac:	4613      	mov	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	3304      	adds	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_PCD_EP_Close+0x6e>
 80063dc:	2302      	movs	r3, #2
 80063de:	e00e      	b.n	80063fe <HAL_PCD_EP_Close+0x8c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f003 fc5c 	bl	8009cac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	460b      	mov	r3, r1
 8006414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	b2da      	uxtb	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d102      	bne.n	8006462 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	6979      	ldr	r1, [r7, #20]
 800647a:	f003 ff3b 	bl	800a2f4 <USB_EP0StartXfer>
 800647e:	e008      	b.n	8006492 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	6979      	ldr	r1, [r7, #20]
 800648e:	f003 fce9 	bl	8009e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 020f 	and.w	r2, r3, #15
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	607a      	str	r2, [r7, #4]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	460b      	mov	r3, r1
 80064da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	f003 020f 	and.w	r2, r3, #15
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	3338      	adds	r3, #56	; 0x38
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2201      	movs	r2, #1
 800650a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	b2da      	uxtb	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d102      	bne.n	8006526 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	6979      	ldr	r1, [r7, #20]
 800653e:	f003 fed9 	bl	800a2f4 <USB_EP0StartXfer>
 8006542:	e008      	b.n	8006556 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6979      	ldr	r1, [r7, #20]
 8006552:	f003 fc87 	bl	8009e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d901      	bls.n	800657e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e050      	b.n	8006620 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800657e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006582:	2b00      	cmp	r3, #0
 8006584:	da0f      	bge.n	80065a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	3338      	adds	r3, #56	; 0x38
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	705a      	strb	r2, [r3, #1]
 80065a4:	e00d      	b.n	80065c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	3304      	adds	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_PCD_EP_SetStall+0x82>
 80065de:	2302      	movs	r3, #2
 80065e0:	e01e      	b.n	8006620 <HAL_PCD_EP_SetStall+0xc0>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f004 f917 	bl	800a824 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6818      	ldr	r0, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006610:	461a      	mov	r2, r3
 8006612:	f004 fb07 	bl	800ac24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d901      	bls.n	8006646 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e042      	b.n	80066cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da0f      	bge.n	800666e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	3338      	adds	r3, #56	; 0x38
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	3304      	adds	r3, #4
 8006664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	705a      	strb	r2, [r3, #1]
 800666c:	e00f      	b.n	800668e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	f003 020f 	and.w	r2, r3, #15
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	3304      	adds	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	b2da      	uxtb	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_PCD_EP_ClrStall+0x86>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e00e      	b.n	80066cc <HAL_PCD_EP_ClrStall+0xa4>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	4618      	mov	r0, r3
 80066be:	f004 f91f 	bl	800a900 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80066e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da0c      	bge.n	8006702 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	f003 020f 	and.w	r2, r3, #15
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	3338      	adds	r3, #56	; 0x38
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4413      	add	r3, r2
 80066fc:	3304      	adds	r3, #4
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	e00c      	b.n	800671c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	f003 020f 	and.w	r2, r3, #15
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68f9      	ldr	r1, [r7, #12]
 8006722:	4618      	mov	r0, r3
 8006724:	f003 ff3e 	bl	800a5a4 <USB_EPStopXfer>
 8006728:	4603      	mov	r3, r0
 800672a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800672c:	7afb      	ldrb	r3, [r7, #11]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b08a      	sub	sp, #40	; 0x28
 800673a:	af02      	add	r7, sp, #8
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	3338      	adds	r3, #56	; 0x38
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	429a      	cmp	r2, r3
 8006768:	d901      	bls.n	800676e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e06c      	b.n	8006848 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	429a      	cmp	r2, r3
 8006782:	d902      	bls.n	800678a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3303      	adds	r3, #3
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006792:	e02b      	b.n	80067ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d902      	bls.n	80067b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3303      	adds	r3, #3
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6919      	ldr	r1, [r3, #16]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	4603      	mov	r3, r0
 80067ce:	6978      	ldr	r0, [r7, #20]
 80067d0:	f003 ff92 	bl	800a6f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	441a      	add	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	441a      	add	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d809      	bhi.n	8006816 <PCD_WriteEmptyTxFifo+0xe0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800680a:	429a      	cmp	r2, r3
 800680c:	d203      	bcs.n	8006816 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1be      	bne.n	8006794 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	429a      	cmp	r2, r3
 8006820:	d811      	bhi.n	8006846 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	2201      	movs	r2, #1
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	43db      	mvns	r3, r3
 800683c:	6939      	ldr	r1, [r7, #16]
 800683e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006842:	4013      	ands	r3, r2
 8006844:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3720      	adds	r7, #32
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	333c      	adds	r3, #60	; 0x3c
 8006868:	3304      	adds	r3, #4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d17b      	bne.n	800697e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d015      	beq.n	80068bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4a61      	ldr	r2, [pc, #388]	; (8006a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	f240 80b9 	bls.w	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80b3 	beq.w	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	461a      	mov	r2, r3
 80068b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b8:	6093      	str	r3, [r2, #8]
 80068ba:	e0a7      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	2320      	movs	r3, #32
 80068d6:	6093      	str	r3, [r2, #8]
 80068d8:	e098      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8093 	bne.w	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d90f      	bls.n	800690e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	461a      	mov	r2, r3
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	6093      	str	r3, [r2, #8]
 800690c:	e07e      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	3304      	adds	r3, #4
 8006922:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	0159      	lsls	r1, r3, #5
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	440b      	add	r3, r1
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d114      	bne.n	8006970 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006958:	461a      	mov	r2, r3
 800695a:	2101      	movs	r1, #1
 800695c:	f004 f962 	bl	800ac24 <USB_EP0_OutStart>
 8006960:	e006      	b.n	8006970 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fa32 	bl	8001de0 <HAL_PCD_DataOutStageCallback>
 800697c:	e046      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d124      	bne.n	80069d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	461a      	mov	r2, r3
 800699e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a2:	6093      	str	r3, [r2, #8]
 80069a4:	e032      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069bc:	461a      	mov	r2, r3
 80069be:	2320      	movs	r3, #32
 80069c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fb fa09 	bl	8001de0 <HAL_PCD_DataOutStageCallback>
 80069ce:	e01d      	b.n	8006a0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d114      	bne.n	8006a00 <PCD_EP_OutXfrComplete_int+0x1b0>
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069f8:	461a      	mov	r2, r3
 80069fa:	2100      	movs	r1, #0
 80069fc:	f004 f912 	bl	800ac24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fb f9ea 	bl	8001de0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	4f54300a 	.word	0x4f54300a
 8006a1c:	4f54310a 	.word	0x4f54310a

08006a20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	333c      	adds	r3, #60	; 0x3c
 8006a38:	3304      	adds	r3, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d90e      	bls.n	8006a74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fb f9a1 	bl	8001dbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d90c      	bls.n	8006a9c <PCD_EP_OutSetupPacket_int+0x7c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d108      	bne.n	8006a9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a94:	461a      	mov	r2, r3
 8006a96:	2101      	movs	r1, #1
 8006a98:	f004 f8c4 	bl	800ac24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	4f54300a 	.word	0x4f54300a

08006aac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006aca:	883b      	ldrh	r3, [r7, #0]
 8006acc:	0419      	lsls	r1, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad8:	e028      	b.n	8006b2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e00d      	b.n	8006b0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	3340      	adds	r3, #64	; 0x40
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	4413      	add	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	3301      	adds	r3, #1
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	7bfa      	ldrb	r2, [r7, #15]
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d3ec      	bcc.n	8006aee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b14:	883b      	ldrh	r3, [r7, #0]
 8006b16:	0418      	lsls	r0, r3, #16
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6819      	ldr	r1, [r3, #0]
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4302      	orrs	r2, r0
 8006b24:	3340      	adds	r3, #64	; 0x40
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	887a      	ldrh	r2, [r7, #2]
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e267      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d075      	beq.n	8006c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b92:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d00c      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b9e:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d112      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006baa:	4b82      	ldr	r3, [pc, #520]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bb6:	d10b      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb8:	4b7e      	ldr	r3, [pc, #504]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05b      	beq.n	8006c7c <HAL_RCC_OscConfig+0x108>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d157      	bne.n	8006c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e242      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCC_OscConfig+0x74>
 8006bda:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a75      	ldr	r2, [pc, #468]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e01d      	b.n	8006c24 <HAL_RCC_OscConfig+0xb0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf0:	d10c      	bne.n	8006c0c <HAL_RCC_OscConfig+0x98>
 8006bf2:	4b70      	ldr	r3, [pc, #448]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6f      	ldr	r2, [pc, #444]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4b6d      	ldr	r3, [pc, #436]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6c      	ldr	r2, [pc, #432]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e00b      	b.n	8006c24 <HAL_RCC_OscConfig+0xb0>
 8006c0c:	4b69      	ldr	r3, [pc, #420]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	4b66      	ldr	r3, [pc, #408]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a65      	ldr	r2, [pc, #404]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d013      	beq.n	8006c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2c:	f7fb fbf4 	bl	8002418 <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c34:	f7fb fbf0 	bl	8002418 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	; 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e207      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c46:	4b5b      	ldr	r3, [pc, #364]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCC_OscConfig+0xc0>
 8006c52:	e014      	b.n	8006c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7fb fbe0 	bl	8002418 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c5c:	f7fb fbdc 	bl	8002418 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b64      	cmp	r3, #100	; 0x64
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e1f3      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c6e:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0xe8>
 8006c7a:	e000      	b.n	8006c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d063      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c8a:	4b4a      	ldr	r3, [pc, #296]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d11c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ca2:	4b44      	ldr	r3, [pc, #272]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d116      	bne.n	8006cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cae:	4b41      	ldr	r3, [pc, #260]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x152>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d001      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e1c7      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4937      	ldr	r1, [pc, #220]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	e03a      	b.n	8006d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d020      	beq.n	8006d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <HAL_RCC_OscConfig+0x244>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cea:	f7fb fb95 	bl	8002418 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf2:	f7fb fb91 	bl	8002418 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e1a8      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d04:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d10:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4925      	ldr	r1, [pc, #148]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
 8006d24:	e015      	b.n	8006d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <HAL_RCC_OscConfig+0x244>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fb fb74 	bl	8002418 <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d34:	f7fb fb70 	bl	8002418 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e187      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d036      	beq.n	8006dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <HAL_RCC_OscConfig+0x248>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6c:	f7fb fb54 	bl	8002418 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d74:	f7fb fb50 	bl	8002418 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e167      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_OscConfig+0x240>)
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x200>
 8006d92:	e01b      	b.n	8006dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d94:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <HAL_RCC_OscConfig+0x248>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d9a:	f7fb fb3d 	bl	8002418 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006da0:	e00e      	b.n	8006dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da2:	f7fb fb39 	bl	8002418 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d907      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e150      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
 8006db4:	40023800 	.word	0x40023800
 8006db8:	42470000 	.word	0x42470000
 8006dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dc0:	4b88      	ldr	r3, [pc, #544]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1ea      	bne.n	8006da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8097 	beq.w	8006f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dde:	4b81      	ldr	r3, [pc, #516]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10f      	bne.n	8006e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dea:	2300      	movs	r3, #0
 8006dec:	60bb      	str	r3, [r7, #8]
 8006dee:	4b7d      	ldr	r3, [pc, #500]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	4a7c      	ldr	r2, [pc, #496]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dfa:	4b7a      	ldr	r3, [pc, #488]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e02:	60bb      	str	r3, [r7, #8]
 8006e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0a:	4b77      	ldr	r3, [pc, #476]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d118      	bne.n	8006e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e16:	4b74      	ldr	r3, [pc, #464]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a73      	ldr	r2, [pc, #460]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e22:	f7fb faf9 	bl	8002418 <HAL_GetTick>
 8006e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	e008      	b.n	8006e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2a:	f7fb faf5 	bl	8002418 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e10c      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3c:	4b6a      	ldr	r3, [pc, #424]	; (8006fe8 <HAL_RCC_OscConfig+0x474>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d106      	bne.n	8006e5e <HAL_RCC_OscConfig+0x2ea>
 8006e50:	4b64      	ldr	r3, [pc, #400]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	4a63      	ldr	r2, [pc, #396]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e5c:	e01c      	b.n	8006e98 <HAL_RCC_OscConfig+0x324>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCC_OscConfig+0x30c>
 8006e66:	4b5f      	ldr	r3, [pc, #380]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	4a5e      	ldr	r2, [pc, #376]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	f043 0304 	orr.w	r3, r3, #4
 8006e70:	6713      	str	r3, [r2, #112]	; 0x70
 8006e72:	4b5c      	ldr	r3, [pc, #368]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	4a5b      	ldr	r2, [pc, #364]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e78:	f043 0301 	orr.w	r3, r3, #1
 8006e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e7e:	e00b      	b.n	8006e98 <HAL_RCC_OscConfig+0x324>
 8006e80:	4b58      	ldr	r3, [pc, #352]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a57      	ldr	r2, [pc, #348]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e86:	f023 0301 	bic.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8c:	4b55      	ldr	r3, [pc, #340]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	4a54      	ldr	r2, [pc, #336]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006e92:	f023 0304 	bic.w	r3, r3, #4
 8006e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea0:	f7fb faba 	bl	8002418 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fb fab6 	bl	8002418 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e0cb      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebe:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0ee      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x334>
 8006eca:	e014      	b.n	8006ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ecc:	f7fb faa4 	bl	8002418 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fb faa0 	bl	8002418 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0b5      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eea:	4b3e      	ldr	r3, [pc, #248]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1ee      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d105      	bne.n	8006f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efc:	4b39      	ldr	r3, [pc, #228]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f00:	4a38      	ldr	r2, [pc, #224]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80a1 	beq.w	8007054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f12:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 030c 	and.w	r3, r3, #12
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d05c      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d141      	bne.n	8006faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f26:	4b31      	ldr	r3, [pc, #196]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fb fa74 	bl	8002418 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fb fa70 	bl	8002418 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e087      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f46:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69da      	ldr	r2, [r3, #28]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	019b      	lsls	r3, r3, #6
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	061b      	lsls	r3, r3, #24
 8006f76:	491b      	ldr	r1, [pc, #108]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f82:	f7fb fa49 	bl	8002418 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fb fa45 	bl	8002418 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e05c      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <HAL_RCC_OscConfig+0x416>
 8006fa8:	e054      	b.n	8007054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <HAL_RCC_OscConfig+0x478>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fb fa32 	bl	8002418 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fb fa2e 	bl	8002418 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e045      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x444>
 8006fd6:	e03d      	b.n	8007054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e038      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40007000 	.word	0x40007000
 8006fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ff0:	4b1b      	ldr	r3, [pc, #108]	; (8007060 <HAL_RCC_OscConfig+0x4ec>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d028      	beq.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d121      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007016:	429a      	cmp	r2, r3
 8007018:	d11a      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007028:	4293      	cmp	r3, r2
 800702a:	d111      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	3b01      	subs	r3, #1
 800703a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d107      	bne.n	8007050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800704c:	429a      	cmp	r2, r3
 800704e:	d001      	beq.n	8007054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800

08007064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0cc      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007078:	4b68      	ldr	r3, [pc, #416]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90c      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b65      	ldr	r3, [pc, #404]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b63      	ldr	r3, [pc, #396]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0b8      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b8:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4a58      	ldr	r2, [pc, #352]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d0:	4b53      	ldr	r3, [pc, #332]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	4a52      	ldr	r2, [pc, #328]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070dc:	4b50      	ldr	r3, [pc, #320]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	494d      	ldr	r1, [pc, #308]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d044      	beq.n	8007184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	4b47      	ldr	r3, [pc, #284]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e07f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d003      	beq.n	8007122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800711e:	2b03      	cmp	r3, #3
 8007120:	d107      	bne.n	8007132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007122:	4b3f      	ldr	r3, [pc, #252]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e06f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e067      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007142:	4b37      	ldr	r3, [pc, #220]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f023 0203 	bic.w	r2, r3, #3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	4934      	ldr	r1, [pc, #208]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	4313      	orrs	r3, r2
 8007152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007154:	f7fb f960 	bl	8002418 <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715a:	e00a      	b.n	8007172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800715c:	f7fb f95c 	bl	8002418 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f241 3288 	movw	r2, #5000	; 0x1388
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e04f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007172:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 020c 	and.w	r2, r3, #12
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	429a      	cmp	r2, r3
 8007182:	d1eb      	bne.n	800715c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0307 	and.w	r3, r3, #7
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d20c      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b20      	ldr	r3, [pc, #128]	; (800721c <HAL_RCC_ClockConfig+0x1b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e032      	b.n	8007212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b8:	4b19      	ldr	r3, [pc, #100]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4916      	ldr	r1, [pc, #88]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	490e      	ldr	r1, [pc, #56]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ea:	f000 f821 	bl	8007230 <HAL_RCC_GetSysClockFreq>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	490a      	ldr	r1, [pc, #40]	; (8007224 <HAL_RCC_ClockConfig+0x1c0>)
 80071fc:	5ccb      	ldrb	r3, [r1, r3]
 80071fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007202:	4a09      	ldr	r2, [pc, #36]	; (8007228 <HAL_RCC_ClockConfig+0x1c4>)
 8007204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <HAL_RCC_ClockConfig+0x1c8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fb f8c0 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40023c00 	.word	0x40023c00
 8007220:	40023800 	.word	0x40023800
 8007224:	0800cf50 	.word	0x0800cf50
 8007228:	200000a8 	.word	0x200000a8
 800722c:	200000ac 	.word	0x200000ac

08007230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007234:	b090      	sub	sp, #64	; 0x40
 8007236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	; 0x34
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007240:	2300      	movs	r3, #0
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007248:	4b59      	ldr	r3, [pc, #356]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 030c 	and.w	r3, r3, #12
 8007250:	2b08      	cmp	r3, #8
 8007252:	d00d      	beq.n	8007270 <HAL_RCC_GetSysClockFreq+0x40>
 8007254:	2b08      	cmp	r3, #8
 8007256:	f200 80a1 	bhi.w	800739c <HAL_RCC_GetSysClockFreq+0x16c>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_RCC_GetSysClockFreq+0x34>
 800725e:	2b04      	cmp	r3, #4
 8007260:	d003      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0x3a>
 8007262:	e09b      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007264:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007266:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007268:	e09b      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800726a:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800726c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800726e:	e098      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007270:	4b4f      	ldr	r3, [pc, #316]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800727a:	4b4d      	ldr	r3, [pc, #308]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d028      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	099b      	lsrs	r3, r3, #6
 800728c:	2200      	movs	r2, #0
 800728e:	623b      	str	r3, [r7, #32]
 8007290:	627a      	str	r2, [r7, #36]	; 0x24
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007298:	2100      	movs	r1, #0
 800729a:	4b47      	ldr	r3, [pc, #284]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800729c:	fb03 f201 	mul.w	r2, r3, r1
 80072a0:	2300      	movs	r3, #0
 80072a2:	fb00 f303 	mul.w	r3, r0, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	4a43      	ldr	r2, [pc, #268]	; (80073b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80072aa:	fba0 1202 	umull	r1, r2, r0, r2
 80072ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b0:	460a      	mov	r2, r1
 80072b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80072b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b6:	4413      	add	r3, r2
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	2200      	movs	r2, #0
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	61fa      	str	r2, [r7, #28]
 80072c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072ca:	f7f8 ff85 	bl	80001d8 <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4613      	mov	r3, r2
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d6:	e053      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072d8:	4b35      	ldr	r3, [pc, #212]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	099b      	lsrs	r3, r3, #6
 80072de:	2200      	movs	r2, #0
 80072e0:	613b      	str	r3, [r7, #16]
 80072e2:	617a      	str	r2, [r7, #20]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072ea:	f04f 0b00 	mov.w	fp, #0
 80072ee:	4652      	mov	r2, sl
 80072f0:	465b      	mov	r3, fp
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f04f 0100 	mov.w	r1, #0
 80072fa:	0159      	lsls	r1, r3, #5
 80072fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007300:	0150      	lsls	r0, r2, #5
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	ebb2 080a 	subs.w	r8, r2, sl
 800730a:	eb63 090b 	sbc.w	r9, r3, fp
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800731a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800731e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007322:	ebb2 0408 	subs.w	r4, r2, r8
 8007326:	eb63 0509 	sbc.w	r5, r3, r9
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	00eb      	lsls	r3, r5, #3
 8007334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007338:	00e2      	lsls	r2, r4, #3
 800733a:	4614      	mov	r4, r2
 800733c:	461d      	mov	r5, r3
 800733e:	eb14 030a 	adds.w	r3, r4, sl
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	eb45 030b 	adc.w	r3, r5, fp
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007356:	4629      	mov	r1, r5
 8007358:	028b      	lsls	r3, r1, #10
 800735a:	4621      	mov	r1, r4
 800735c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007360:	4621      	mov	r1, r4
 8007362:	028a      	lsls	r2, r1, #10
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736a:	2200      	movs	r2, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	60fa      	str	r2, [r7, #12]
 8007370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007374:	f7f8 ff30 	bl	80001d8 <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4613      	mov	r3, r2
 800737e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	0c1b      	lsrs	r3, r3, #16
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	3301      	adds	r3, #1
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800739a:	e002      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800739c:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800739e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3740      	adds	r7, #64	; 0x40
 80073a8:	46bd      	mov	sp, r7
 80073aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
 80073b4:	00f42400 	.word	0x00f42400
 80073b8:	017d7840 	.word	0x017d7840

080073bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073c2:	681b      	ldr	r3, [r3, #0]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	200000a8 	.word	0x200000a8

080073d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073d8:	f7ff fff0 	bl	80073bc <HAL_RCC_GetHCLKFreq>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	0a9b      	lsrs	r3, r3, #10
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	4903      	ldr	r1, [pc, #12]	; (80073f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ea:	5ccb      	ldrb	r3, [r1, r3]
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40023800 	.word	0x40023800
 80073f8:	0800cf60 	.word	0x0800cf60

080073fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007400:	f7ff ffdc 	bl	80073bc <HAL_RCC_GetHCLKFreq>
 8007404:	4602      	mov	r2, r0
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0b5b      	lsrs	r3, r3, #13
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	4903      	ldr	r1, [pc, #12]	; (8007420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007412:	5ccb      	ldrb	r3, [r1, r3]
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007418:	4618      	mov	r0, r3
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40023800 	.word	0x40023800
 8007420:	0800cf60 	.word	0x0800cf60

08007424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e07b      	b.n	800752e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007446:	d009      	beq.n	800745c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	61da      	str	r2, [r3, #28]
 800744e:	e005      	b.n	800745c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7f9 ff00 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e0:	ea42 0103 	orr.w	r1, r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	f003 0104 	and.w	r1, r3, #4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	f003 0210 	and.w	r2, r3, #16
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800751c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b088      	sub	sp, #32
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	603b      	str	r3, [r7, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_SPI_Transmit+0x22>
 8007554:	2302      	movs	r3, #2
 8007556:	e126      	b.n	80077a6 <HAL_SPI_Transmit+0x270>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007560:	f7fa ff5a 	bl	8002418 <HAL_GetTick>
 8007564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b01      	cmp	r3, #1
 8007574:	d002      	beq.n	800757c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007576:	2302      	movs	r3, #2
 8007578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800757a:	e10b      	b.n	8007794 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SPI_Transmit+0x52>
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800758c:	e102      	b.n	8007794 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2203      	movs	r2, #3
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	88fa      	ldrh	r2, [r7, #6]
 80075a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d4:	d10f      	bne.n	80075f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	d007      	beq.n	8007614 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761c:	d14b      	bne.n	80076b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SPI_Transmit+0xf6>
 8007626:	8afb      	ldrh	r3, [r7, #22]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d13e      	bne.n	80076aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007646:	b29b      	uxth	r3, r3
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007650:	e02b      	b.n	80076aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d112      	bne.n	8007686 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	881a      	ldrh	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	1c9a      	adds	r2, r3, #2
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	86da      	strh	r2, [r3, #54]	; 0x36
 8007684:	e011      	b.n	80076aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007686:	f7fa fec7 	bl	8002418 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d803      	bhi.n	800769e <HAL_SPI_Transmit+0x168>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d102      	bne.n	80076a4 <HAL_SPI_Transmit+0x16e>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076a8:	e074      	b.n	8007794 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1ce      	bne.n	8007652 <HAL_SPI_Transmit+0x11c>
 80076b4:	e04c      	b.n	8007750 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_SPI_Transmit+0x18e>
 80076be:	8afb      	ldrh	r3, [r7, #22]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d140      	bne.n	8007746 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076ea:	e02c      	b.n	8007746 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d113      	bne.n	8007722 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007720:	e011      	b.n	8007746 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007722:	f7fa fe79 	bl	8002418 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d803      	bhi.n	800773a <HAL_SPI_Transmit+0x204>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d102      	bne.n	8007740 <HAL_SPI_Transmit+0x20a>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007744:	e026      	b.n	8007794 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1cd      	bne.n	80076ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f9c5 	bl	8007ae4 <SPI_EndRxTxTransaction>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e000      	b.n	8007794 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10e      	bne.n	80077f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
    return;
 80077ee:	e0ce      	b.n	800798e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <HAL_SPI_IRQHandler+0x5e>
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
    return;
 800780c:	e0bf      	b.n	800798e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <HAL_SPI_IRQHandler+0x7e>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80b0 	beq.w	800798e <HAL_SPI_IRQHandler+0x1de>
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80aa 	beq.w	800798e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d023      	beq.n	800788c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b03      	cmp	r3, #3
 800784e:	d011      	beq.n	8007874 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	f043 0204 	orr.w	r2, r3, #4
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	e00b      	b.n	800788c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
        return;
 800788a:	e080      	b.n	800798e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d014      	beq.n	80078c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f043 0201 	orr.w	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ce:	f043 0208 	orr.w	r2, r3, #8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d04f      	beq.n	800798c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d104      	bne.n	8007918 <HAL_SPI_IRQHandler+0x168>
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d034      	beq.n	8007982 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0203 	bic.w	r2, r2, #3
 8007926:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d011      	beq.n	8007954 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	4a17      	ldr	r2, [pc, #92]	; (8007994 <HAL_SPI_IRQHandler+0x1e4>)
 8007936:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793c:	4618      	mov	r0, r3
 800793e:	f7fb fc5d 	bl	80031fc <HAL_DMA_Abort_IT>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007958:	2b00      	cmp	r3, #0
 800795a:	d016      	beq.n	800798a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007960:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <HAL_SPI_IRQHandler+0x1e4>)
 8007962:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007968:	4618      	mov	r0, r3
 800796a:	f7fb fc47 	bl	80031fc <HAL_DMA_Abort_IT>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007980:	e003      	b.n	800798a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f808 	bl	8007998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007988:	e000      	b.n	800798c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800798a:	bf00      	nop
    return;
 800798c:	bf00      	nop
  }
}
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	080079ad 	.word	0x080079ad

08007998 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7ff ffe6 	bl	8007998 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079e4:	f7fa fd18 	bl	8002418 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4413      	add	r3, r2
 80079f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079f4:	f7fa fd10 	bl	8002418 <HAL_GetTick>
 80079f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079fa:	4b39      	ldr	r3, [pc, #228]	; (8007ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	015b      	lsls	r3, r3, #5
 8007a00:	0d1b      	lsrs	r3, r3, #20
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a0a:	e054      	b.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d050      	beq.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a14:	f7fa fd00 	bl	8002418 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d902      	bls.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d13d      	bne.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a42:	d111      	bne.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a4c:	d004      	beq.n	8007a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a56:	d107      	bne.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a70:	d10f      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e017      	b.n	8007ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d19b      	bne.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200000a8 	.word	0x200000a8

08007ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <SPI_EndRxTxTransaction+0x7c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <SPI_EndRxTxTransaction+0x80>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	0d5b      	lsrs	r3, r3, #21
 8007afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b0e:	d112      	bne.n	8007b36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	2180      	movs	r1, #128	; 0x80
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff ff5a 	bl	80079d4 <SPI_WaitFlagStateUntilTimeout>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	f043 0220 	orr.w	r2, r3, #32
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e00f      	b.n	8007b56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4c:	2b80      	cmp	r3, #128	; 0x80
 8007b4e:	d0f2      	beq.n	8007b36 <SPI_EndRxTxTransaction+0x52>
 8007b50:	e000      	b.n	8007b54 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b52:	bf00      	nop
  }

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200000a8 	.word	0x200000a8
 8007b64:	165e9f81 	.word	0x165e9f81

08007b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e041      	b.n	8007bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7f9 fd44 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f000 fa2e 	bl	8008008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d122      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d11b      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f06f 0202 	mvn.w	r2, #2
 8007c32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9bf 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007c4e:	e005      	b.n	8007c5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f9b1 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9c2 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d122      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d11b      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0204 	mvn.w	r2, #4
 8007c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f995 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007ca2:	e005      	b.n	8007cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f987 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f998 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d122      	bne.n	8007d0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d11b      	bne.n	8007d0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f06f 0208 	mvn.w	r2, #8
 8007cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f96b 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007cf6:	e005      	b.n	8007d04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f95d 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f96e 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d122      	bne.n	8007d5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b10      	cmp	r3, #16
 8007d24:	d11b      	bne.n	8007d5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f06f 0210 	mvn.w	r2, #16
 8007d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2208      	movs	r2, #8
 8007d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f941 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007d4a:	e005      	b.n	8007d58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f933 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f944 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d10e      	bne.n	8007d8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d107      	bne.n	8007d8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f06f 0201 	mvn.w	r2, #1
 8007d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f90d 	bl	8007fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d10e      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b80      	cmp	r3, #128	; 0x80
 8007da4:	d107      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fabb 	bl	800832c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d10e      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d107      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f909 	bl	8007ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d10e      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d107      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0220 	mvn.w	r2, #32
 8007e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa85 	bl	8008318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_ConfigClockSource+0x1c>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0b4      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x186>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6a:	d03e      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0xd4>
 8007e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e70:	f200 8087 	bhi.w	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e78:	f000 8086 	beq.w	8007f88 <HAL_TIM_ConfigClockSource+0x172>
 8007e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e80:	d87f      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007e82:	2b70      	cmp	r3, #112	; 0x70
 8007e84:	d01a      	beq.n	8007ebc <HAL_TIM_ConfigClockSource+0xa6>
 8007e86:	2b70      	cmp	r3, #112	; 0x70
 8007e88:	d87b      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007e8a:	2b60      	cmp	r3, #96	; 0x60
 8007e8c:	d050      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x11a>
 8007e8e:	2b60      	cmp	r3, #96	; 0x60
 8007e90:	d877      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007e92:	2b50      	cmp	r3, #80	; 0x50
 8007e94:	d03c      	beq.n	8007f10 <HAL_TIM_ConfigClockSource+0xfa>
 8007e96:	2b50      	cmp	r3, #80	; 0x50
 8007e98:	d873      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d058      	beq.n	8007f50 <HAL_TIM_ConfigClockSource+0x13a>
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d86f      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea2:	2b30      	cmp	r3, #48	; 0x30
 8007ea4:	d064      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15a>
 8007ea6:	2b30      	cmp	r3, #48	; 0x30
 8007ea8:	d86b      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d060      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15a>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d867      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d05c      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15a>
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d05a      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15a>
 8007eba:	e062      	b.n	8007f82 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6899      	ldr	r1, [r3, #8]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f000 f996 	bl	80081fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ede:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	609a      	str	r2, [r3, #8]
      break;
 8007ee8:	e04f      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6899      	ldr	r1, [r3, #8]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f000 f97f 	bl	80081fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f0c:	609a      	str	r2, [r3, #8]
      break;
 8007f0e:	e03c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6859      	ldr	r1, [r3, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f000 f8f3 	bl	8008108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2150      	movs	r1, #80	; 0x50
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 f94c 	bl	80081c6 <TIM_ITRx_SetConfig>
      break;
 8007f2e:	e02c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f000 f912 	bl	8008166 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2160      	movs	r1, #96	; 0x60
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f93c 	bl	80081c6 <TIM_ITRx_SetConfig>
      break;
 8007f4e:	e01c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6859      	ldr	r1, [r3, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f000 f8d3 	bl	8008108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2140      	movs	r1, #64	; 0x40
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 f92c 	bl	80081c6 <TIM_ITRx_SetConfig>
      break;
 8007f6e:	e00c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f000 f923 	bl	80081c6 <TIM_ITRx_SetConfig>
      break;
 8007f80:	e003      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e000      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a34      	ldr	r2, [pc, #208]	; (80080ec <TIM_Base_SetConfig+0xe4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00f      	beq.n	8008040 <TIM_Base_SetConfig+0x38>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008026:	d00b      	beq.n	8008040 <TIM_Base_SetConfig+0x38>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a31      	ldr	r2, [pc, #196]	; (80080f0 <TIM_Base_SetConfig+0xe8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d007      	beq.n	8008040 <TIM_Base_SetConfig+0x38>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a30      	ldr	r2, [pc, #192]	; (80080f4 <TIM_Base_SetConfig+0xec>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d003      	beq.n	8008040 <TIM_Base_SetConfig+0x38>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a2f      	ldr	r2, [pc, #188]	; (80080f8 <TIM_Base_SetConfig+0xf0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d108      	bne.n	8008052 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a25      	ldr	r2, [pc, #148]	; (80080ec <TIM_Base_SetConfig+0xe4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d01b      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008060:	d017      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a22      	ldr	r2, [pc, #136]	; (80080f0 <TIM_Base_SetConfig+0xe8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <TIM_Base_SetConfig+0xec>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00f      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <TIM_Base_SetConfig+0xf0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00b      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a1f      	ldr	r2, [pc, #124]	; (80080fc <TIM_Base_SetConfig+0xf4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a1e      	ldr	r2, [pc, #120]	; (8008100 <TIM_Base_SetConfig+0xf8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_Base_SetConfig+0x8a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <TIM_Base_SetConfig+0xfc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d108      	bne.n	80080a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <TIM_Base_SetConfig+0xe4>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d103      	bne.n	80080d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	615a      	str	r2, [r3, #20]
}
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40000800 	.word	0x40000800
 80080f8:	40000c00 	.word	0x40000c00
 80080fc:	40014000 	.word	0x40014000
 8008100:	40014400 	.word	0x40014400
 8008104:	40014800 	.word	0x40014800

08008108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f023 030a 	bic.w	r3, r3, #10
 8008144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	621a      	str	r2, [r3, #32]
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f023 0210 	bic.w	r2, r3, #16
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	031b      	lsls	r3, r3, #12
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	621a      	str	r2, [r3, #32]
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f043 0307 	orr.w	r3, r3, #7
 80081e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	021a      	lsls	r2, r3, #8
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	431a      	orrs	r2, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4313      	orrs	r3, r2
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	609a      	str	r2, [r3, #8]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e050      	b.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1c      	ldr	r2, [pc, #112]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d018      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a0:	d013      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a15      	ldr	r2, [pc, #84]	; (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a13      	ldr	r2, [pc, #76]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10c      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40010000 	.word	0x40010000
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40014000 	.word	0x40014000

08008318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e03f      	b.n	80083d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f9 f9d2 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2224      	movs	r2, #36	; 0x24
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fe1d 	bl	8008fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b08a      	sub	sp, #40	; 0x28
 80083de:	af02      	add	r7, sp, #8
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d17c      	bne.n	80084f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_UART_Transmit+0x2c>
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e075      	b.n	80084f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_UART_Transmit+0x3e>
 8008414:	2302      	movs	r3, #2
 8008416:	e06e      	b.n	80084f6 <HAL_UART_Transmit+0x11c>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2221      	movs	r2, #33	; 0x21
 800842a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800842e:	f7f9 fff3 	bl	8002418 <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008448:	d108      	bne.n	800845c <HAL_UART_Transmit+0x82>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d104      	bne.n	800845c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e003      	b.n	8008464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800846c:	e02a      	b.n	80084c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fb9b 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e036      	b.n	80084f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800849c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	3302      	adds	r3, #2
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	e007      	b.n	80084b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	3301      	adds	r3, #1
 80084b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1cf      	bne.n	800846e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2200      	movs	r2, #0
 80084d6:	2140      	movs	r1, #64	; 0x40
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fb6b 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e006      	b.n	80084f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e000      	b.n	80084f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b08a      	sub	sp, #40	; 0x28
 8008502:	af02      	add	r7, sp, #8
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	603b      	str	r3, [r7, #0]
 800850a:	4613      	mov	r3, r2
 800850c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b20      	cmp	r3, #32
 800851c:	f040 808c 	bne.w	8008638 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <HAL_UART_Receive+0x2e>
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e084      	b.n	800863a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_UART_Receive+0x40>
 800853a:	2302      	movs	r3, #2
 800853c:	e07d      	b.n	800863a <HAL_UART_Receive+0x13c>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2222      	movs	r2, #34	; 0x22
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800855a:	f7f9 ff5d 	bl	8002418 <HAL_GetTick>
 800855e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	88fa      	ldrh	r2, [r7, #6]
 8008564:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	88fa      	ldrh	r2, [r7, #6]
 800856a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008574:	d108      	bne.n	8008588 <HAL_UART_Receive+0x8a>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	e003      	b.n	8008590 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800858c:	2300      	movs	r3, #0
 800858e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008598:	e043      	b.n	8008622 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2200      	movs	r2, #0
 80085a2:	2120      	movs	r1, #32
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 fb05 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e042      	b.n	800863a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10c      	bne.n	80085d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	3302      	adds	r3, #2
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e01f      	b.n	8008614 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085dc:	d007      	beq.n	80085ee <HAL_UART_Receive+0xf0>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <HAL_UART_Receive+0xfe>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e008      	b.n	800860e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008608:	b2da      	uxtb	r2, r3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	3301      	adds	r3, #1
 8008612:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29a      	uxth	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1b6      	bne.n	800859a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	e000      	b.n	800863a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
  }
}
 800863a:	4618      	mov	r0, r3
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b0ba      	sub	sp, #232	; 0xe8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800866a:	2300      	movs	r3, #0
 800866c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10f      	bne.n	80086aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d009      	beq.n	80086aa <HAL_UART_IRQHandler+0x66>
 8008696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fbd3 	bl	8008e4e <UART_Receive_IT>
      return;
 80086a8:	e256      	b.n	8008b58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 80de 	beq.w	8008870 <HAL_UART_IRQHandler+0x22c>
 80086b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 80d1 	beq.w	8008870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <HAL_UART_IRQHandler+0xae>
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	f043 0201 	orr.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_UART_IRQHandler+0xd2>
 80086fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0202 	orr.w	r2, r3, #2
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <HAL_UART_IRQHandler+0xf6>
 8008722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f043 0204 	orr.w	r2, r3, #4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d011      	beq.n	800876a <HAL_UART_IRQHandler+0x126>
 8008746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d005      	beq.n	800876a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f043 0208 	orr.w	r2, r3, #8
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 81ed 	beq.w	8008b4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <HAL_UART_IRQHandler+0x14e>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb5e 	bl	8008e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f003 0308 	and.w	r3, r3, #8
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d103      	bne.n	80087be <HAL_UART_IRQHandler+0x17a>
 80087b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d04f      	beq.n	800885e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa66 	bl	8008c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ce:	2b40      	cmp	r3, #64	; 0x40
 80087d0:	d141      	bne.n	8008856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3314      	adds	r3, #20
 80087d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3314      	adds	r3, #20
 80087fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800880a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1d9      	bne.n	80087d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	2b00      	cmp	r3, #0
 8008824:	d013      	beq.n	800884e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	4a7d      	ldr	r2, [pc, #500]	; (8008a20 <HAL_UART_IRQHandler+0x3dc>)
 800882c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	4618      	mov	r0, r3
 8008834:	f7fa fce2 	bl	80031fc <HAL_DMA_Abort_IT>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d016      	beq.n	800886c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	e00e      	b.n	800886c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f99a 	bl	8008b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008854:	e00a      	b.n	800886c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f996 	bl	8008b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885c:	e006      	b.n	800886c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f992 	bl	8008b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800886a:	e170      	b.n	8008b4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886c:	bf00      	nop
    return;
 800886e:	e16e      	b.n	8008b4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	2b01      	cmp	r3, #1
 8008876:	f040 814a 	bne.w	8008b0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8143 	beq.w	8008b0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888c:	f003 0310 	and.w	r3, r3, #16
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 813c 	beq.w	8008b0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	60bb      	str	r3, [r7, #8]
 80088aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	f040 80b4 	bne.w	8008a24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 8140 	beq.w	8008b52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088da:	429a      	cmp	r2, r3
 80088dc:	f080 8139 	bcs.w	8008b52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f2:	f000 8088 	beq.w	8008a06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	330c      	adds	r3, #12
 80088fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800890c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	330c      	adds	r3, #12
 800891e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800892e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800893a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1d9      	bne.n	80088f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3314      	adds	r3, #20
 8008948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3314      	adds	r3, #20
 8008962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800896a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800896e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e1      	bne.n	8008942 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3314      	adds	r3, #20
 8008984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800898e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3314      	adds	r3, #20
 800899e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e3      	bne.n	800897e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d6:	f023 0310 	bic.w	r3, r3, #16
 80089da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80089ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e3      	bne.n	80089c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fa fb8b 	bl	800311c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8c0 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a1c:	e099      	b.n	8008b52 <HAL_UART_IRQHandler+0x50e>
 8008a1e:	bf00      	nop
 8008a20:	08008d57 	.word	0x08008d57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 808b 	beq.w	8008b56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8086 	beq.w	8008b56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	330c      	adds	r3, #12
 8008a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8008a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e3      	bne.n	8008a4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3314      	adds	r3, #20
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	623b      	str	r3, [r7, #32]
   return(result);
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3314      	adds	r3, #20
 8008aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e3      	bne.n	8008a82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0310 	bic.w	r3, r3, #16
 8008ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008aec:	61fa      	str	r2, [r7, #28]
 8008aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af0:	69b9      	ldr	r1, [r7, #24]
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	e841 2300 	strex	r3, r2, [r1]
 8008af8:	617b      	str	r3, [r7, #20]
   return(result);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1e3      	bne.n	8008ac8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f848 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b0c:	e023      	b.n	8008b56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <HAL_UART_IRQHandler+0x4ea>
 8008b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f929 	bl	8008d7e <UART_Transmit_IT>
    return;
 8008b2c:	e014      	b.n	8008b58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <HAL_UART_IRQHandler+0x514>
 8008b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f969 	bl	8008e1e <UART_EndTransmit_IT>
    return;
 8008b4c:	e004      	b.n	8008b58 <HAL_UART_IRQHandler+0x514>
    return;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_UART_IRQHandler+0x514>
      return;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_UART_IRQHandler+0x514>
      return;
 8008b56:	bf00      	nop
  }
}
 8008b58:	37e8      	adds	r7, #232	; 0xe8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop

08008b60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b090      	sub	sp, #64	; 0x40
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc4:	e050      	b.n	8008c68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d04c      	beq.n	8008c68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bd4:	f7f9 fc20 	bl	8002418 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d241      	bcs.n	8008c68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	330c      	adds	r3, #12
 8008c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c04:	637a      	str	r2, [r7, #52]	; 0x34
 8008c06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e5      	bne.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3314      	adds	r3, #20
 8008c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	613b      	str	r3, [r7, #16]
   return(result);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f023 0301 	bic.w	r3, r3, #1
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3314      	adds	r3, #20
 8008c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c38:	623a      	str	r2, [r7, #32]
 8008c3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	6a3a      	ldr	r2, [r7, #32]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e5      	bne.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e00f      	b.n	8008c88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	4013      	ands	r3, r2
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	461a      	mov	r2, r3
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d09f      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3740      	adds	r7, #64	; 0x40
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b095      	sub	sp, #84	; 0x54
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	330c      	adds	r3, #12
 8008cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cb8:	643a      	str	r2, [r7, #64]	; 0x40
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	f023 0301 	bic.w	r3, r3, #1
 8008ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e5      	bne.n	8008ccc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d119      	bne.n	8008d3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0310 	bic.w	r3, r3, #16
 8008d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d28:	61ba      	str	r2, [r7, #24]
 8008d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6979      	ldr	r1, [r7, #20]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	613b      	str	r3, [r7, #16]
   return(result);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e5      	bne.n	8008d08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d4a:	bf00      	nop
 8008d4c:	3754      	adds	r7, #84	; 0x54
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7ff ff09 	bl	8008b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b21      	cmp	r3, #33	; 0x21
 8008d90:	d13e      	bne.n	8008e10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d9a:	d114      	bne.n	8008dc6 <UART_Transmit_IT+0x48>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d110      	bne.n	8008dc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008db8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	1c9a      	adds	r2, r3, #2
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	621a      	str	r2, [r3, #32]
 8008dc4:	e008      	b.n	8008dd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	1c59      	adds	r1, r3, #1
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6211      	str	r1, [r2, #32]
 8008dd0:	781a      	ldrb	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4619      	mov	r1, r3
 8008de6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10f      	bne.n	8008e0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e000      	b.n	8008e12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e10:	2302      	movs	r3, #2
  }
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2220      	movs	r2, #32
 8008e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fe8e 	bl	8008b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b08c      	sub	sp, #48	; 0x30
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b22      	cmp	r3, #34	; 0x22
 8008e60:	f040 80ab 	bne.w	8008fba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e6c:	d117      	bne.n	8008e9e <UART_Receive_IT+0x50>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d113      	bne.n	8008e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e96:	1c9a      	adds	r2, r3, #2
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e9c:	e026      	b.n	8008eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb0:	d007      	beq.n	8008ec2 <UART_Receive_IT+0x74>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <UART_Receive_IT+0x82>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e008      	b.n	8008ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d15a      	bne.n	8008fb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0220 	bic.w	r2, r2, #32
 8008f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695a      	ldr	r2, [r3, #20]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0201 	bic.w	r2, r2, #1
 8008f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d135      	bne.n	8008fac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	613b      	str	r3, [r7, #16]
   return(result);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f023 0310 	bic.w	r3, r3, #16
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	330c      	adds	r3, #12
 8008f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f66:	623a      	str	r2, [r7, #32]
 8008f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	69f9      	ldr	r1, [r7, #28]
 8008f6c:	6a3a      	ldr	r2, [r7, #32]
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d10a      	bne.n	8008f9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fdf9 	bl	8008b9c <HAL_UARTEx_RxEventCallback>
 8008faa:	e002      	b.n	8008fb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fde1 	bl	8008b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e002      	b.n	8008fbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3730      	adds	r7, #48	; 0x30
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fc8:	b0c0      	sub	sp, #256	; 0x100
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	68d9      	ldr	r1, [r3, #12]
 8008fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	ea40 0301 	orr.w	r3, r0, r1
 8008fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	431a      	orrs	r2, r3
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	4313      	orrs	r3, r2
 800900c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800901c:	f021 010c 	bic.w	r1, r1, #12
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800902a:	430b      	orrs	r3, r1
 800902c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800902e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903e:	6999      	ldr	r1, [r3, #24]
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	ea40 0301 	orr.w	r3, r0, r1
 800904a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b8f      	ldr	r3, [pc, #572]	; (8009290 <UART_SetConfig+0x2cc>)
 8009054:	429a      	cmp	r2, r3
 8009056:	d005      	beq.n	8009064 <UART_SetConfig+0xa0>
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <UART_SetConfig+0x2d0>)
 8009060:	429a      	cmp	r2, r3
 8009062:	d104      	bne.n	800906e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009064:	f7fe f9ca 	bl	80073fc <HAL_RCC_GetPCLK2Freq>
 8009068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800906c:	e003      	b.n	8009076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800906e:	f7fe f9b1 	bl	80073d4 <HAL_RCC_GetPCLK1Freq>
 8009072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009080:	f040 810c 	bne.w	800929c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009088:	2200      	movs	r2, #0
 800908a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800908e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009096:	4622      	mov	r2, r4
 8009098:	462b      	mov	r3, r5
 800909a:	1891      	adds	r1, r2, r2
 800909c:	65b9      	str	r1, [r7, #88]	; 0x58
 800909e:	415b      	adcs	r3, r3
 80090a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090a6:	4621      	mov	r1, r4
 80090a8:	eb12 0801 	adds.w	r8, r2, r1
 80090ac:	4629      	mov	r1, r5
 80090ae:	eb43 0901 	adc.w	r9, r3, r1
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090c6:	4690      	mov	r8, r2
 80090c8:	4699      	mov	r9, r3
 80090ca:	4623      	mov	r3, r4
 80090cc:	eb18 0303 	adds.w	r3, r8, r3
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090d4:	462b      	mov	r3, r5
 80090d6:	eb49 0303 	adc.w	r3, r9, r3
 80090da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090f2:	460b      	mov	r3, r1
 80090f4:	18db      	adds	r3, r3, r3
 80090f6:	653b      	str	r3, [r7, #80]	; 0x50
 80090f8:	4613      	mov	r3, r2
 80090fa:	eb42 0303 	adc.w	r3, r2, r3
 80090fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009108:	f7f7 f866 	bl	80001d8 <__aeabi_uldivmod>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4b61      	ldr	r3, [pc, #388]	; (8009298 <UART_SetConfig+0x2d4>)
 8009112:	fba3 2302 	umull	r2, r3, r3, r2
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	011c      	lsls	r4, r3, #4
 800911a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800911e:	2200      	movs	r2, #0
 8009120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	1891      	adds	r1, r2, r2
 8009132:	64b9      	str	r1, [r7, #72]	; 0x48
 8009134:	415b      	adcs	r3, r3
 8009136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800913c:	4641      	mov	r1, r8
 800913e:	eb12 0a01 	adds.w	sl, r2, r1
 8009142:	4649      	mov	r1, r9
 8009144:	eb43 0b01 	adc.w	fp, r3, r1
 8009148:	f04f 0200 	mov.w	r2, #0
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800915c:	4692      	mov	sl, r2
 800915e:	469b      	mov	fp, r3
 8009160:	4643      	mov	r3, r8
 8009162:	eb1a 0303 	adds.w	r3, sl, r3
 8009166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800916a:	464b      	mov	r3, r9
 800916c:	eb4b 0303 	adc.w	r3, fp, r3
 8009170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009188:	460b      	mov	r3, r1
 800918a:	18db      	adds	r3, r3, r3
 800918c:	643b      	str	r3, [r7, #64]	; 0x40
 800918e:	4613      	mov	r3, r2
 8009190:	eb42 0303 	adc.w	r3, r2, r3
 8009194:	647b      	str	r3, [r7, #68]	; 0x44
 8009196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800919a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800919e:	f7f7 f81b 	bl	80001d8 <__aeabi_uldivmod>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	4b3b      	ldr	r3, [pc, #236]	; (8009298 <UART_SetConfig+0x2d4>)
 80091aa:	fba3 2301 	umull	r2, r3, r3, r1
 80091ae:	095b      	lsrs	r3, r3, #5
 80091b0:	2264      	movs	r2, #100	; 0x64
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	1acb      	subs	r3, r1, r3
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091be:	4b36      	ldr	r3, [pc, #216]	; (8009298 <UART_SetConfig+0x2d4>)
 80091c0:	fba3 2302 	umull	r2, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091cc:	441c      	add	r4, r3
 80091ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	1891      	adds	r1, r2, r2
 80091e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80091e8:	415b      	adcs	r3, r3
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091f0:	4641      	mov	r1, r8
 80091f2:	1851      	adds	r1, r2, r1
 80091f4:	6339      	str	r1, [r7, #48]	; 0x30
 80091f6:	4649      	mov	r1, r9
 80091f8:	414b      	adcs	r3, r1
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009208:	4659      	mov	r1, fp
 800920a:	00cb      	lsls	r3, r1, #3
 800920c:	4651      	mov	r1, sl
 800920e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009212:	4651      	mov	r1, sl
 8009214:	00ca      	lsls	r2, r1, #3
 8009216:	4610      	mov	r0, r2
 8009218:	4619      	mov	r1, r3
 800921a:	4603      	mov	r3, r0
 800921c:	4642      	mov	r2, r8
 800921e:	189b      	adds	r3, r3, r2
 8009220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009224:	464b      	mov	r3, r9
 8009226:	460a      	mov	r2, r1
 8009228:	eb42 0303 	adc.w	r3, r2, r3
 800922c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800923c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009244:	460b      	mov	r3, r1
 8009246:	18db      	adds	r3, r3, r3
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
 800924a:	4613      	mov	r3, r2
 800924c:	eb42 0303 	adc.w	r3, r2, r3
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800925a:	f7f6 ffbd 	bl	80001d8 <__aeabi_uldivmod>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <UART_SetConfig+0x2d4>)
 8009264:	fba3 1302 	umull	r1, r3, r3, r2
 8009268:	095b      	lsrs	r3, r3, #5
 800926a:	2164      	movs	r1, #100	; 0x64
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	3332      	adds	r3, #50	; 0x32
 8009276:	4a08      	ldr	r2, [pc, #32]	; (8009298 <UART_SetConfig+0x2d4>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	f003 0207 	and.w	r2, r3, #7
 8009282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4422      	add	r2, r4
 800928a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800928c:	e106      	b.n	800949c <UART_SetConfig+0x4d8>
 800928e:	bf00      	nop
 8009290:	40011000 	.word	0x40011000
 8009294:	40011400 	.word	0x40011400
 8009298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800929c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80092aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	1891      	adds	r1, r2, r2
 80092b4:	6239      	str	r1, [r7, #32]
 80092b6:	415b      	adcs	r3, r3
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092be:	4641      	mov	r1, r8
 80092c0:	1854      	adds	r4, r2, r1
 80092c2:	4649      	mov	r1, r9
 80092c4:	eb43 0501 	adc.w	r5, r3, r1
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	00eb      	lsls	r3, r5, #3
 80092d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d6:	00e2      	lsls	r2, r4, #3
 80092d8:	4614      	mov	r4, r2
 80092da:	461d      	mov	r5, r3
 80092dc:	4643      	mov	r3, r8
 80092de:	18e3      	adds	r3, r4, r3
 80092e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092e4:	464b      	mov	r3, r9
 80092e6:	eb45 0303 	adc.w	r3, r5, r3
 80092ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800930a:	4629      	mov	r1, r5
 800930c:	008b      	lsls	r3, r1, #2
 800930e:	4621      	mov	r1, r4
 8009310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009314:	4621      	mov	r1, r4
 8009316:	008a      	lsls	r2, r1, #2
 8009318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800931c:	f7f6 ff5c 	bl	80001d8 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4b60      	ldr	r3, [pc, #384]	; (80094a8 <UART_SetConfig+0x4e4>)
 8009326:	fba3 2302 	umull	r2, r3, r3, r2
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	011c      	lsls	r4, r3, #4
 800932e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009332:	2200      	movs	r2, #0
 8009334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800933c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	1891      	adds	r1, r2, r2
 8009346:	61b9      	str	r1, [r7, #24]
 8009348:	415b      	adcs	r3, r3
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009350:	4641      	mov	r1, r8
 8009352:	1851      	adds	r1, r2, r1
 8009354:	6139      	str	r1, [r7, #16]
 8009356:	4649      	mov	r1, r9
 8009358:	414b      	adcs	r3, r1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009368:	4659      	mov	r1, fp
 800936a:	00cb      	lsls	r3, r1, #3
 800936c:	4651      	mov	r1, sl
 800936e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009372:	4651      	mov	r1, sl
 8009374:	00ca      	lsls	r2, r1, #3
 8009376:	4610      	mov	r0, r2
 8009378:	4619      	mov	r1, r3
 800937a:	4603      	mov	r3, r0
 800937c:	4642      	mov	r2, r8
 800937e:	189b      	adds	r3, r3, r2
 8009380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009384:	464b      	mov	r3, r9
 8009386:	460a      	mov	r2, r1
 8009388:	eb42 0303 	adc.w	r3, r2, r3
 800938c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	67bb      	str	r3, [r7, #120]	; 0x78
 800939a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80093a8:	4649      	mov	r1, r9
 80093aa:	008b      	lsls	r3, r1, #2
 80093ac:	4641      	mov	r1, r8
 80093ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b2:	4641      	mov	r1, r8
 80093b4:	008a      	lsls	r2, r1, #2
 80093b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80093ba:	f7f6 ff0d 	bl	80001d8 <__aeabi_uldivmod>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <UART_SetConfig+0x4e4>)
 80093c6:	fba3 2301 	umull	r2, r3, r3, r1
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	2264      	movs	r2, #100	; 0x64
 80093ce:	fb02 f303 	mul.w	r3, r2, r3
 80093d2:	1acb      	subs	r3, r1, r3
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	3332      	adds	r3, #50	; 0x32
 80093d8:	4a33      	ldr	r2, [pc, #204]	; (80094a8 <UART_SetConfig+0x4e4>)
 80093da:	fba2 2303 	umull	r2, r3, r2, r3
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093e4:	441c      	add	r4, r3
 80093e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ea:	2200      	movs	r2, #0
 80093ec:	673b      	str	r3, [r7, #112]	; 0x70
 80093ee:	677a      	str	r2, [r7, #116]	; 0x74
 80093f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	1891      	adds	r1, r2, r2
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	415b      	adcs	r3, r3
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009404:	4641      	mov	r1, r8
 8009406:	1851      	adds	r1, r2, r1
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	4649      	mov	r1, r9
 800940c:	414b      	adcs	r3, r1
 800940e:	607b      	str	r3, [r7, #4]
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800941c:	4659      	mov	r1, fp
 800941e:	00cb      	lsls	r3, r1, #3
 8009420:	4651      	mov	r1, sl
 8009422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009426:	4651      	mov	r1, sl
 8009428:	00ca      	lsls	r2, r1, #3
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	4603      	mov	r3, r0
 8009430:	4642      	mov	r2, r8
 8009432:	189b      	adds	r3, r3, r2
 8009434:	66bb      	str	r3, [r7, #104]	; 0x68
 8009436:	464b      	mov	r3, r9
 8009438:	460a      	mov	r2, r1
 800943a:	eb42 0303 	adc.w	r3, r2, r3
 800943e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	663b      	str	r3, [r7, #96]	; 0x60
 800944a:	667a      	str	r2, [r7, #100]	; 0x64
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009458:	4649      	mov	r1, r9
 800945a:	008b      	lsls	r3, r1, #2
 800945c:	4641      	mov	r1, r8
 800945e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009462:	4641      	mov	r1, r8
 8009464:	008a      	lsls	r2, r1, #2
 8009466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800946a:	f7f6 feb5 	bl	80001d8 <__aeabi_uldivmod>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <UART_SetConfig+0x4e4>)
 8009474:	fba3 1302 	umull	r1, r3, r3, r2
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	2164      	movs	r1, #100	; 0x64
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	3332      	adds	r3, #50	; 0x32
 8009486:	4a08      	ldr	r2, [pc, #32]	; (80094a8 <UART_SetConfig+0x4e4>)
 8009488:	fba2 2303 	umull	r2, r3, r2, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	f003 020f 	and.w	r2, r3, #15
 8009492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4422      	add	r2, r4
 800949a:	609a      	str	r2, [r3, #8]
}
 800949c:	bf00      	nop
 800949e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094a2:	46bd      	mov	sp, r7
 80094a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094a8:	51eb851f 	.word	0x51eb851f

080094ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094ac:	b084      	sub	sp, #16
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	f107 001c 	add.w	r0, r7, #28
 80094ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d122      	bne.n	800950a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80094d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d105      	bne.n	80094fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fbee 	bl	800ace0 <USB_CoreReset>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
 8009508:	e01a      	b.n	8009540 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fbe2 	bl	800ace0 <USB_CoreReset>
 800951c:	4603      	mov	r3, r0
 800951e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
 8009532:	e005      	b.n	8009540 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10b      	bne.n	800955e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f043 0206 	orr.w	r2, r3, #6
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f043 0220 	orr.w	r2, r3, #32
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800956a:	b004      	add	sp, #16
 800956c:	4770      	bx	lr
	...

08009570 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4613      	mov	r3, r2
 800957c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d165      	bne.n	8009650 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4a41      	ldr	r2, [pc, #260]	; (800968c <USB_SetTurnaroundTime+0x11c>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d906      	bls.n	800959a <USB_SetTurnaroundTime+0x2a>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4a40      	ldr	r2, [pc, #256]	; (8009690 <USB_SetTurnaroundTime+0x120>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d202      	bcs.n	800959a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009594:	230f      	movs	r3, #15
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	e062      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	4a3c      	ldr	r2, [pc, #240]	; (8009690 <USB_SetTurnaroundTime+0x120>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d306      	bcc.n	80095b0 <USB_SetTurnaroundTime+0x40>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4a3b      	ldr	r2, [pc, #236]	; (8009694 <USB_SetTurnaroundTime+0x124>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d202      	bcs.n	80095b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095aa:	230e      	movs	r3, #14
 80095ac:	617b      	str	r3, [r7, #20]
 80095ae:	e057      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	4a38      	ldr	r2, [pc, #224]	; (8009694 <USB_SetTurnaroundTime+0x124>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d306      	bcc.n	80095c6 <USB_SetTurnaroundTime+0x56>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4a37      	ldr	r2, [pc, #220]	; (8009698 <USB_SetTurnaroundTime+0x128>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d202      	bcs.n	80095c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095c0:	230d      	movs	r3, #13
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	e04c      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4a33      	ldr	r2, [pc, #204]	; (8009698 <USB_SetTurnaroundTime+0x128>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d306      	bcc.n	80095dc <USB_SetTurnaroundTime+0x6c>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	4a32      	ldr	r2, [pc, #200]	; (800969c <USB_SetTurnaroundTime+0x12c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d802      	bhi.n	80095dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095d6:	230c      	movs	r3, #12
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	e041      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4a2f      	ldr	r2, [pc, #188]	; (800969c <USB_SetTurnaroundTime+0x12c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d906      	bls.n	80095f2 <USB_SetTurnaroundTime+0x82>
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4a2e      	ldr	r2, [pc, #184]	; (80096a0 <USB_SetTurnaroundTime+0x130>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d802      	bhi.n	80095f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095ec:	230b      	movs	r3, #11
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	e036      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4a2a      	ldr	r2, [pc, #168]	; (80096a0 <USB_SetTurnaroundTime+0x130>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d906      	bls.n	8009608 <USB_SetTurnaroundTime+0x98>
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4a29      	ldr	r2, [pc, #164]	; (80096a4 <USB_SetTurnaroundTime+0x134>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d802      	bhi.n	8009608 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009602:	230a      	movs	r3, #10
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	e02b      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4a26      	ldr	r2, [pc, #152]	; (80096a4 <USB_SetTurnaroundTime+0x134>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d906      	bls.n	800961e <USB_SetTurnaroundTime+0xae>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4a25      	ldr	r2, [pc, #148]	; (80096a8 <USB_SetTurnaroundTime+0x138>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d202      	bcs.n	800961e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009618:	2309      	movs	r3, #9
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	e020      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4a21      	ldr	r2, [pc, #132]	; (80096a8 <USB_SetTurnaroundTime+0x138>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d306      	bcc.n	8009634 <USB_SetTurnaroundTime+0xc4>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	4a20      	ldr	r2, [pc, #128]	; (80096ac <USB_SetTurnaroundTime+0x13c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d802      	bhi.n	8009634 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800962e:	2308      	movs	r3, #8
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	e015      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	4a1d      	ldr	r2, [pc, #116]	; (80096ac <USB_SetTurnaroundTime+0x13c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d906      	bls.n	800964a <USB_SetTurnaroundTime+0xda>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4a1c      	ldr	r2, [pc, #112]	; (80096b0 <USB_SetTurnaroundTime+0x140>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d202      	bcs.n	800964a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009644:	2307      	movs	r3, #7
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e00a      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800964a:	2306      	movs	r3, #6
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e007      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009656:	2309      	movs	r3, #9
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e001      	b.n	8009660 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800965c:	2309      	movs	r3, #9
 800965e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	029b      	lsls	r3, r3, #10
 8009674:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009678:	431a      	orrs	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	00d8acbf 	.word	0x00d8acbf
 8009690:	00e4e1c0 	.word	0x00e4e1c0
 8009694:	00f42400 	.word	0x00f42400
 8009698:	01067380 	.word	0x01067380
 800969c:	011a499f 	.word	0x011a499f
 80096a0:	01312cff 	.word	0x01312cff
 80096a4:	014ca43f 	.word	0x014ca43f
 80096a8:	016e3600 	.word	0x016e3600
 80096ac:	01a6ab1f 	.word	0x01a6ab1f
 80096b0:	01e84800 	.word	0x01e84800

080096b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f043 0201 	orr.w	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f023 0201 	bic.w	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d115      	bne.n	8009746 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009726:	2001      	movs	r0, #1
 8009728:	f7f8 fe82 	bl	8002430 <HAL_Delay>
      ms++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fa45 	bl	800abc2 <USB_GetMode>
 8009738:	4603      	mov	r3, r0
 800973a:	2b01      	cmp	r3, #1
 800973c:	d01e      	beq.n	800977c <USB_SetCurrentMode+0x84>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b31      	cmp	r3, #49	; 0x31
 8009742:	d9f0      	bls.n	8009726 <USB_SetCurrentMode+0x2e>
 8009744:	e01a      	b.n	800977c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d115      	bne.n	8009778 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009758:	2001      	movs	r0, #1
 800975a:	f7f8 fe69 	bl	8002430 <HAL_Delay>
      ms++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 fa2c 	bl	800abc2 <USB_GetMode>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <USB_SetCurrentMode+0x84>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b31      	cmp	r3, #49	; 0x31
 8009774:	d9f0      	bls.n	8009758 <USB_SetCurrentMode+0x60>
 8009776:	e001      	b.n	800977c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e005      	b.n	8009788 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b32      	cmp	r3, #50	; 0x32
 8009780:	d101      	bne.n	8009786 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e000      	b.n	8009788 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009790:	b084      	sub	sp, #16
 8009792:	b580      	push	{r7, lr}
 8009794:	b086      	sub	sp, #24
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800979e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	613b      	str	r3, [r7, #16]
 80097ae:	e009      	b.n	80097c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3340      	adds	r3, #64	; 0x40
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	2200      	movs	r2, #0
 80097bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	613b      	str	r3, [r7, #16]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2b0e      	cmp	r3, #14
 80097c8:	d9f2      	bls.n	80097b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80097ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11c      	bne.n	800980a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097de:	f043 0302 	orr.w	r3, r3, #2
 80097e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009800:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	639a      	str	r2, [r3, #56]	; 0x38
 8009808:	e00b      	b.n	8009822 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009828:	461a      	mov	r2, r3
 800982a:	2300      	movs	r3, #0
 800982c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009834:	4619      	mov	r1, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983c:	461a      	mov	r2, r3
 800983e:	680b      	ldr	r3, [r1, #0]
 8009840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	2b01      	cmp	r3, #1
 8009846:	d10c      	bne.n	8009862 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f965 	bl	8009b20 <USB_SetDevSpeed>
 8009856:	e008      	b.n	800986a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009858:	2101      	movs	r1, #1
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f960 	bl	8009b20 <USB_SetDevSpeed>
 8009860:	e003      	b.n	800986a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009862:	2103      	movs	r1, #3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f95b 	bl	8009b20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800986a:	2110      	movs	r1, #16
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f8f3 	bl	8009a58 <USB_FlushTxFifo>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f91f 	bl	8009ac0 <USB_FlushRxFifo>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	461a      	mov	r2, r3
 8009894:	2300      	movs	r3, #0
 8009896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	461a      	mov	r2, r3
 80098a0:	2300      	movs	r3, #0
 80098a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098aa:	461a      	mov	r2, r3
 80098ac:	2300      	movs	r3, #0
 80098ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b0:	2300      	movs	r3, #0
 80098b2:	613b      	str	r3, [r7, #16]
 80098b4:	e043      	b.n	800993e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098cc:	d118      	bne.n	8009900 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	461a      	mov	r2, r3
 80098e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	e013      	b.n	8009912 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	e008      	b.n	8009912 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	461a      	mov	r2, r3
 800990e:	2300      	movs	r3, #0
 8009910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991e:	461a      	mov	r2, r3
 8009920:	2300      	movs	r3, #0
 8009922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	461a      	mov	r2, r3
 8009932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	3301      	adds	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	429a      	cmp	r2, r3
 8009944:	d3b7      	bcc.n	80098b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009946:	2300      	movs	r3, #0
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	e043      	b.n	80099d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800995e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009962:	d118      	bne.n	8009996 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10a      	bne.n	8009980 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	461a      	mov	r2, r3
 8009978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e013      	b.n	80099a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	461a      	mov	r2, r3
 800998e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	e008      	b.n	80099a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	461a      	mov	r2, r3
 80099a4:	2300      	movs	r3, #0
 80099a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b4:	461a      	mov	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c6:	461a      	mov	r2, r3
 80099c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	3301      	adds	r3, #1
 80099d2:	613b      	str	r3, [r7, #16]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d3b7      	bcc.n	800994c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d105      	bne.n	8009a10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f043 0210 	orr.w	r2, r3, #16
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699a      	ldr	r2, [r3, #24]
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <USB_DevInit+0x2c4>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f043 0208 	orr.w	r2, r3, #8
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d107      	bne.n	8009a44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a3c:	f043 0304 	orr.w	r3, r3, #4
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a50:	b004      	add	sp, #16
 8009a52:	4770      	bx	lr
 8009a54:	803c3800 	.word	0x803c3800

08009a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4a13      	ldr	r2, [pc, #76]	; (8009abc <USB_FlushTxFifo+0x64>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d901      	bls.n	8009a78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e01b      	b.n	8009ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	daf2      	bge.n	8009a66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	019b      	lsls	r3, r3, #6
 8009a88:	f043 0220 	orr.w	r2, r3, #32
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4a08      	ldr	r2, [pc, #32]	; (8009abc <USB_FlushTxFifo+0x64>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d901      	bls.n	8009aa2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e006      	b.n	8009ab0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d0f0      	beq.n	8009a90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	00030d40 	.word	0x00030d40

08009ac0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a11      	ldr	r2, [pc, #68]	; (8009b1c <USB_FlushRxFifo+0x5c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d901      	bls.n	8009ade <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e018      	b.n	8009b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	daf2      	bge.n	8009acc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2210      	movs	r2, #16
 8009aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3301      	adds	r3, #1
 8009af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <USB_FlushRxFifo+0x5c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d901      	bls.n	8009b02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e006      	b.n	8009b10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	f003 0310 	and.w	r3, r3, #16
 8009b0a:	2b10      	cmp	r3, #16
 8009b0c:	d0f0      	beq.n	8009af0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	00030d40 	.word	0x00030d40

08009b20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	68f9      	ldr	r1, [r7, #12]
 8009b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b40:	4313      	orrs	r3, r2
 8009b42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b087      	sub	sp, #28
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f003 0306 	and.w	r3, r3, #6
 8009b6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d102      	bne.n	8009b78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]
 8009b76:	e00a      	b.n	8009b8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d002      	beq.n	8009b84 <USB_GetDevSpeed+0x32>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	d102      	bne.n	8009b8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b84:	2302      	movs	r3, #2
 8009b86:	75fb      	strb	r3, [r7, #23]
 8009b88:	e001      	b.n	8009b8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b8a:	230f      	movs	r3, #15
 8009b8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	785b      	ldrb	r3, [r3, #1]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d13a      	bne.n	8009c2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbe:	69da      	ldr	r2, [r3, #28]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	2101      	movs	r1, #1
 8009bca:	fa01 f303 	lsl.w	r3, r1, r3
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	68f9      	ldr	r1, [r7, #12]
 8009bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d155      	bne.n	8009c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	791b      	ldrb	r3, [r3, #4]
 8009c0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	059b      	lsls	r3, r3, #22
 8009c12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c14:	4313      	orrs	r3, r2
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	0151      	lsls	r1, r2, #5
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	e036      	b.n	8009c9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c34:	69da      	ldr	r2, [r3, #28]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	2101      	movs	r1, #1
 8009c40:	fa01 f303 	lsl.w	r3, r1, r3
 8009c44:	041b      	lsls	r3, r3, #16
 8009c46:	68f9      	ldr	r1, [r7, #12]
 8009c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d11a      	bne.n	8009c9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	791b      	ldrb	r3, [r3, #4]
 8009c80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c82:	430b      	orrs	r3, r1
 8009c84:	4313      	orrs	r3, r2
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
	...

08009cac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d161      	bne.n	8009d8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cde:	d11f      	bne.n	8009d20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	2101      	movs	r1, #1
 8009d32:	fa01 f303 	lsl.w	r3, r1, r3
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	43db      	mvns	r3, r3
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d40:	4013      	ands	r3, r2
 8009d42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	43db      	mvns	r3, r3
 8009d5e:	68f9      	ldr	r1, [r7, #12]
 8009d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d64:	4013      	ands	r3, r2
 8009d66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	0159      	lsls	r1, r3, #5
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	440b      	add	r3, r1
 8009d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d82:	4619      	mov	r1, r3
 8009d84:	4b35      	ldr	r3, [pc, #212]	; (8009e5c <USB_DeactivateEndpoint+0x1b0>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	600b      	str	r3, [r1, #0]
 8009d8a:	e060      	b.n	8009e4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009da2:	d11f      	bne.n	8009de4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	015a      	lsls	r2, r3, #5
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	0151      	lsls	r1, r2, #5
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	440a      	add	r2, r1
 8009dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	0151      	lsls	r1, r2, #5
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	440a      	add	r2, r1
 8009dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009de2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 030f 	and.w	r3, r3, #15
 8009df4:	2101      	movs	r1, #1
 8009df6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	43db      	mvns	r3, r3
 8009dfe:	68f9      	ldr	r1, [r7, #12]
 8009e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e04:	4013      	ands	r3, r2
 8009e06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	2101      	movs	r1, #1
 8009e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1e:	041b      	lsls	r3, r3, #16
 8009e20:	43db      	mvns	r3, r3
 8009e22:	68f9      	ldr	r1, [r7, #12]
 8009e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e28:	4013      	ands	r3, r2
 8009e2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	0159      	lsls	r1, r3, #5
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	440b      	add	r3, r1
 8009e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e46:	4619      	mov	r1, r3
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <USB_DeactivateEndpoint+0x1b4>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	ec337800 	.word	0xec337800
 8009e60:	eff37800 	.word	0xeff37800

08009e64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08a      	sub	sp, #40	; 0x28
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	f040 815c 	bne.w	800a13e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d132      	bne.n	8009ef4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009eac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ed0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	69ba      	ldr	r2, [r7, #24]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	69fa      	ldr	r2, [r7, #28]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eec:	0cdb      	lsrs	r3, r3, #19
 8009eee:	04db      	lsls	r3, r3, #19
 8009ef0:	6113      	str	r3, [r2, #16]
 8009ef2:	e074      	b.n	8009fde <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	69ba      	ldr	r2, [r7, #24]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	0cdb      	lsrs	r3, r3, #19
 8009f10:	04db      	lsls	r3, r3, #19
 8009f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	69ba      	ldr	r2, [r7, #24]
 8009f24:	0151      	lsls	r1, r2, #5
 8009f26:	69fa      	ldr	r2, [r7, #28]
 8009f28:	440a      	add	r2, r1
 8009f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6999      	ldr	r1, [r3, #24]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	440b      	add	r3, r1
 8009f50:	1e59      	subs	r1, r3, #1
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009f5c:	4b9d      	ldr	r3, [pc, #628]	; (800a1d4 <USB_EPStartXfer+0x370>)
 8009f5e:	400b      	ands	r3, r1
 8009f60:	69b9      	ldr	r1, [r7, #24]
 8009f62:	0148      	lsls	r0, r1, #5
 8009f64:	69f9      	ldr	r1, [r7, #28]
 8009f66:	4401      	add	r1, r0
 8009f68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7c:	691a      	ldr	r2, [r3, #16]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f86:	69b9      	ldr	r1, [r7, #24]
 8009f88:	0148      	lsls	r0, r1, #5
 8009f8a:	69f9      	ldr	r1, [r7, #28]
 8009f8c:	4401      	add	r1, r0
 8009f8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f92:	4313      	orrs	r3, r2
 8009f94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	791b      	ldrb	r3, [r3, #4]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d11f      	bne.n	8009fde <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	69fa      	ldr	r2, [r7, #28]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009fbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fdc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d14b      	bne.n	800a07c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d009      	beq.n	800a000 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	791b      	ldrb	r3, [r3, #4]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d128      	bne.n	800a05a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a014:	2b00      	cmp	r3, #0
 800a016:	d110      	bne.n	800a03a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	69fa      	ldr	r2, [r7, #28]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	e00f      	b.n	800a05a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a058:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a074:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	e133      	b.n	800a2e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a096:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a09a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	791b      	ldrb	r3, [r3, #4]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d015      	beq.n	800a0d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 811b 	beq.w	800a2e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	2101      	movs	r1, #1
 800a0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c4:	69f9      	ldr	r1, [r7, #28]
 800a0c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	634b      	str	r3, [r1, #52]	; 0x34
 800a0ce:	e109      	b.n	800a2e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d110      	bne.n	800a102 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	e00f      	b.n	800a122 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69ba      	ldr	r2, [r7, #24]
 800a112:	0151      	lsls	r1, r2, #5
 800a114:	69fa      	ldr	r2, [r7, #28]
 800a116:	440a      	add	r2, r1
 800a118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a120:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6919      	ldr	r1, [r3, #16]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	b298      	uxth	r0, r3
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	4603      	mov	r3, r0
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fade 	bl	800a6f8 <USB_WritePacket>
 800a13c:	e0d2      	b.n	800a2e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	69ba      	ldr	r2, [r7, #24]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a158:	0cdb      	lsrs	r3, r3, #19
 800a15a:	04db      	lsls	r3, r3, #19
 800a15c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	69ba      	ldr	r2, [r7, #24]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	69fa      	ldr	r2, [r7, #28]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a178:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a17c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a180:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d126      	bne.n	800a1d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a196:	691a      	ldr	r2, [r3, #16]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1a0:	69b9      	ldr	r1, [r7, #24]
 800a1a2:	0148      	lsls	r0, r1, #5
 800a1a4:	69f9      	ldr	r1, [r7, #28]
 800a1a6:	4401      	add	r1, r0
 800a1a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ce:	6113      	str	r3, [r2, #16]
 800a1d0:	e03a      	b.n	800a248 <USB_EPStartXfer+0x3e4>
 800a1d2:	bf00      	nop
 800a1d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	699a      	ldr	r2, [r3, #24]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	1e5a      	subs	r2, r3, #1
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	fb03 f202 	mul.w	r2, r3, r2
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	8afb      	ldrh	r3, [r7, #22]
 800a20c:	04d9      	lsls	r1, r3, #19
 800a20e:	4b38      	ldr	r3, [pc, #224]	; (800a2f0 <USB_EPStartXfer+0x48c>)
 800a210:	400b      	ands	r3, r1
 800a212:	69b9      	ldr	r1, [r7, #24]
 800a214:	0148      	lsls	r0, r1, #5
 800a216:	69f9      	ldr	r1, [r7, #28]
 800a218:	4401      	add	r1, r0
 800a21a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a238:	69b9      	ldr	r1, [r7, #24]
 800a23a:	0148      	lsls	r0, r1, #5
 800a23c:	69f9      	ldr	r1, [r7, #28]
 800a23e:	4401      	add	r1, r0
 800a240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a244:	4313      	orrs	r3, r2
 800a246:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d10d      	bne.n	800a26a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d009      	beq.n	800a26a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6919      	ldr	r1, [r3, #16]
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a266:	460a      	mov	r2, r1
 800a268:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	791b      	ldrb	r3, [r3, #4]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d128      	bne.n	800a2c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d110      	bne.n	800a2a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	69fa      	ldr	r2, [r7, #28]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a29c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	e00f      	b.n	800a2c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	1ff80000 	.word	0x1ff80000

0800a2f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	4613      	mov	r3, r2
 800a300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	2b01      	cmp	r3, #1
 800a312:	f040 80ce 	bne.w	800a4b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d132      	bne.n	800a384 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	0151      	lsls	r1, r2, #5
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	440a      	add	r2, r1
 800a334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a338:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a33c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	440a      	add	r2, r1
 800a358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37c:	0cdb      	lsrs	r3, r3, #19
 800a37e:	04db      	lsls	r3, r3, #19
 800a380:	6113      	str	r3, [r2, #16]
 800a382:	e04e      	b.n	800a422 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39e:	0cdb      	lsrs	r3, r3, #19
 800a3a0:	04db      	lsls	r3, r3, #19
 800a3a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	699a      	ldr	r2, [r3, #24]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d903      	bls.n	800a3dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	693a      	ldr	r2, [r7, #16]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	4413      	add	r3, r2
 800a404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a412:	6939      	ldr	r1, [r7, #16]
 800a414:	0148      	lsls	r0, r1, #5
 800a416:	6979      	ldr	r1, [r7, #20]
 800a418:	4401      	add	r1, r0
 800a41a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a41e:	4313      	orrs	r3, r2
 800a420:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d11e      	bne.n	800a466 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43c:	461a      	mov	r2, r3
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	0151      	lsls	r1, r2, #5
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	440a      	add	r2, r1
 800a45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	e097      	b.n	800a596 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a480:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a484:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 8083 	beq.w	800a596 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	f003 030f 	and.w	r3, r3, #15
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a6:	6979      	ldr	r1, [r7, #20]
 800a4a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	634b      	str	r3, [r1, #52]	; 0x34
 800a4b0:	e071      	b.n	800a596 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	0151      	lsls	r1, r2, #5
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	440a      	add	r2, r1
 800a4c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4cc:	0cdb      	lsrs	r3, r3, #19
 800a4ce:	04db      	lsls	r3, r3, #19
 800a4d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a52c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a544:	6939      	ldr	r1, [r7, #16]
 800a546:	0148      	lsls	r0, r1, #5
 800a548:	6979      	ldr	r1, [r7, #20]
 800a54a:	4401      	add	r1, r0
 800a54c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a550:	4313      	orrs	r3, r2
 800a552:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d10d      	bne.n	800a576 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d009      	beq.n	800a576 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6919      	ldr	r1, [r3, #16]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a572:	460a      	mov	r2, r1
 800a574:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	0151      	lsls	r1, r2, #5
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	440a      	add	r2, r1
 800a58c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a594:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	785b      	ldrb	r3, [r3, #1]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d14a      	bne.n	800a658 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5da:	f040 8086 	bne.w	800a6ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	7812      	ldrb	r2, [r2, #0]
 800a5f2:	0151      	lsls	r1, r2, #5
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	440a      	add	r2, r1
 800a5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a600:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	7812      	ldrb	r2, [r2, #0]
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a624:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a632:	4293      	cmp	r3, r2
 800a634:	d902      	bls.n	800a63c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	75fb      	strb	r3, [r7, #23]
          break;
 800a63a:	e056      	b.n	800a6ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a654:	d0e7      	beq.n	800a626 <USB_EPStopXfer+0x82>
 800a656:	e048      	b.n	800a6ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a66c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a670:	d13b      	bne.n	800a6ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	7812      	ldrb	r2, [r2, #0]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a690:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a694:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	7812      	ldrb	r2, [r2, #0]
 800a6aa:	0151      	lsls	r1, r2, #5
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d902      	bls.n	800a6d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a6ce:	e00c      	b.n	800a6ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6e8:	d0e7      	beq.n	800a6ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b089      	sub	sp, #36	; 0x24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	4611      	mov	r1, r2
 800a704:	461a      	mov	r2, r3
 800a706:	460b      	mov	r3, r1
 800a708:	71fb      	strb	r3, [r7, #7]
 800a70a:	4613      	mov	r3, r2
 800a70c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d123      	bne.n	800a766 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a71e:	88bb      	ldrh	r3, [r7, #4]
 800a720:	3303      	adds	r3, #3
 800a722:	089b      	lsrs	r3, r3, #2
 800a724:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a726:	2300      	movs	r3, #0
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	e018      	b.n	800a75e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	031a      	lsls	r2, r3, #12
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	4413      	add	r3, r2
 800a734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a738:	461a      	mov	r2, r3
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3301      	adds	r3, #1
 800a744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	3301      	adds	r3, #1
 800a74a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	3301      	adds	r3, #1
 800a750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	3301      	adds	r3, #1
 800a756:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	d3e2      	bcc.n	800a72c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3724      	adds	r7, #36	; 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a774:	b480      	push	{r7}
 800a776:	b08b      	sub	sp, #44	; 0x2c
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	089b      	lsrs	r3, r3, #2
 800a78e:	b29b      	uxth	r3, r3
 800a790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a79a:	2300      	movs	r3, #0
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	e014      	b.n	800a7ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	623b      	str	r3, [r7, #32]
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d3e6      	bcc.n	800a7a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7d2:	8bfb      	ldrh	r3, [r7, #30]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01e      	beq.n	800a816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	6812      	ldr	r2, [r2, #0]
 800a7ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	701a      	strb	r2, [r3, #0]
      i++;
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	3301      	adds	r3, #1
 800a802:	623b      	str	r3, [r7, #32]
      pDest++;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	3301      	adds	r3, #1
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a80a:	8bfb      	ldrh	r3, [r7, #30]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a810:	8bfb      	ldrh	r3, [r7, #30]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1ea      	bne.n	800a7ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a818:	4618      	mov	r0, r3
 800a81a:	372c      	adds	r7, #44	; 0x2c
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	785b      	ldrb	r3, [r3, #1]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d12c      	bne.n	800a89a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	db12      	blt.n	800a878 <USB_EPSetStall+0x54>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a872:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a876:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	e02b      	b.n	800a8f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	db12      	blt.n	800a8d2 <USB_EPSetStall+0xae>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00f      	beq.n	800a8d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	0151      	lsls	r1, r2, #5
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a8f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d128      	bne.n	800a96e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a93a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	791b      	ldrb	r3, [r3, #4]
 800a940:	2b03      	cmp	r3, #3
 800a942:	d003      	beq.n	800a94c <USB_EPClearStall+0x4c>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	791b      	ldrb	r3, [r3, #4]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d138      	bne.n	800a9be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	e027      	b.n	800a9be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	0151      	lsls	r1, r2, #5
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	440a      	add	r2, r1
 800a984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a988:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a98c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	791b      	ldrb	r3, [r3, #4]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d003      	beq.n	800a99e <USB_EPClearStall+0x9e>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d10f      	bne.n	800a9be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a9ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa06:	4313      	orrs	r3, r2
 800aa08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa32:	f023 0303 	bic.w	r3, r3, #3
 800aa36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa46:	f023 0302 	bic.w	r3, r3, #2
 800aa4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa74:	f023 0303 	bic.w	r3, r3, #3
 800aa78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa88:	f043 0302 	orr.w	r3, r3, #2
 800aa8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	4013      	ands	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	4013      	ands	r3, r2
 800aae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	0c1b      	lsrs	r3, r3, #16
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	4013      	ands	r3, r2
 800ab18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	b29b      	uxth	r3, r3
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	460b      	mov	r3, r1
 800ab34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	4013      	ands	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab58:	68bb      	ldr	r3, [r7, #8]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	fa22 f303 	lsr.w	r3, r2, r3
 800ab96:	01db      	lsls	r3, r3, #7
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4013      	ands	r3, r2
 800abb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abb4:	68bb      	ldr	r3, [r7, #8]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0301 	and.w	r3, r3, #1
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800abfc:	f023 0307 	bic.w	r3, r3, #7
 800ac00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	333c      	adds	r3, #60	; 0x3c
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	4a26      	ldr	r2, [pc, #152]	; (800acdc <USB_EP0_OutStart+0xb8>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d90a      	bls.n	800ac5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac58:	d101      	bne.n	800ac5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e037      	b.n	800acce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	461a      	mov	r2, r3
 800ac66:	2300      	movs	r3, #0
 800ac68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac8c:	f043 0318 	orr.w	r3, r3, #24
 800ac90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aca4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d10f      	bne.n	800accc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800acca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	4f54300a 	.word	0x4f54300a

0800ace0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4a13      	ldr	r2, [pc, #76]	; (800ad44 <USB_CoreReset+0x64>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d901      	bls.n	800acfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e01b      	b.n	800ad36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	daf2      	bge.n	800acec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	f043 0201 	orr.w	r2, r3, #1
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <USB_CoreReset+0x64>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d901      	bls.n	800ad28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e006      	b.n	800ad36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d0f0      	beq.n	800ad16 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	00030d40 	.word	0x00030d40

0800ad48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	4613      	mov	r3, r2
 800ad54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad56:	2301      	movs	r3, #1
 800ad58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad5e:	4b1f      	ldr	r3, [pc, #124]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad60:	7a5b      	ldrb	r3, [r3, #9]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d131      	bne.n	800adcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad68:	4b1c      	ldr	r3, [pc, #112]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad6a:	7a5b      	ldrb	r3, [r3, #9]
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4b1a      	ldr	r3, [pc, #104]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad72:	2100      	movs	r1, #0
 800ad74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad76:	4b19      	ldr	r3, [pc, #100]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad78:	7a5b      	ldrb	r3, [r3, #9]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	4a17      	ldr	r2, [pc, #92]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad88:	7a5b      	ldrb	r3, [r3, #9]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad90:	4413      	add	r3, r2
 800ad92:	79fa      	ldrb	r2, [r7, #7]
 800ad94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad96:	4b11      	ldr	r3, [pc, #68]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ad98:	7a5b      	ldrb	r3, [r3, #9]
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	b2d1      	uxtb	r1, r2
 800ada0:	4a0e      	ldr	r2, [pc, #56]	; (800addc <FATFS_LinkDriverEx+0x94>)
 800ada2:	7251      	strb	r1, [r2, #9]
 800ada4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ada6:	7dbb      	ldrb	r3, [r7, #22]
 800ada8:	3330      	adds	r3, #48	; 0x30
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	3301      	adds	r3, #1
 800adb4:	223a      	movs	r2, #58	; 0x3a
 800adb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3302      	adds	r3, #2
 800adbc:	222f      	movs	r2, #47	; 0x2f
 800adbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	3303      	adds	r3, #3
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800adce:	4618      	mov	r0, r3
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	200025bc 	.word	0x200025bc

0800ade0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800adea:	2200      	movs	r2, #0
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff ffaa 	bl	800ad48 <FATFS_LinkDriverEx>
 800adf4:	4603      	mov	r3, r0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae10:	f7f7 fa46 	bl	80022a0 <USBD_static_malloc>
 800ae14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d109      	bne.n	800ae30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	32b0      	adds	r2, #176	; 0xb0
 800ae26:	2100      	movs	r1, #0
 800ae28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e0d4      	b.n	800afda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ae30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ae34:	2100      	movs	r1, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f001 ff64 	bl	800cd04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32b0      	adds	r2, #176	; 0xb0
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32b0      	adds	r2, #176	; 0xb0
 800ae56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7c1b      	ldrb	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d138      	bne.n	800aeda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ae68:	4b5e      	ldr	r3, [pc, #376]	; (800afe4 <USBD_CDC_Init+0x1e4>)
 800ae6a:	7819      	ldrb	r1, [r3, #0]
 800ae6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae70:	2202      	movs	r2, #2
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7f7 f8f1 	bl	800205a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae78:	4b5a      	ldr	r3, [pc, #360]	; (800afe4 <USBD_CDC_Init+0x1e4>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	f003 020f 	and.w	r2, r3, #15
 800ae80:	6879      	ldr	r1, [r7, #4]
 800ae82:	4613      	mov	r3, r2
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4413      	add	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	440b      	add	r3, r1
 800ae8c:	3324      	adds	r3, #36	; 0x24
 800ae8e:	2201      	movs	r2, #1
 800ae90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae92:	4b55      	ldr	r3, [pc, #340]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800ae94:	7819      	ldrb	r1, [r3, #0]
 800ae96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7f7 f8dc 	bl	800205a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aea2:	4b51      	ldr	r3, [pc, #324]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 020f 	and.w	r2, r3, #15
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	440b      	add	r3, r1
 800aeb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeba:	2201      	movs	r2, #1
 800aebc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aebe:	4b4b      	ldr	r3, [pc, #300]	; (800afec <USBD_CDC_Init+0x1ec>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f003 020f 	and.w	r2, r3, #15
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	4613      	mov	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	440b      	add	r3, r1
 800aed2:	3326      	adds	r3, #38	; 0x26
 800aed4:	2210      	movs	r2, #16
 800aed6:	801a      	strh	r2, [r3, #0]
 800aed8:	e035      	b.n	800af46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aeda:	4b42      	ldr	r3, [pc, #264]	; (800afe4 <USBD_CDC_Init+0x1e4>)
 800aedc:	7819      	ldrb	r1, [r3, #0]
 800aede:	2340      	movs	r3, #64	; 0x40
 800aee0:	2202      	movs	r2, #2
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7f7 f8b9 	bl	800205a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aee8:	4b3e      	ldr	r3, [pc, #248]	; (800afe4 <USBD_CDC_Init+0x1e4>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	f003 020f 	and.w	r2, r3, #15
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	3324      	adds	r3, #36	; 0x24
 800aefe:	2201      	movs	r2, #1
 800af00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af02:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800af04:	7819      	ldrb	r1, [r3, #0]
 800af06:	2340      	movs	r3, #64	; 0x40
 800af08:	2202      	movs	r2, #2
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7f7 f8a5 	bl	800205a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af10:	4b35      	ldr	r3, [pc, #212]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 020f 	and.w	r2, r3, #15
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af28:	2201      	movs	r2, #1
 800af2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af2c:	4b2f      	ldr	r3, [pc, #188]	; (800afec <USBD_CDC_Init+0x1ec>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 020f 	and.w	r2, r3, #15
 800af34:	6879      	ldr	r1, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4413      	add	r3, r2
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	440b      	add	r3, r1
 800af40:	3326      	adds	r3, #38	; 0x26
 800af42:	2210      	movs	r2, #16
 800af44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af46:	4b29      	ldr	r3, [pc, #164]	; (800afec <USBD_CDC_Init+0x1ec>)
 800af48:	7819      	ldrb	r1, [r3, #0]
 800af4a:	2308      	movs	r3, #8
 800af4c:	2203      	movs	r2, #3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7f7 f883 	bl	800205a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800af54:	4b25      	ldr	r3, [pc, #148]	; (800afec <USBD_CDC_Init+0x1ec>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	f003 020f 	and.w	r2, r3, #15
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	440b      	add	r3, r1
 800af68:	3324      	adds	r3, #36	; 0x24
 800af6a:	2201      	movs	r2, #1
 800af6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	33b0      	adds	r3, #176	; 0xb0
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800afa4:	2302      	movs	r3, #2
 800afa6:	e018      	b.n	800afda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	7c1b      	ldrb	r3, [r3, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800afb2:	7819      	ldrb	r1, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f7 f93a 	bl	8002238 <USBD_LL_PrepareReceive>
 800afc4:	e008      	b.n	800afd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <USBD_CDC_Init+0x1e8>)
 800afc8:	7819      	ldrb	r1, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afd0:	2340      	movs	r3, #64	; 0x40
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7f7 f930 	bl	8002238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2000013b 	.word	0x2000013b
 800afe8:	2000013c 	.word	0x2000013c
 800afec:	2000013d 	.word	0x2000013d

0800aff0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800affc:	4b3a      	ldr	r3, [pc, #232]	; (800b0e8 <USBD_CDC_DeInit+0xf8>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f7 f84f 	bl	80020a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b008:	4b37      	ldr	r3, [pc, #220]	; (800b0e8 <USBD_CDC_DeInit+0xf8>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	f003 020f 	and.w	r2, r3, #15
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	3324      	adds	r3, #36	; 0x24
 800b01e:	2200      	movs	r2, #0
 800b020:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b022:	4b32      	ldr	r3, [pc, #200]	; (800b0ec <USBD_CDC_DeInit+0xfc>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7f7 f83c 	bl	80020a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b02e:	4b2f      	ldr	r3, [pc, #188]	; (800b0ec <USBD_CDC_DeInit+0xfc>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	f003 020f 	and.w	r2, r3, #15
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4613      	mov	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	440b      	add	r3, r1
 800b042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b046:	2200      	movs	r2, #0
 800b048:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b04a:	4b29      	ldr	r3, [pc, #164]	; (800b0f0 <USBD_CDC_DeInit+0x100>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7f7 f828 	bl	80020a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b056:	4b26      	ldr	r3, [pc, #152]	; (800b0f0 <USBD_CDC_DeInit+0x100>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 020f 	and.w	r2, r3, #15
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	440b      	add	r3, r1
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	2200      	movs	r2, #0
 800b06e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b070:	4b1f      	ldr	r3, [pc, #124]	; (800b0f0 <USBD_CDC_DeInit+0x100>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	f003 020f 	and.w	r2, r3, #15
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	440b      	add	r3, r1
 800b084:	3326      	adds	r3, #38	; 0x26
 800b086:	2200      	movs	r2, #0
 800b088:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	32b0      	adds	r2, #176	; 0xb0
 800b094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01f      	beq.n	800b0dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	33b0      	adds	r3, #176	; 0xb0
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	32b0      	adds	r2, #176	; 0xb0
 800b0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f7 f8fc 	bl	80022bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	32b0      	adds	r2, #176	; 0xb0
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	2000013b 	.word	0x2000013b
 800b0ec:	2000013c 	.word	0x2000013c
 800b0f0:	2000013d 	.word	0x2000013d

0800b0f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	32b0      	adds	r2, #176	; 0xb0
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	e0bf      	b.n	800b2a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d050      	beq.n	800b1d2 <USBD_CDC_Setup+0xde>
 800b130:	2b20      	cmp	r3, #32
 800b132:	f040 80af 	bne.w	800b294 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	88db      	ldrh	r3, [r3, #6]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d03a      	beq.n	800b1b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b25b      	sxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	da1b      	bge.n	800b180 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	33b0      	adds	r3, #176	; 0xb0
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b15e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	88d2      	ldrh	r2, [r2, #6]
 800b164:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	2b07      	cmp	r3, #7
 800b16c:	bf28      	it	cs
 800b16e:	2307      	movcs	r3, #7
 800b170:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	89fa      	ldrh	r2, [r7, #14]
 800b176:	4619      	mov	r1, r3
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 fd43 	bl	800cc04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b17e:	e090      	b.n	800b2a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	785a      	ldrb	r2, [r3, #1]
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	88db      	ldrh	r3, [r3, #6]
 800b18e:	2b3f      	cmp	r3, #63	; 0x3f
 800b190:	d803      	bhi.n	800b19a <USBD_CDC_Setup+0xa6>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	88db      	ldrh	r3, [r3, #6]
 800b196:	b2da      	uxtb	r2, r3
 800b198:	e000      	b.n	800b19c <USBD_CDC_Setup+0xa8>
 800b19a:	2240      	movs	r2, #64	; 0x40
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b1a2:	6939      	ldr	r1, [r7, #16]
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 fd55 	bl	800cc5c <USBD_CtlPrepareRx>
      break;
 800b1b2:	e076      	b.n	800b2a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	33b0      	adds	r3, #176	; 0xb0
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	7850      	ldrb	r0, [r2, #1]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	4798      	blx	r3
      break;
 800b1d0:	e067      	b.n	800b2a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b0b      	cmp	r3, #11
 800b1d8:	d851      	bhi.n	800b27e <USBD_CDC_Setup+0x18a>
 800b1da:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBD_CDC_Setup+0xec>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b211 	.word	0x0800b211
 800b1e4:	0800b28d 	.word	0x0800b28d
 800b1e8:	0800b27f 	.word	0x0800b27f
 800b1ec:	0800b27f 	.word	0x0800b27f
 800b1f0:	0800b27f 	.word	0x0800b27f
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b27f 	.word	0x0800b27f
 800b1fc:	0800b27f 	.word	0x0800b27f
 800b200:	0800b27f 	.word	0x0800b27f
 800b204:	0800b27f 	.word	0x0800b27f
 800b208:	0800b23b 	.word	0x0800b23b
 800b20c:	0800b265 	.word	0x0800b265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d107      	bne.n	800b22c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b21c:	f107 030a 	add.w	r3, r7, #10
 800b220:	2202      	movs	r2, #2
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 fced 	bl	800cc04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b22a:	e032      	b.n	800b292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 fc77 	bl	800cb22 <USBD_CtlError>
            ret = USBD_FAIL;
 800b234:	2303      	movs	r3, #3
 800b236:	75fb      	strb	r3, [r7, #23]
          break;
 800b238:	e02b      	b.n	800b292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b03      	cmp	r3, #3
 800b244:	d107      	bne.n	800b256 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b246:	f107 030d 	add.w	r3, r7, #13
 800b24a:	2201      	movs	r2, #1
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fcd8 	bl	800cc04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b254:	e01d      	b.n	800b292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fc62 	bl	800cb22 <USBD_CtlError>
            ret = USBD_FAIL;
 800b25e:	2303      	movs	r3, #3
 800b260:	75fb      	strb	r3, [r7, #23]
          break;
 800b262:	e016      	b.n	800b292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d00f      	beq.n	800b290 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 fc55 	bl	800cb22 <USBD_CtlError>
            ret = USBD_FAIL;
 800b278:	2303      	movs	r3, #3
 800b27a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b27c:	e008      	b.n	800b290 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fc4e 	bl	800cb22 <USBD_CtlError>
          ret = USBD_FAIL;
 800b286:	2303      	movs	r3, #3
 800b288:	75fb      	strb	r3, [r7, #23]
          break;
 800b28a:	e002      	b.n	800b292 <USBD_CDC_Setup+0x19e>
          break;
 800b28c:	bf00      	nop
 800b28e:	e008      	b.n	800b2a2 <USBD_CDC_Setup+0x1ae>
          break;
 800b290:	bf00      	nop
      }
      break;
 800b292:	e006      	b.n	800b2a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fc43 	bl	800cb22 <USBD_CtlError>
      ret = USBD_FAIL;
 800b29c:	2303      	movs	r3, #3
 800b29e:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32b0      	adds	r2, #176	; 0xb0
 800b2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e065      	b.n	800b3a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	32b0      	adds	r2, #176	; 0xb0
 800b2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b2e6:	78fb      	ldrb	r3, [r7, #3]
 800b2e8:	f003 020f 	and.w	r2, r3, #15
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	440b      	add	r3, r1
 800b2f8:	3318      	adds	r3, #24
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d02f      	beq.n	800b360 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	f003 020f 	and.w	r2, r3, #15
 800b306:	6879      	ldr	r1, [r7, #4]
 800b308:	4613      	mov	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4413      	add	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	440b      	add	r3, r1
 800b312:	3318      	adds	r3, #24
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	78fb      	ldrb	r3, [r7, #3]
 800b318:	f003 010f 	and.w	r1, r3, #15
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	460b      	mov	r3, r1
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	440b      	add	r3, r1
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4403      	add	r3, r0
 800b328:	3348      	adds	r3, #72	; 0x48
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b330:	fb01 f303 	mul.w	r3, r1, r3
 800b334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b336:	2b00      	cmp	r3, #0
 800b338:	d112      	bne.n	800b360 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	f003 020f 	and.w	r2, r3, #15
 800b340:	6879      	ldr	r1, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	440b      	add	r3, r1
 800b34c:	3318      	adds	r3, #24
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b352:	78f9      	ldrb	r1, [r7, #3]
 800b354:	2300      	movs	r3, #0
 800b356:	2200      	movs	r2, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7f6 ff4c 	bl	80021f6 <USBD_LL_Transmit>
 800b35e:	e01f      	b.n	800b3a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	33b0      	adds	r3, #176	; 0xb0
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d010      	beq.n	800b3a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	33b0      	adds	r3, #176	; 0xb0
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b39c:	78fa      	ldrb	r2, [r7, #3]
 800b39e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	32b0      	adds	r2, #176	; 0xb0
 800b3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	32b0      	adds	r2, #176	; 0xb0
 800b3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e01a      	b.n	800b412 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3dc:	78fb      	ldrb	r3, [r7, #3]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7f6 ff4a 	bl	800227a <USBD_LL_GetRxDataSize>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	33b0      	adds	r3, #176	; 0xb0
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b40c:	4611      	mov	r1, r2
 800b40e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	32b0      	adds	r2, #176	; 0xb0
 800b42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e025      	b.n	800b488 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	33b0      	adds	r3, #176	; 0xb0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <USBD_CDC_EP0_RxReady+0x6c>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b456:	2bff      	cmp	r3, #255	; 0xff
 800b458:	d015      	beq.n	800b486 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	33b0      	adds	r3, #176	; 0xb0
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b472:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b47a:	b292      	uxth	r2, r2
 800b47c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	22ff      	movs	r2, #255	; 0xff
 800b482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b498:	2182      	movs	r1, #130	; 0x82
 800b49a:	4818      	ldr	r0, [pc, #96]	; (800b4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b49c:	f000 fd09 	bl	800beb2 <USBD_GetEpDesc>
 800b4a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	4815      	ldr	r0, [pc, #84]	; (800b4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4a6:	f000 fd04 	bl	800beb2 <USBD_GetEpDesc>
 800b4aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4ac:	2181      	movs	r1, #129	; 0x81
 800b4ae:	4813      	ldr	r0, [pc, #76]	; (800b4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b4b0:	f000 fcff 	bl	800beb2 <USBD_GetEpDesc>
 800b4b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	2210      	movs	r2, #16
 800b4c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d006      	beq.n	800b4d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d0:	711a      	strb	r2, [r3, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d006      	beq.n	800b4ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e4:	711a      	strb	r2, [r3, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2243      	movs	r2, #67	; 0x43
 800b4ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4f0:	4b02      	ldr	r3, [pc, #8]	; (800b4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	200000f8 	.word	0x200000f8

0800b500 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b508:	2182      	movs	r1, #130	; 0x82
 800b50a:	4818      	ldr	r0, [pc, #96]	; (800b56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b50c:	f000 fcd1 	bl	800beb2 <USBD_GetEpDesc>
 800b510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b512:	2101      	movs	r1, #1
 800b514:	4815      	ldr	r0, [pc, #84]	; (800b56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b516:	f000 fccc 	bl	800beb2 <USBD_GetEpDesc>
 800b51a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b51c:	2181      	movs	r1, #129	; 0x81
 800b51e:	4813      	ldr	r0, [pc, #76]	; (800b56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b520:	f000 fcc7 	bl	800beb2 <USBD_GetEpDesc>
 800b524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2210      	movs	r2, #16
 800b530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d006      	beq.n	800b546 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	2200      	movs	r2, #0
 800b53c:	711a      	strb	r2, [r3, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f042 0202 	orr.w	r2, r2, #2
 800b544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d006      	beq.n	800b55a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	711a      	strb	r2, [r3, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f042 0202 	orr.w	r2, r2, #2
 800b558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2243      	movs	r2, #67	; 0x43
 800b55e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200000f8 	.word	0x200000f8

0800b570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b578:	2182      	movs	r1, #130	; 0x82
 800b57a:	4818      	ldr	r0, [pc, #96]	; (800b5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b57c:	f000 fc99 	bl	800beb2 <USBD_GetEpDesc>
 800b580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b582:	2101      	movs	r1, #1
 800b584:	4815      	ldr	r0, [pc, #84]	; (800b5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b586:	f000 fc94 	bl	800beb2 <USBD_GetEpDesc>
 800b58a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b58c:	2181      	movs	r1, #129	; 0x81
 800b58e:	4813      	ldr	r0, [pc, #76]	; (800b5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b590:	f000 fc8f 	bl	800beb2 <USBD_GetEpDesc>
 800b594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2210      	movs	r2, #16
 800b5a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d006      	beq.n	800b5b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5b0:	711a      	strb	r2, [r3, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d006      	beq.n	800b5ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5c4:	711a      	strb	r2, [r3, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2243      	movs	r2, #67	; 0x43
 800b5ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5d0:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3718      	adds	r7, #24
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	200000f8 	.word	0x200000f8

0800b5e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	220a      	movs	r2, #10
 800b5ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5ee:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	200000b4 	.word	0x200000b4

0800b600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b610:	2303      	movs	r3, #3
 800b612:	e009      	b.n	800b628 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	33b0      	adds	r3, #176	; 0xb0
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	32b0      	adds	r2, #176	; 0xb0
 800b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b656:	2303      	movs	r3, #3
 800b658:	e008      	b.n	800b66c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	32b0      	adds	r2, #176	; 0xb0
 800b68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	e004      	b.n	800b6a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32b0      	adds	r2, #176	; 0xb0
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	32b0      	adds	r2, #176	; 0xb0
 800b6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e018      	b.n	800b714 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7c1b      	ldrb	r3, [r3, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10a      	bne.n	800b700 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b6ea:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <USBD_CDC_ReceivePacket+0x68>)
 800b6ec:	7819      	ldrb	r1, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7f6 fd9d 	bl	8002238 <USBD_LL_PrepareReceive>
 800b6fe:	e008      	b.n	800b712 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <USBD_CDC_ReceivePacket+0x68>)
 800b702:	7819      	ldrb	r1, [r3, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b70a:	2340      	movs	r3, #64	; 0x40
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7f6 fd93 	bl	8002238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	2000013c 	.word	0x2000013c

0800b720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e01f      	b.n	800b778 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	79fa      	ldrb	r2, [r7, #7]
 800b76a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7f6 fc0d 	bl	8001f8c <USBD_LL_Init>
 800b772:	4603      	mov	r3, r0
 800b774:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e025      	b.n	800b7e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	32ae      	adds	r2, #174	; 0xae
 800b7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00f      	beq.n	800b7d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32ae      	adds	r2, #174	; 0xae
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	f107 020e 	add.w	r2, r7, #14
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7f6 fc15 	bl	8002024 <USBD_LL_Start>
 800b7fa:	4603      	mov	r3, r0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b80c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	460b      	mov	r3, r1
 800b824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	4611      	mov	r1, r2
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4611      	mov	r1, r2
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f001 f908 	bl	800caae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d01a      	beq.n	800b8f8 <USBD_LL_SetupStage+0x72>
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d822      	bhi.n	800b90c <USBD_LL_SetupStage+0x86>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <USBD_LL_SetupStage+0x4a>
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d00a      	beq.n	800b8e4 <USBD_LL_SetupStage+0x5e>
 800b8ce:	e01d      	b.n	800b90c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fb5f 	bl	800bf9c <USBD_StdDevReq>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e2:	e020      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fbc7 	bl	800c080 <USBD_StdItfReq>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b8f6:	e016      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fc29 	bl	800c158 <USBD_StdEPReq>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
      break;
 800b90a:	e00c      	b.n	800b926 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b916:	b2db      	uxtb	r3, r3
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7f6 fbe2 	bl	80020e4 <USBD_LL_StallEP>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
      break;
 800b924:	bf00      	nop
  }

  return ret;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	460b      	mov	r3, r1
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d16e      	bne.n	800ba26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b94e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b956:	2b03      	cmp	r3, #3
 800b958:	f040 8098 	bne.w	800ba8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	429a      	cmp	r2, r3
 800b966:	d913      	bls.n	800b990 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	1ad2      	subs	r2, r2, r3
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	68da      	ldr	r2, [r3, #12]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	4293      	cmp	r3, r2
 800b980:	bf28      	it	cs
 800b982:	4613      	movcs	r3, r2
 800b984:	461a      	mov	r2, r3
 800b986:	6879      	ldr	r1, [r7, #4]
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f001 f984 	bl	800cc96 <USBD_CtlContinueRx>
 800b98e:	e07d      	b.n	800ba8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b996:	f003 031f 	and.w	r3, r3, #31
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d014      	beq.n	800b9c8 <USBD_LL_DataOutStage+0x98>
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d81d      	bhi.n	800b9de <USBD_LL_DataOutStage+0xae>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <USBD_LL_DataOutStage+0x7c>
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d003      	beq.n	800b9b2 <USBD_LL_DataOutStage+0x82>
 800b9aa:	e018      	b.n	800b9de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b9b0:	e018      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fa5e 	bl	800be7e <USBD_CoreFindIF>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	75bb      	strb	r3, [r7, #22]
            break;
 800b9c6:	e00d      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 fa60 	bl	800be98 <USBD_CoreFindEP>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75bb      	strb	r3, [r7, #22]
            break;
 800b9dc:	e002      	b.n	800b9e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b9e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b9e4:	7dbb      	ldrb	r3, [r7, #22]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d119      	bne.n	800ba1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d113      	bne.n	800ba1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b9f6:	7dba      	ldrb	r2, [r7, #22]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	32ae      	adds	r2, #174	; 0xae
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ba06:	7dba      	ldrb	r2, [r7, #22]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ba0e:	7dba      	ldrb	r2, [r7, #22]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	32ae      	adds	r2, #174	; 0xae
 800ba14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f001 f94a 	bl	800ccb8 <USBD_CtlSendStatus>
 800ba24:	e032      	b.n	800ba8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ba26:	7afb      	ldrb	r3, [r7, #11]
 800ba28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	4619      	mov	r1, r3
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 fa31 	bl	800be98 <USBD_CoreFindEP>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba3a:	7dbb      	ldrb	r3, [r7, #22]
 800ba3c:	2bff      	cmp	r3, #255	; 0xff
 800ba3e:	d025      	beq.n	800ba8c <USBD_LL_DataOutStage+0x15c>
 800ba40:	7dbb      	ldrb	r3, [r7, #22]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d122      	bne.n	800ba8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d117      	bne.n	800ba82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ba52:	7dba      	ldrb	r2, [r7, #22]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	32ae      	adds	r2, #174	; 0xae
 800ba58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00f      	beq.n	800ba82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ba62:	7dba      	ldrb	r2, [r7, #22]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ba6a:	7dba      	ldrb	r2, [r7, #22]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	32ae      	adds	r2, #174	; 0xae
 800ba70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	7afa      	ldrb	r2, [r7, #11]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	e000      	b.n	800ba8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	607a      	str	r2, [r7, #4]
 800baa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d16f      	bne.n	800bb8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3314      	adds	r3, #20
 800baae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d15a      	bne.n	800bb70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	689a      	ldr	r2, [r3, #8]
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d914      	bls.n	800baf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	461a      	mov	r2, r3
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f001 f8ac 	bl	800cc3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bae2:	2300      	movs	r3, #0
 800bae4:	2200      	movs	r2, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7f6 fba5 	bl	8002238 <USBD_LL_PrepareReceive>
 800baee:	e03f      	b.n	800bb70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	68da      	ldr	r2, [r3, #12]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d11c      	bne.n	800bb36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	685a      	ldr	r2, [r3, #4]
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d316      	bcc.n	800bb36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d20f      	bcs.n	800bb36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f001 f88d 	bl	800cc3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f7f6 fb82 	bl	8002238 <USBD_LL_PrepareReceive>
 800bb34:	e01c      	b.n	800bb70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d10f      	bne.n	800bb62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d009      	beq.n	800bb62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb62:	2180      	movs	r1, #128	; 0x80
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7f6 fabd 	bl	80020e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f001 f8b7 	bl	800ccde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d03a      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fe42 	bl	800b804 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb88:	e032      	b.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bb8a:	7afb      	ldrb	r3, [r7, #11]
 800bb8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	4619      	mov	r1, r3
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f97f 	bl	800be98 <USBD_CoreFindEP>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
 800bba0:	2bff      	cmp	r3, #255	; 0xff
 800bba2:	d025      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d122      	bne.n	800bbf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d11c      	bne.n	800bbf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bbb6:	7dfa      	ldrb	r2, [r7, #23]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	32ae      	adds	r2, #174	; 0xae
 800bbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d014      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bbc6:	7dfa      	ldrb	r2, [r7, #23]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bbce:	7dfa      	ldrb	r2, [r7, #23]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	32ae      	adds	r2, #174	; 0xae
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	7afa      	ldrb	r2, [r7, #11]
 800bbdc:	4611      	mov	r1, r2
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	4798      	blx	r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bbe6:	7dbb      	ldrb	r3, [r7, #22]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bbec:	7dbb      	ldrb	r3, [r7, #22]
 800bbee:	e000      	b.n	800bbf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d014      	beq.n	800bc60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00e      	beq.n	800bc60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6852      	ldr	r2, [r2, #4]
 800bc4e:	b2d2      	uxtb	r2, r2
 800bc50:	4611      	mov	r1, r2
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc60:	2340      	movs	r3, #64	; 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f6 f9f7 	bl	800205a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2240      	movs	r2, #64	; 0x40
 800bc78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc7c:	2340      	movs	r3, #64	; 0x40
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2180      	movs	r1, #128	; 0x80
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7f6 f9e9 	bl	800205a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2240      	movs	r2, #64	; 0x40
 800bc92:	621a      	str	r2, [r3, #32]

  return ret;
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	78fa      	ldrb	r2, [r7, #3]
 800bcae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2204      	movs	r2, #4
 800bcd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d106      	bne.n	800bd0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d110      	bne.n	800bd50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00b      	beq.n	800bd50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	32ae      	adds	r2, #174	; 0xae
 800bd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e01c      	b.n	800bdb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b03      	cmp	r3, #3
 800bd86:	d115      	bne.n	800bdb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32ae      	adds	r2, #174	; 0xae
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	6a1b      	ldr	r3, [r3, #32]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	32ae      	adds	r2, #174	; 0xae
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	32ae      	adds	r2, #174	; 0xae
 800bdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bddc:	2303      	movs	r3, #3
 800bdde:	e01c      	b.n	800be1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d115      	bne.n	800be18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	32ae      	adds	r2, #174	; 0xae
 800bdf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00b      	beq.n	800be18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	32ae      	adds	r2, #174	; 0xae
 800be0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	78fa      	ldrb	r2, [r7, #3]
 800be12:	4611      	mov	r1, r2
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00e      	beq.n	800be74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	6852      	ldr	r2, [r2, #4]
 800be62:	b2d2      	uxtb	r2, r2
 800be64:	4611      	mov	r1, r2
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	4798      	blx	r3
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800be70:	2303      	movs	r3, #3
 800be72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be74:	7bfb      	ldrb	r3, [r7, #15]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800be8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bea4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b086      	sub	sp, #24
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	885b      	ldrh	r3, [r3, #2]
 800bece:	b29a      	uxth	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d920      	bls.n	800bf1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bee2:	e013      	b.n	800bf0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bee4:	f107 030a 	add.w	r3, r7, #10
 800bee8:	4619      	mov	r1, r3
 800beea:	6978      	ldr	r0, [r7, #20]
 800beec:	f000 f81b 	bl	800bf26 <USBD_GetNextDesc>
 800bef0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b05      	cmp	r3, #5
 800bef8:	d108      	bne.n	800bf0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	789b      	ldrb	r3, [r3, #2]
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d008      	beq.n	800bf1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	885b      	ldrh	r3, [r3, #2]
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	897b      	ldrh	r3, [r7, #10]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d8e5      	bhi.n	800bee4 <USBD_GetEpDesc+0x32>
 800bf18:	e000      	b.n	800bf1c <USBD_GetEpDesc+0x6a>
          break;
 800bf1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bf1c:	693b      	ldr	r3, [r7, #16]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b085      	sub	sp, #20
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	881a      	ldrh	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	4413      	add	r3, r2
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4413      	add	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf52:	68fb      	ldr	r3, [r7, #12]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	3301      	adds	r3, #1
 800bf76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf7e:	8a3b      	ldrh	r3, [r7, #16]
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	b21a      	sxth	r2, r3
 800bf84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	b21b      	sxth	r3, r3
 800bf8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf8e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	371c      	adds	r7, #28
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb2:	2b40      	cmp	r3, #64	; 0x40
 800bfb4:	d005      	beq.n	800bfc2 <USBD_StdDevReq+0x26>
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d857      	bhi.n	800c06a <USBD_StdDevReq+0xce>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00f      	beq.n	800bfde <USBD_StdDevReq+0x42>
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	d153      	bne.n	800c06a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	32ae      	adds	r2, #174	; 0xae
 800bfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	4798      	blx	r3
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]
      break;
 800bfdc:	e04a      	b.n	800c074 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	2b09      	cmp	r3, #9
 800bfe4:	d83b      	bhi.n	800c05e <USBD_StdDevReq+0xc2>
 800bfe6:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <USBD_StdDevReq+0x50>)
 800bfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800c055 	.word	0x0800c055
 800bff4:	0800c05f 	.word	0x0800c05f
 800bff8:	0800c04b 	.word	0x0800c04b
 800bffc:	0800c05f 	.word	0x0800c05f
 800c000:	0800c01f 	.word	0x0800c01f
 800c004:	0800c015 	.word	0x0800c015
 800c008:	0800c05f 	.word	0x0800c05f
 800c00c:	0800c037 	.word	0x0800c037
 800c010:	0800c029 	.word	0x0800c029
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fa3c 	bl	800c494 <USBD_GetDescriptor>
          break;
 800c01c:	e024      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fba1 	bl	800c768 <USBD_SetAddress>
          break;
 800c026:	e01f      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fbe0 	bl	800c7f0 <USBD_SetConfig>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
          break;
 800c034:	e018      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fc83 	bl	800c944 <USBD_GetConfig>
          break;
 800c03e:	e013      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fcb4 	bl	800c9b0 <USBD_GetStatus>
          break;
 800c048:	e00e      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fce3 	bl	800ca18 <USBD_SetFeature>
          break;
 800c052:	e009      	b.n	800c068 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fd07 	bl	800ca6a <USBD_ClrFeature>
          break;
 800c05c:	e004      	b.n	800c068 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fd5e 	bl	800cb22 <USBD_CtlError>
          break;
 800c066:	bf00      	nop
      }
      break;
 800c068:	e004      	b.n	800c074 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fd58 	bl	800cb22 <USBD_CtlError>
      break;
 800c072:	bf00      	nop
  }

  return ret;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop

0800c080 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c096:	2b40      	cmp	r3, #64	; 0x40
 800c098:	d005      	beq.n	800c0a6 <USBD_StdItfReq+0x26>
 800c09a:	2b40      	cmp	r3, #64	; 0x40
 800c09c:	d852      	bhi.n	800c144 <USBD_StdItfReq+0xc4>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <USBD_StdItfReq+0x26>
 800c0a2:	2b20      	cmp	r3, #32
 800c0a4:	d14e      	bne.n	800c144 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d840      	bhi.n	800c136 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	889b      	ldrh	r3, [r3, #4]
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d836      	bhi.n	800c12c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	889b      	ldrh	r3, [r3, #4]
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fed9 	bl	800be7e <USBD_CoreFindIF>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	2bff      	cmp	r3, #255	; 0xff
 800c0d4:	d01d      	beq.n	800c112 <USBD_StdItfReq+0x92>
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d11a      	bne.n	800c112 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c0dc:	7bba      	ldrb	r2, [r7, #14]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	32ae      	adds	r2, #174	; 0xae
 800c0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00f      	beq.n	800c10c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c0ec:	7bba      	ldrb	r2, [r7, #14]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0f4:	7bba      	ldrb	r2, [r7, #14]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32ae      	adds	r2, #174	; 0xae
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c10a:	e004      	b.n	800c116 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c10c:	2303      	movs	r3, #3
 800c10e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c110:	e001      	b.n	800c116 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c112:	2303      	movs	r3, #3
 800c114:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	88db      	ldrh	r3, [r3, #6]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d110      	bne.n	800c140 <USBD_StdItfReq+0xc0>
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10d      	bne.n	800c140 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fdc7 	bl	800ccb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c12a:	e009      	b.n	800c140 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fcf7 	bl	800cb22 <USBD_CtlError>
          break;
 800c134:	e004      	b.n	800c140 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fcf2 	bl	800cb22 <USBD_CtlError>
          break;
 800c13e:	e000      	b.n	800c142 <USBD_StdItfReq+0xc2>
          break;
 800c140:	bf00      	nop
      }
      break;
 800c142:	e004      	b.n	800c14e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fceb 	bl	800cb22 <USBD_CtlError>
      break;
 800c14c:	bf00      	nop
  }

  return ret;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	889b      	ldrh	r3, [r3, #4]
 800c16a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c174:	2b40      	cmp	r3, #64	; 0x40
 800c176:	d007      	beq.n	800c188 <USBD_StdEPReq+0x30>
 800c178:	2b40      	cmp	r3, #64	; 0x40
 800c17a:	f200 817f 	bhi.w	800c47c <USBD_StdEPReq+0x324>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d02a      	beq.n	800c1d8 <USBD_StdEPReq+0x80>
 800c182:	2b20      	cmp	r3, #32
 800c184:	f040 817a 	bne.w	800c47c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fe83 	bl	800be98 <USBD_CoreFindEP>
 800c192:	4603      	mov	r3, r0
 800c194:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c196:	7b7b      	ldrb	r3, [r7, #13]
 800c198:	2bff      	cmp	r3, #255	; 0xff
 800c19a:	f000 8174 	beq.w	800c486 <USBD_StdEPReq+0x32e>
 800c19e:	7b7b      	ldrb	r3, [r7, #13]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 8170 	bne.w	800c486 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c1a6:	7b7a      	ldrb	r2, [r7, #13]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c1ae:	7b7a      	ldrb	r2, [r7, #13]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	32ae      	adds	r2, #174	; 0xae
 800c1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 8163 	beq.w	800c486 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c1c0:	7b7a      	ldrb	r2, [r7, #13]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	32ae      	adds	r2, #174	; 0xae
 800c1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	4798      	blx	r3
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c1d6:	e156      	b.n	800c486 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	2b03      	cmp	r3, #3
 800c1de:	d008      	beq.n	800c1f2 <USBD_StdEPReq+0x9a>
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	f300 8145 	bgt.w	800c470 <USBD_StdEPReq+0x318>
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 809b 	beq.w	800c322 <USBD_StdEPReq+0x1ca>
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d03c      	beq.n	800c26a <USBD_StdEPReq+0x112>
 800c1f0:	e13e      	b.n	800c470 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d002      	beq.n	800c204 <USBD_StdEPReq+0xac>
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d016      	beq.n	800c230 <USBD_StdEPReq+0xd8>
 800c202:	e02c      	b.n	800c25e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00d      	beq.n	800c226 <USBD_StdEPReq+0xce>
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	2b80      	cmp	r3, #128	; 0x80
 800c20e:	d00a      	beq.n	800c226 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7f5 ff65 	bl	80020e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c21a:	2180      	movs	r1, #128	; 0x80
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7f5 ff61 	bl	80020e4 <USBD_LL_StallEP>
 800c222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c224:	e020      	b.n	800c268 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fc7a 	bl	800cb22 <USBD_CtlError>
              break;
 800c22e:	e01b      	b.n	800c268 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	885b      	ldrh	r3, [r3, #2]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10e      	bne.n	800c256 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00b      	beq.n	800c256 <USBD_StdEPReq+0xfe>
 800c23e:	7bbb      	ldrb	r3, [r7, #14]
 800c240:	2b80      	cmp	r3, #128	; 0x80
 800c242:	d008      	beq.n	800c256 <USBD_StdEPReq+0xfe>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	88db      	ldrh	r3, [r3, #6]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d104      	bne.n	800c256 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7f5 ff47 	bl	80020e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fd2e 	bl	800ccb8 <USBD_CtlSendStatus>

              break;
 800c25c:	e004      	b.n	800c268 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 fc5e 	bl	800cb22 <USBD_CtlError>
              break;
 800c266:	bf00      	nop
          }
          break;
 800c268:	e107      	b.n	800c47a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b02      	cmp	r3, #2
 800c274:	d002      	beq.n	800c27c <USBD_StdEPReq+0x124>
 800c276:	2b03      	cmp	r3, #3
 800c278:	d016      	beq.n	800c2a8 <USBD_StdEPReq+0x150>
 800c27a:	e04b      	b.n	800c314 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00d      	beq.n	800c29e <USBD_StdEPReq+0x146>
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b80      	cmp	r3, #128	; 0x80
 800c286:	d00a      	beq.n	800c29e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7f5 ff29 	bl	80020e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c292:	2180      	movs	r1, #128	; 0x80
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7f5 ff25 	bl	80020e4 <USBD_LL_StallEP>
 800c29a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c29c:	e040      	b.n	800c320 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fc3e 	bl	800cb22 <USBD_CtlError>
              break;
 800c2a6:	e03b      	b.n	800c320 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	885b      	ldrh	r3, [r3, #2]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d136      	bne.n	800c31e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d004      	beq.n	800c2c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c2ba:	7bbb      	ldrb	r3, [r7, #14]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7f5 ff2f 	bl	8002122 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fcf7 	bl	800ccb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2ca:	7bbb      	ldrb	r3, [r7, #14]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fde2 	bl	800be98 <USBD_CoreFindEP>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2d8:	7b7b      	ldrb	r3, [r7, #13]
 800c2da:	2bff      	cmp	r3, #255	; 0xff
 800c2dc:	d01f      	beq.n	800c31e <USBD_StdEPReq+0x1c6>
 800c2de:	7b7b      	ldrb	r3, [r7, #13]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11c      	bne.n	800c31e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c2e4:	7b7a      	ldrb	r2, [r7, #13]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c2ec:	7b7a      	ldrb	r2, [r7, #13]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	32ae      	adds	r2, #174	; 0xae
 800c2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d010      	beq.n	800c31e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2fc:	7b7a      	ldrb	r2, [r7, #13]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	32ae      	adds	r2, #174	; 0xae
 800c302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
 800c30e:	4603      	mov	r3, r0
 800c310:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c312:	e004      	b.n	800c31e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fc03 	bl	800cb22 <USBD_CtlError>
              break;
 800c31c:	e000      	b.n	800c320 <USBD_StdEPReq+0x1c8>
              break;
 800c31e:	bf00      	nop
          }
          break;
 800c320:	e0ab      	b.n	800c47a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d002      	beq.n	800c334 <USBD_StdEPReq+0x1dc>
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d032      	beq.n	800c398 <USBD_StdEPReq+0x240>
 800c332:	e097      	b.n	800c464 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d007      	beq.n	800c34a <USBD_StdEPReq+0x1f2>
 800c33a:	7bbb      	ldrb	r3, [r7, #14]
 800c33c:	2b80      	cmp	r3, #128	; 0x80
 800c33e:	d004      	beq.n	800c34a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fbed 	bl	800cb22 <USBD_CtlError>
                break;
 800c348:	e091      	b.n	800c46e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c34a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da0b      	bge.n	800c36a <USBD_StdEPReq+0x212>
 800c352:	7bbb      	ldrb	r3, [r7, #14]
 800c354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c358:	4613      	mov	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	3310      	adds	r3, #16
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	4413      	add	r3, r2
 800c366:	3304      	adds	r3, #4
 800c368:	e00b      	b.n	800c382 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	4413      	add	r3, r2
 800c380:	3304      	adds	r3, #4
 800c382:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2202      	movs	r2, #2
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fc37 	bl	800cc04 <USBD_CtlSendData>
              break;
 800c396:	e06a      	b.n	800c46e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	da11      	bge.n	800c3c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
 800c3a2:	f003 020f 	and.w	r2, r3, #15
 800c3a6:	6879      	ldr	r1, [r7, #4]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	440b      	add	r3, r1
 800c3b2:	3324      	adds	r3, #36	; 0x24
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d117      	bne.n	800c3ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fbb0 	bl	800cb22 <USBD_CtlError>
                  break;
 800c3c2:	e054      	b.n	800c46e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	f003 020f 	and.w	r2, r3, #15
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	440b      	add	r3, r1
 800c3d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d104      	bne.n	800c3ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fb9d 	bl	800cb22 <USBD_CtlError>
                  break;
 800c3e8:	e041      	b.n	800c46e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	da0b      	bge.n	800c40a <USBD_StdEPReq+0x2b2>
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	3310      	adds	r3, #16
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4413      	add	r3, r2
 800c406:	3304      	adds	r3, #4
 800c408:	e00b      	b.n	800c422 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c40a:	7bbb      	ldrb	r3, [r7, #14]
 800c40c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c410:	4613      	mov	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	4413      	add	r3, r2
 800c420:	3304      	adds	r3, #4
 800c422:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <USBD_StdEPReq+0x2d8>
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	2b80      	cmp	r3, #128	; 0x80
 800c42e:	d103      	bne.n	800c438 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	e00e      	b.n	800c456 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7f5 fe8f 	bl	8002160 <USBD_LL_IsStallEP>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	2201      	movs	r2, #1
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	e002      	b.n	800c456 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	2202      	movs	r2, #2
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fbd1 	bl	800cc04 <USBD_CtlSendData>
              break;
 800c462:	e004      	b.n	800c46e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fb5b 	bl	800cb22 <USBD_CtlError>
              break;
 800c46c:	bf00      	nop
          }
          break;
 800c46e:	e004      	b.n	800c47a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fb55 	bl	800cb22 <USBD_CtlError>
          break;
 800c478:	bf00      	nop
      }
      break;
 800c47a:	e005      	b.n	800c488 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fb4f 	bl	800cb22 <USBD_CtlError>
      break;
 800c484:	e000      	b.n	800c488 <USBD_StdEPReq+0x330>
      break;
 800c486:	bf00      	nop
  }

  return ret;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	885b      	ldrh	r3, [r3, #2]
 800c4ae:	0a1b      	lsrs	r3, r3, #8
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	2b06      	cmp	r3, #6
 800c4b6:	f200 8128 	bhi.w	800c70a <USBD_GetDescriptor+0x276>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <USBD_GetDescriptor+0x2c>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4dd 	.word	0x0800c4dd
 800c4c4:	0800c4f5 	.word	0x0800c4f5
 800c4c8:	0800c535 	.word	0x0800c535
 800c4cc:	0800c70b 	.word	0x0800c70b
 800c4d0:	0800c70b 	.word	0x0800c70b
 800c4d4:	0800c6ab 	.word	0x0800c6ab
 800c4d8:	0800c6d7 	.word	0x0800c6d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7c12      	ldrb	r2, [r2, #16]
 800c4e8:	f107 0108 	add.w	r1, r7, #8
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
 800c4f0:	60f8      	str	r0, [r7, #12]
      break;
 800c4f2:	e112      	b.n	800c71a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7c1b      	ldrb	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10d      	bne.n	800c518 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c504:	f107 0208 	add.w	r2, r7, #8
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
 800c50c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3301      	adds	r3, #1
 800c512:	2202      	movs	r2, #2
 800c514:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c516:	e100      	b.n	800c71a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c520:	f107 0208 	add.w	r2, r7, #8
 800c524:	4610      	mov	r0, r2
 800c526:	4798      	blx	r3
 800c528:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	3301      	adds	r3, #1
 800c52e:	2202      	movs	r2, #2
 800c530:	701a      	strb	r2, [r3, #0]
      break;
 800c532:	e0f2      	b.n	800c71a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	885b      	ldrh	r3, [r3, #2]
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b05      	cmp	r3, #5
 800c53c:	f200 80ac 	bhi.w	800c698 <USBD_GetDescriptor+0x204>
 800c540:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <USBD_GetDescriptor+0xb4>)
 800c542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c546:	bf00      	nop
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c595 	.word	0x0800c595
 800c550:	0800c5c9 	.word	0x0800c5c9
 800c554:	0800c5fd 	.word	0x0800c5fd
 800c558:	0800c631 	.word	0x0800c631
 800c55c:	0800c665 	.word	0x0800c665
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00b      	beq.n	800c584 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	7c12      	ldrb	r2, [r2, #16]
 800c578:	f107 0108 	add.w	r1, r7, #8
 800c57c:	4610      	mov	r0, r2
 800c57e:	4798      	blx	r3
 800c580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c582:	e091      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 facb 	bl	800cb22 <USBD_CtlError>
            err++;
 800c58c:	7afb      	ldrb	r3, [r7, #11]
 800c58e:	3301      	adds	r3, #1
 800c590:	72fb      	strb	r3, [r7, #11]
          break;
 800c592:	e089      	b.n	800c6a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	7c12      	ldrb	r2, [r2, #16]
 800c5ac:	f107 0108 	add.w	r1, r7, #8
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4798      	blx	r3
 800c5b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5b6:	e077      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fab1 	bl	800cb22 <USBD_CtlError>
            err++;
 800c5c0:	7afb      	ldrb	r3, [r7, #11]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5c6:	e06f      	b.n	800c6a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00b      	beq.n	800c5ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	7c12      	ldrb	r2, [r2, #16]
 800c5e0:	f107 0108 	add.w	r1, r7, #8
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4798      	blx	r3
 800c5e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ea:	e05d      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fa97 	bl	800cb22 <USBD_CtlError>
            err++;
 800c5f4:	7afb      	ldrb	r3, [r7, #11]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5fa:	e055      	b.n	800c6a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	7c12      	ldrb	r2, [r2, #16]
 800c614:	f107 0108 	add.w	r1, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c61e:	e043      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fa7d 	bl	800cb22 <USBD_CtlError>
            err++;
 800c628:	7afb      	ldrb	r3, [r7, #11]
 800c62a:	3301      	adds	r3, #1
 800c62c:	72fb      	strb	r3, [r7, #11]
          break;
 800c62e:	e03b      	b.n	800c6a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7c12      	ldrb	r2, [r2, #16]
 800c648:	f107 0108 	add.w	r1, r7, #8
 800c64c:	4610      	mov	r0, r2
 800c64e:	4798      	blx	r3
 800c650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c652:	e029      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fa63 	bl	800cb22 <USBD_CtlError>
            err++;
 800c65c:	7afb      	ldrb	r3, [r7, #11]
 800c65e:	3301      	adds	r3, #1
 800c660:	72fb      	strb	r3, [r7, #11]
          break;
 800c662:	e021      	b.n	800c6a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00b      	beq.n	800c688 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	7c12      	ldrb	r2, [r2, #16]
 800c67c:	f107 0108 	add.w	r1, r7, #8
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
 800c684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c686:	e00f      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa49 	bl	800cb22 <USBD_CtlError>
            err++;
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	3301      	adds	r3, #1
 800c694:	72fb      	strb	r3, [r7, #11]
          break;
 800c696:	e007      	b.n	800c6a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fa41 	bl	800cb22 <USBD_CtlError>
          err++;
 800c6a0:	7afb      	ldrb	r3, [r7, #11]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c6a6:	bf00      	nop
      }
      break;
 800c6a8:	e037      	b.n	800c71a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7c1b      	ldrb	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d109      	bne.n	800c6c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ba:	f107 0208 	add.w	r2, r7, #8
 800c6be:	4610      	mov	r0, r2
 800c6c0:	4798      	blx	r3
 800c6c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6c4:	e029      	b.n	800c71a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa2a 	bl	800cb22 <USBD_CtlError>
        err++;
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c6d4:	e021      	b.n	800c71a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7c1b      	ldrb	r3, [r3, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10d      	bne.n	800c6fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e6:	f107 0208 	add.w	r2, r7, #8
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4798      	blx	r3
 800c6ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	2207      	movs	r2, #7
 800c6f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6f8:	e00f      	b.n	800c71a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa10 	bl	800cb22 <USBD_CtlError>
        err++;
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	3301      	adds	r3, #1
 800c706:	72fb      	strb	r3, [r7, #11]
      break;
 800c708:	e007      	b.n	800c71a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fa08 	bl	800cb22 <USBD_CtlError>
      err++;
 800c712:	7afb      	ldrb	r3, [r7, #11]
 800c714:	3301      	adds	r3, #1
 800c716:	72fb      	strb	r3, [r7, #11]
      break;
 800c718:	bf00      	nop
  }

  if (err != 0U)
 800c71a:	7afb      	ldrb	r3, [r7, #11]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d11e      	bne.n	800c75e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	88db      	ldrh	r3, [r3, #6]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d016      	beq.n	800c756 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c728:	893b      	ldrh	r3, [r7, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00e      	beq.n	800c74c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	88da      	ldrh	r2, [r3, #6]
 800c732:	893b      	ldrh	r3, [r7, #8]
 800c734:	4293      	cmp	r3, r2
 800c736:	bf28      	it	cs
 800c738:	4613      	movcs	r3, r2
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c73e:	893b      	ldrh	r3, [r7, #8]
 800c740:	461a      	mov	r2, r3
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 fa5d 	bl	800cc04 <USBD_CtlSendData>
 800c74a:	e009      	b.n	800c760 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f9e7 	bl	800cb22 <USBD_CtlError>
 800c754:	e004      	b.n	800c760 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 faae 	bl	800ccb8 <USBD_CtlSendStatus>
 800c75c:	e000      	b.n	800c760 <USBD_GetDescriptor+0x2cc>
    return;
 800c75e:	bf00      	nop
  }
}
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop

0800c768 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	889b      	ldrh	r3, [r3, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d131      	bne.n	800c7de <USBD_SetAddress+0x76>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	88db      	ldrh	r3, [r3, #6]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d12d      	bne.n	800c7de <USBD_SetAddress+0x76>
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	885b      	ldrh	r3, [r3, #2]
 800c786:	2b7f      	cmp	r3, #127	; 0x7f
 800c788:	d829      	bhi.n	800c7de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	885b      	ldrh	r3, [r3, #2]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d104      	bne.n	800c7ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f9bc 	bl	800cb22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7aa:	e01d      	b.n	800c7e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7bfa      	ldrb	r2, [r7, #15]
 800c7b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7f5 fcfd 	bl	80021b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fa7a 	bl	800ccb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d004      	beq.n	800c7d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7d2:	e009      	b.n	800c7e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7dc:	e004      	b.n	800c7e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f99e 	bl	800cb22 <USBD_CtlError>
  }
}
 800c7e6:	bf00      	nop
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	885b      	ldrh	r3, [r3, #2]
 800c802:	b2da      	uxtb	r2, r3
 800c804:	4b4e      	ldr	r3, [pc, #312]	; (800c940 <USBD_SetConfig+0x150>)
 800c806:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c808:	4b4d      	ldr	r3, [pc, #308]	; (800c940 <USBD_SetConfig+0x150>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d905      	bls.n	800c81c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f985 	bl	800cb22 <USBD_CtlError>
    return USBD_FAIL;
 800c818:	2303      	movs	r3, #3
 800c81a:	e08c      	b.n	800c936 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b02      	cmp	r3, #2
 800c826:	d002      	beq.n	800c82e <USBD_SetConfig+0x3e>
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d029      	beq.n	800c880 <USBD_SetConfig+0x90>
 800c82c:	e075      	b.n	800c91a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c82e:	4b44      	ldr	r3, [pc, #272]	; (800c940 <USBD_SetConfig+0x150>)
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d020      	beq.n	800c878 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c836:	4b42      	ldr	r3, [pc, #264]	; (800c940 <USBD_SetConfig+0x150>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c840:	4b3f      	ldr	r3, [pc, #252]	; (800c940 <USBD_SetConfig+0x150>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7fe ffe7 	bl	800b81a <USBD_SetClassConfig>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d008      	beq.n	800c868 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f962 	bl	800cb22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2202      	movs	r2, #2
 800c862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c866:	e065      	b.n	800c934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fa25 	bl	800ccb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2203      	movs	r2, #3
 800c872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c876:	e05d      	b.n	800c934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fa1d 	bl	800ccb8 <USBD_CtlSendStatus>
      break;
 800c87e:	e059      	b.n	800c934 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c880:	4b2f      	ldr	r3, [pc, #188]	; (800c940 <USBD_SetConfig+0x150>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d112      	bne.n	800c8ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2202      	movs	r2, #2
 800c88c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c890:	4b2b      	ldr	r3, [pc, #172]	; (800c940 <USBD_SetConfig+0x150>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c89a:	4b29      	ldr	r3, [pc, #164]	; (800c940 <USBD_SetConfig+0x150>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fe ffd6 	bl	800b852 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fa06 	bl	800ccb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c8ac:	e042      	b.n	800c934 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c8ae:	4b24      	ldr	r3, [pc, #144]	; (800c940 <USBD_SetConfig+0x150>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d02a      	beq.n	800c912 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7fe ffc4 	bl	800b852 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c8ca:	4b1d      	ldr	r3, [pc, #116]	; (800c940 <USBD_SetConfig+0x150>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8d4:	4b1a      	ldr	r3, [pc, #104]	; (800c940 <USBD_SetConfig+0x150>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fe ff9d 	bl	800b81a <USBD_SetClassConfig>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00f      	beq.n	800c90a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f918 	bl	800cb22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7fe ffa9 	bl	800b852 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2202      	movs	r2, #2
 800c904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c908:	e014      	b.n	800c934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f9d4 	bl	800ccb8 <USBD_CtlSendStatus>
      break;
 800c910:	e010      	b.n	800c934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f9d0 	bl	800ccb8 <USBD_CtlSendStatus>
      break;
 800c918:	e00c      	b.n	800c934 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f900 	bl	800cb22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c922:	4b07      	ldr	r3, [pc, #28]	; (800c940 <USBD_SetConfig+0x150>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7fe ff92 	bl	800b852 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c92e:	2303      	movs	r3, #3
 800c930:	73fb      	strb	r3, [r7, #15]
      break;
 800c932:	bf00      	nop
  }

  return ret;
 800c934:	7bfb      	ldrb	r3, [r7, #15]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	200025c8 	.word	0x200025c8

0800c944 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	88db      	ldrh	r3, [r3, #6]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d004      	beq.n	800c960 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f000 f8e2 	bl	800cb22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c95e:	e023      	b.n	800c9a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b02      	cmp	r3, #2
 800c96a:	dc02      	bgt.n	800c972 <USBD_GetConfig+0x2e>
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	dc03      	bgt.n	800c978 <USBD_GetConfig+0x34>
 800c970:	e015      	b.n	800c99e <USBD_GetConfig+0x5a>
 800c972:	2b03      	cmp	r3, #3
 800c974:	d00b      	beq.n	800c98e <USBD_GetConfig+0x4a>
 800c976:	e012      	b.n	800c99e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	3308      	adds	r3, #8
 800c982:	2201      	movs	r2, #1
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f93c 	bl	800cc04 <USBD_CtlSendData>
        break;
 800c98c:	e00c      	b.n	800c9a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3304      	adds	r3, #4
 800c992:	2201      	movs	r2, #1
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f934 	bl	800cc04 <USBD_CtlSendData>
        break;
 800c99c:	e004      	b.n	800c9a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f8be 	bl	800cb22 <USBD_CtlError>
        break;
 800c9a6:	bf00      	nop
}
 800c9a8:	bf00      	nop
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d81e      	bhi.n	800ca06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	88db      	ldrh	r3, [r3, #6]
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d004      	beq.n	800c9da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f8a5 	bl	800cb22 <USBD_CtlError>
        break;
 800c9d8:	e01a      	b.n	800ca10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d005      	beq.n	800c9f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	f043 0202 	orr.w	r2, r3, #2
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	330c      	adds	r3, #12
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f900 	bl	800cc04 <USBD_CtlSendData>
      break;
 800ca04:	e004      	b.n	800ca10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f88a 	bl	800cb22 <USBD_CtlError>
      break;
 800ca0e:	bf00      	nop
  }
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	885b      	ldrh	r3, [r3, #2]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d107      	bne.n	800ca3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f940 	bl	800ccb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ca38:	e013      	b.n	800ca62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d10b      	bne.n	800ca5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	889b      	ldrh	r3, [r3, #4]
 800ca46:	0a1b      	lsrs	r3, r3, #8
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f930 	bl	800ccb8 <USBD_CtlSendStatus>
}
 800ca58:	e003      	b.n	800ca62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f860 	bl	800cb22 <USBD_CtlError>
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d80b      	bhi.n	800ca9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	885b      	ldrh	r3, [r3, #2]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d10c      	bne.n	800caa4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f910 	bl	800ccb8 <USBD_CtlSendStatus>
      }
      break;
 800ca98:	e004      	b.n	800caa4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f840 	bl	800cb22 <USBD_CtlError>
      break;
 800caa2:	e000      	b.n	800caa6 <USBD_ClrFeature+0x3c>
      break;
 800caa4:	bf00      	nop
  }
}
 800caa6:	bf00      	nop
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b084      	sub	sp, #16
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3301      	adds	r3, #1
 800cac8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	781a      	ldrb	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3301      	adds	r3, #1
 800cad6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fa41 	bl	800bf60 <SWAPBYTE>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3301      	adds	r3, #1
 800caea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fa34 	bl	800bf60 <SWAPBYTE>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3301      	adds	r3, #1
 800cb04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fa27 	bl	800bf60 <SWAPBYTE>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	80da      	strh	r2, [r3, #6]
}
 800cb1a:	bf00      	nop
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b082      	sub	sp, #8
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb2c:	2180      	movs	r1, #128	; 0x80
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7f5 fad8 	bl	80020e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb34:	2100      	movs	r1, #0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7f5 fad4 	bl	80020e4 <USBD_LL_StallEP>
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d036      	beq.n	800cbc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cb5e:	6938      	ldr	r0, [r7, #16]
 800cb60:	f000 f836 	bl	800cbd0 <USBD_GetLen>
 800cb64:	4603      	mov	r3, r0
 800cb66:	3301      	adds	r3, #1
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cb72:	7dfb      	ldrb	r3, [r7, #23]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	4413      	add	r3, r2
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	7812      	ldrb	r2, [r2, #0]
 800cb7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	3301      	adds	r3, #1
 800cb82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	4413      	add	r3, r2
 800cb8a:	2203      	movs	r2, #3
 800cb8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	3301      	adds	r3, #1
 800cb92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb94:	e013      	b.n	800cbbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	7812      	ldrb	r2, [r2, #0]
 800cba0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3301      	adds	r3, #1
 800cba6:	613b      	str	r3, [r7, #16]
    idx++;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e7      	bne.n	800cb96 <USBD_GetString+0x52>
 800cbc6:	e000      	b.n	800cbca <USBD_GetString+0x86>
    return;
 800cbc8:	bf00      	nop
  }
}
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cbe0:	e005      	b.n	800cbee <USBD_GetLen+0x1e>
  {
    len++;
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	3301      	adds	r3, #1
 800cbec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1f5      	bne.n	800cbe2 <USBD_GetLen+0x12>
  }

  return len;
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3714      	adds	r7, #20
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2202      	movs	r2, #2
 800cc14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	2100      	movs	r1, #0
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7f5 fae3 	bl	80021f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	60f8      	str	r0, [r7, #12]
 800cc42:	60b9      	str	r1, [r7, #8]
 800cc44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7f5 fad2 	bl	80021f6 <USBD_LL_Transmit>

  return USBD_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2203      	movs	r2, #3
 800cc6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	2100      	movs	r1, #0
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7f5 fad6 	bl	8002238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc8c:	2300      	movs	r3, #0
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	2100      	movs	r1, #0
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7f5 fac5 	bl	8002238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2204      	movs	r2, #4
 800ccc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ccc8:	2300      	movs	r3, #0
 800ccca:	2200      	movs	r2, #0
 800cccc:	2100      	movs	r1, #0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7f5 fa91 	bl	80021f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2205      	movs	r2, #5
 800ccea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7f5 fa9f 	bl	8002238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <memset>:
 800cd04:	4402      	add	r2, r0
 800cd06:	4603      	mov	r3, r0
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d100      	bne.n	800cd0e <memset+0xa>
 800cd0c:	4770      	bx	lr
 800cd0e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd12:	e7f9      	b.n	800cd08 <memset+0x4>

0800cd14 <__libc_init_array>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	4d0d      	ldr	r5, [pc, #52]	; (800cd4c <__libc_init_array+0x38>)
 800cd18:	4c0d      	ldr	r4, [pc, #52]	; (800cd50 <__libc_init_array+0x3c>)
 800cd1a:	1b64      	subs	r4, r4, r5
 800cd1c:	10a4      	asrs	r4, r4, #2
 800cd1e:	2600      	movs	r6, #0
 800cd20:	42a6      	cmp	r6, r4
 800cd22:	d109      	bne.n	800cd38 <__libc_init_array+0x24>
 800cd24:	4d0b      	ldr	r5, [pc, #44]	; (800cd54 <__libc_init_array+0x40>)
 800cd26:	4c0c      	ldr	r4, [pc, #48]	; (800cd58 <__libc_init_array+0x44>)
 800cd28:	f000 f818 	bl	800cd5c <_init>
 800cd2c:	1b64      	subs	r4, r4, r5
 800cd2e:	10a4      	asrs	r4, r4, #2
 800cd30:	2600      	movs	r6, #0
 800cd32:	42a6      	cmp	r6, r4
 800cd34:	d105      	bne.n	800cd42 <__libc_init_array+0x2e>
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
 800cd38:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd3c:	4798      	blx	r3
 800cd3e:	3601      	adds	r6, #1
 800cd40:	e7ee      	b.n	800cd20 <__libc_init_array+0xc>
 800cd42:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd46:	4798      	blx	r3
 800cd48:	3601      	adds	r6, #1
 800cd4a:	e7f2      	b.n	800cd32 <__libc_init_array+0x1e>
 800cd4c:	0800cf78 	.word	0x0800cf78
 800cd50:	0800cf78 	.word	0x0800cf78
 800cd54:	0800cf78 	.word	0x0800cf78
 800cd58:	0800cf7c 	.word	0x0800cf7c

0800cd5c <_init>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	bf00      	nop
 800cd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd62:	bc08      	pop	{r3}
 800cd64:	469e      	mov	lr, r3
 800cd66:	4770      	bx	lr

0800cd68 <_fini>:
 800cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6a:	bf00      	nop
 800cd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd6e:	bc08      	pop	{r3}
 800cd70:	469e      	mov	lr, r3
 800cd72:	4770      	bx	lr
